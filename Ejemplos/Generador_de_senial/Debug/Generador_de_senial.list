
Generador_de_senial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f34  08004f34  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f3c  08004f3c  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08004f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020224  2**0
                  CONTENTS
 10 .bss          00000328  20000224  20000224  00020224  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000054c  2000054c  00020224  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001158c  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ada  00000000  00000000  000317e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  000342c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e40  00000000  00000000  00035238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000274a8  00000000  00000000  00036078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001495a  00000000  00000000  0005d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3ed6  00000000  00000000  00071e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155d50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004380  00000000  00000000  00155da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000224 	.word	0x20000224
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004c54 	.word	0x08004c54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000228 	.word	0x20000228
 80001ec:	08004c54 	.word	0x08004c54

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <Error_Handler_Init>:
* @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
void Error_Handler_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* Inicializa el led de alarma
   * para garantizar que esté operativo */
  BSP_LED_Init(LED3);
 80005a8:	2002      	movs	r0, #2
 80005aa:	f000 ff37 	bl	800141c <BSP_LED_Init>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <Error_Handler>:
* @brief  This function is executed in case of error occurrence.
* @param  None
* @retval None
*/
void Error_Handler(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
  /* Inicializo por las dudas */
  Error_Handler_Init();
 80005b6:	f7ff fff5 	bl	80005a4 <Error_Handler_Init>

  /* Turn LED2 on */
  BSP_LED_Off(LED1);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 ff98 	bl	80014f0 <BSP_LED_Off>
  BSP_LED_Off(LED2);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 ff95 	bl	80014f0 <BSP_LED_Off>
  BSP_LED_Off(LED3);
 80005c6:	2002      	movs	r0, #2
 80005c8:	f000 ff92 	bl	80014f0 <BSP_LED_Off>
  while (1)
  {
	  BSP_LED_Toggle(LED3);
 80005cc:	2002      	movs	r0, #2
 80005ce:	f000 ffa9 	bl	8001524 <BSP_LED_Toggle>
	  HAL_Delay(250);
 80005d2:	20fa      	movs	r0, #250	; 0xfa
 80005d4:	f001 f89e 	bl	8001714 <HAL_Delay>
	  BSP_LED_Toggle(LED3);
 80005d8:	e7f8      	b.n	80005cc <Error_Handler+0x1a>
	...

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80005e0:	f001 f826 	bl	8001630 <HAL_Init>
  SystemClock_Config();
 80005e4:	f000 f904 	bl	80007f0 <SystemClock_Config>

  /* Inicializacion de periféricos y APIs -------------------------------------*/
  Inicializar_DAC_DMA();					// DAC con acceso DMA utilizando Timer 2
 80005e8:	f000 fb1c 	bl	8000c24 <Inicializar_DAC_DMA>
  if (uartInit() != true) Error_Handler();	// Conexión con terminal
 80005ec:	f000 fe5e 	bl	80012ac <uartInit>
 80005f0:	4603      	mov	r3, r0
 80005f2:	f083 0301 	eor.w	r3, r3, #1
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <main+0x24>
 80005fc:	f7ff ffd9 	bl	80005b2 <Error_Handler>
  debounceFSM_init();						// MEF antirrebote del pulsador de usuario
 8000600:	f000 fc1e 	bl	8000e40 <debounceFSM_init>
  Gen_Init();								// Inicialización del generador de señal
 8000604:	f000 fd4a 	bl	800109c <Gen_Init>

  /* Inicio... ----------------------------------------------------------------*/
  uartSendString((uint8_t *) "\nGENERADOR DE SENIAL V1.0\nTiempo entre muestras: 10,5 Msps\nTension: 0V - 3,3V");
 8000608:	4828      	ldr	r0, [pc, #160]	; (80006ac <main+0xd0>)
 800060a:	f000 fead 	bl	8001368 <uartSendString>
  uartSendString((uint8_t *) "\n\n");
 800060e:	4828      	ldr	r0, [pc, #160]	; (80006b0 <main+0xd4>)
 8000610:	f000 feaa 	bl	8001368 <uartSendString>
  Gen_Espera();	// Estado inicial del generador
 8000614:	f000 fd66 	bl	80010e4 <Gen_Espera>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Reviso botón de usuario:
	  debounceFSM_update();
 8000618:	f000 fc38 	bl	8000e8c <debounceFSM_update>

	  // Reviso parpadeo de leds
	  Gen_Actualiza_Leds();
 800061c:	f000 fe22 	bl	8001264 <Gen_Actualiza_Leds>

	  // Si estoy en estado = Recibiendo o Cargado, espero recibir una señal
	  if (Gen_Estado() == Recibiendo || Gen_Estado() == Cargado) {
 8000620:	f000 fe14 	bl	800124c <Gen_Estado>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d004      	beq.n	8000634 <main+0x58>
 800062a:	f000 fe0f 	bl	800124c <Gen_Estado>
 800062e:	4603      	mov	r3, r0
 8000630:	2b02      	cmp	r3, #2
 8000632:	d101      	bne.n	8000638 <main+0x5c>
          Leer_UART();
 8000634:	f000 f83e 	bl	80006b4 <Leer_UART>
	  }

	  // Si presionamos el botón de usuario cambiamos de estadoMEF
	  if (readKeyPush()) {
 8000638:	f000 fbd4 	bl	8000de4 <readKeyPush>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d01e      	beq.n	8000680 <main+0xa4>
		  switch (Gen_Estado()) {
 8000642:	f000 fe03 	bl	800124c <Gen_Estado>
 8000646:	4603      	mov	r3, r0
 8000648:	2b04      	cmp	r3, #4
 800064a:	d81b      	bhi.n	8000684 <main+0xa8>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <main+0x78>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000669 	.word	0x08000669
 8000658:	08000685 	.word	0x08000685
 800065c:	0800066f 	.word	0x0800066f
 8000660:	08000675 	.word	0x08000675
 8000664:	0800067b 	.word	0x0800067b

		  case Espera:
			  Gen_Recibir();
 8000668:	f000 fd5c 	bl	8001124 <Gen_Recibir>
			  break;
 800066c:	e00b      	b.n	8000686 <main+0xaa>
		  case Recibiendo:
			  // Para salir de este estado, se deben cargar los datos por UART
			  break;

		  case Cargado:
			  Gen_Encender();
 800066e:	f000 fdb5 	bl	80011dc <Gen_Encender>
			  break;
 8000672:	e008      	b.n	8000686 <main+0xaa>

		  case Generando:
			  Gen_Pausar();
 8000674:	f000 fdd0 	bl	8001218 <Gen_Pausar>
			  break;
 8000678:	e005      	b.n	8000686 <main+0xaa>

		  case Pausa:
			  Gen_Encender();
 800067a:	f000 fdaf 	bl	80011dc <Gen_Encender>
			  break;
 800067e:	e002      	b.n	8000686 <main+0xaa>

		  default:
			  // nada...
			  break;
		  }
	  }
 8000680:	bf00      	nop
 8000682:	e000      	b.n	8000686 <main+0xaa>
			  break;
 8000684:	bf00      	nop

	  // Si hay flanco descendente (señal lógica de 1 a 0), evalúo si fue un pulso largo:
	  if (readKeyRelease()) {
 8000686:	f000 fb91 	bl	8000dac <readKeyRelease>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0c3      	beq.n	8000618 <main+0x3c>
		  if ((readPresionadoLargo() == true) &&  Gen_Estado() >= Generando)
 8000690:	f000 fbc4 	bl	8000e1c <readPresionadoLargo>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0be      	beq.n	8000618 <main+0x3c>
 800069a:	f000 fdd7 	bl	800124c <Gen_Estado>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d9b9      	bls.n	8000618 <main+0x3c>
			  Gen_Espera();
 80006a4:	f000 fd1e 	bl	80010e4 <Gen_Espera>
	  debounceFSM_update();
 80006a8:	e7b6      	b.n	8000618 <main+0x3c>
 80006aa:	bf00      	nop
 80006ac:	08004c6c 	.word	0x08004c6c
 80006b0:	08004cbc 	.word	0x08004cbc

080006b4 <Leer_UART>:
/*******************************************************************************
  * @brief  Lee UART porque espera recibir la señal: números separados por coma
  * @param  Estructura de datos del generador
  * @retval None
  */
static void Leer_UART(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	static uint8_t Buffer[LARGO_MAX_PAQUETE];	//Aquí guardo los caracteres antes de mandar el paquete
	static uint8_t Buffer_pos=0;
	uint8_t Leo;

	while (uartReceiveStringSize( &Leo, 1) == true) {
 80006ba:	e031      	b.n	8000720 <Leer_UART+0x6c>
		// Mientras esté recibiendo por UART me quedo en este loop

		if ( Leo>=48 && Leo<=57 ) {
 80006bc:	797b      	ldrb	r3, [r7, #5]
 80006be:	2b2f      	cmp	r3, #47	; 0x2f
 80006c0:	d917      	bls.n	80006f2 <Leer_UART+0x3e>
 80006c2:	797b      	ldrb	r3, [r7, #5]
 80006c4:	2b39      	cmp	r3, #57	; 0x39
 80006c6:	d814      	bhi.n	80006f2 <Leer_UART+0x3e>
			// Es un dígito numérico: Debo almacenarlo en el Buffer
			Buffer[Buffer_pos] = Leo;
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <Leer_UART+0x88>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	7979      	ldrb	r1, [r7, #5]
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <Leer_UART+0x8c>)
 80006d2:	5499      	strb	r1, [r3, r2]
			Buffer_pos++;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <Leer_UART+0x88>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <Leer_UART+0x88>)
 80006de:	701a      	strb	r2, [r3, #0]
			Buffer_pos = (Buffer_pos >= LARGO_MAX_PAQUETE) ? (LARGO_MAX_PAQUETE - 1) : Buffer_pos;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <Leer_UART+0x88>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	bf28      	it	cs
 80006e8:	230f      	movcs	r3, #15
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <Leer_UART+0x88>)
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e016      	b.n	8000720 <Leer_UART+0x6c>
			// Esto último evita corromper la memoria si desde la terminal mandan formatos incorrectos

		} else if (Leo == ',') {
 80006f2:	797b      	ldrb	r3, [r7, #5]
 80006f4:	2b2c      	cmp	r3, #44	; 0x2c
 80006f6:	d113      	bne.n	8000720 <Leer_UART+0x6c>
			// Es el fin de un paquete: Debo cargarlo en la Senial
			// 1) Le damos formato de string (debe terminar en \0)
			for (uint16_t i=Buffer_pos; i<LARGO_MAX_PAQUETE; i++) Buffer[i] = '\0';
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <Leer_UART+0x88>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	80fb      	strh	r3, [r7, #6]
 80006fe:	e006      	b.n	800070e <Leer_UART+0x5a>
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <Leer_UART+0x8c>)
 8000704:	2100      	movs	r1, #0
 8000706:	54d1      	strb	r1, [r2, r3]
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	3301      	adds	r3, #1
 800070c:	80fb      	strh	r3, [r7, #6]
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d9f5      	bls.n	8000700 <Leer_UART+0x4c>
			// 2) Enviamos a cargarlo...
			Cargar_Paquete(Buffer);
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <Leer_UART+0x8c>)
 8000716:	f000 f815 	bl	8000744 <Cargar_Paquete>
			Buffer_pos=0;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <Leer_UART+0x88>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
	while (uartReceiveStringSize( &Leo, 1) == true) {
 8000720:	1d7b      	adds	r3, r7, #5
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fe41 	bl	80013ac <uartReceiveStringSize>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1c5      	bne.n	80006bc <Leer_UART+0x8>

		}   // Si no es número ni ',', no lo considero.
	}
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000242 	.word	0x20000242
 8000740:	20000244 	.word	0x20000244

08000744 <Cargar_Paquete>:
/*******************************************************************************
  * @brief  Carga una muestra en la Senial (que luego se pasará al generador)
  * @param  Estructura de datos del generador
  * @retval None
  */
static void Cargar_Paquete(uint8_t PaqueteRecibido[]) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	// PaqueteRecibido es un string?
	uint32_t Largo = strlen((char *) PaqueteRecibido);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff fd4f 	bl	80001f0 <strlen>
 8000752:	61f8      	str	r0, [r7, #28]
	if ( Largo > LARGO_MAX_PAQUETE) Error_Handler();
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	2b10      	cmp	r3, #16
 8000758:	d901      	bls.n	800075e <Cargar_Paquete+0x1a>
 800075a:	f7ff ff2a 	bl	80005b2 <Error_Handler>

	// Transformamos string recibido en número y lo asignamos a Senial[]
	uint32_t Numero = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
	Numero = atoi((char *) PaqueteRecibido );
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f003 fd46 	bl	80041f4 <atoi>
 8000768:	4603      	mov	r3, r0
 800076a:	61bb      	str	r3, [r7, #24]
	Senial[MuestraNro] = Numero;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <Cargar_Paquete+0x94>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	4a1a      	ldr	r2, [pc, #104]	; (80007dc <Cargar_Paquete+0x98>)
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// Informamos en UART
	char muestra_str[16];
	sprintf(muestra_str, "%u", MuestraNro);
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <Cargar_Paquete+0x94>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4916      	ldr	r1, [pc, #88]	; (80007e0 <Cargar_Paquete+0x9c>)
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fd6a 	bl	8004260 <siprintf>
	uartSendString((uint8_t *) "Muestra #");
 800078c:	4815      	ldr	r0, [pc, #84]	; (80007e4 <Cargar_Paquete+0xa0>)
 800078e:	f000 fdeb 	bl	8001368 <uartSendString>
	uartSendString((uint8_t *) muestra_str);
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fde6 	bl	8001368 <uartSendString>
	uartSendString((uint8_t *) ": ");
 800079c:	4812      	ldr	r0, [pc, #72]	; (80007e8 <Cargar_Paquete+0xa4>)
 800079e:	f000 fde3 	bl	8001368 <uartSendString>
	uartSendString((uint8_t *) PaqueteRecibido);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 fde0 	bl	8001368 <uartSendString>
	uartSendString((uint8_t *) "\n");
 80007a8:	4810      	ldr	r0, [pc, #64]	; (80007ec <Cargar_Paquete+0xa8>)
 80007aa:	f000 fddd 	bl	8001368 <uartSendString>

	// Incrementamos para próxima carga y verificamos si ya completamos
	MuestraNro++;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <Cargar_Paquete+0x94>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <Cargar_Paquete+0x94>)
 80007b8:	801a      	strh	r2, [r3, #0]
	if (MuestraNro >= N_MUESTRAS) {
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <Cargar_Paquete+0x94>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	2b68      	cmp	r3, #104	; 0x68
 80007c0:	d905      	bls.n	80007ce <Cargar_Paquete+0x8a>
		MuestraNro = 0;
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <Cargar_Paquete+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	801a      	strh	r2, [r3, #0]
		Gen_Cargar(Senial);
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <Cargar_Paquete+0x98>)
 80007ca:	f000 fcbf 	bl	800114c <Gen_Cargar>
	}
}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000240 	.word	0x20000240
 80007dc:	20000000 	.word	0x20000000
 80007e0:	08004cc0 	.word	0x08004cc0
 80007e4:	08004cc4 	.word	0x08004cc4
 80007e8:	08004cd0 	.word	0x08004cd0
 80007ec:	08004cd4 	.word	0x08004cd4

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	; 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fd26 	bl	8004250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <SystemClock_Config+0xcc>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a27      	ldr	r2, [pc, #156]	; (80008bc <SystemClock_Config+0xcc>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <SystemClock_Config+0xd0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <SystemClock_Config+0xd0>)
 800083a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000864:	23a8      	movs	r3, #168	; 0xa8
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800086c:	2307      	movs	r3, #7
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4618      	mov	r0, r3
 8000876:	f002 f88b 	bl	8002990 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000880:	f7ff fe97 	bl	80005b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000888:	2302      	movs	r3, #2
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000890:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2105      	movs	r1, #5
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 faec 	bl	8002e80 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ae:	f7ff fe80 	bl	80005b2 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_MspInit+0x4c>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x4c>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a30      	ldr	r2, [pc, #192]	; (80009f4 <HAL_DAC_MspInit+0xe0>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d159      	bne.n	80009ea <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <HAL_DAC_MspInit+0xe4>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a2e      	ldr	r2, [pc, #184]	; (80009f8 <HAL_DAC_MspInit+0xe4>)
 8000940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <HAL_DAC_MspInit+0xe4>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <HAL_DAC_MspInit+0xe4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <HAL_DAC_MspInit+0xe4>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <HAL_DAC_MspInit+0xe4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800096e:	2320      	movs	r3, #32
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000972:	2303      	movs	r3, #3
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	481e      	ldr	r0, [pc, #120]	; (80009fc <HAL_DAC_MspInit+0xe8>)
 8000982:	f001 fe0d 	bl	80025a0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 8000988:	4a1e      	ldr	r2, [pc, #120]	; (8000a04 <HAL_DAC_MspInit+0xf0>)
 800098a:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 800098e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000992:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 8000996:	2240      	movs	r2, #64	; 0x40
 8000998:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 80009a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 80009aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ae:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 80009b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b6:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 80009ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009be:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 80009c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009c6:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 80009d0:	f001 fa06 	bl	8001de0 <HAL_DMA_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80009da:	f7ff fdea 	bl	80005b2 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_DAC_MspInit+0xec>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40007400 	.word	0x40007400
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	2000026c 	.word	0x2000026c
 8000a04:	400260a0 	.word	0x400260a0

08000a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a18:	d10d      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_TIM_Base_MspInit+0x3c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_TIM_Base_MspInit+0x3c>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_TIM_Base_MspInit+0x3c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	; (8000acc <HAL_UART_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12c      	bne.n	8000ac4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_UART_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_UART_MspInit+0x8c>)
 8000ac0:	f001 fd6e 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40004800 	.word	0x40004800
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020c00 	.word	0x40020c00

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b24:	f000 fdd6 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <DMA1_Stream6_IRQHandler+0x10>)
 8000b32:	f001 facb 	bl	80020cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000026c 	.word	0x2000026c

08000b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <_sbrk+0x5c>)
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <_sbrk+0x60>)
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <_sbrk+0x64>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <_sbrk+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d207      	bcs.n	8000b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b70:	f003 fb44 	bl	80041fc <__errno>
 8000b74:	4603      	mov	r3, r0
 8000b76:	220c      	movs	r2, #12
 8000b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7e:	e009      	b.n	8000b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <_sbrk+0x64>)
 8000b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20030000 	.word	0x20030000
 8000ba0:	00000400 	.word	0x00000400
 8000ba4:	20000254 	.word	0x20000254
 8000ba8:	20000550 	.word	0x20000550

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bfa:	f7ff ffd7 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f003 fb03 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fceb 	bl	80005dc <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c08:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8000c14:	08004f44 	.word	0x08004f44
  ldr r2, =_sbss
 8000c18:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8000c1c:	2000054c 	.word	0x2000054c

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <Inicializar_DAC_DMA>:
  * @brief Inicializa DMA, DAC2 y Timer 2.
  *        Inicia el conteo de Timer 2
  * @param None
  * @retval None
  */
void Inicializar_DAC_DMA(void){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	MX_DMA_Init();
 8000c28:	f000 f8a0 	bl	8000d6c <MX_DMA_Init>
	MX_DAC_Init();
 8000c2c:	f000 f828 	bl	8000c80 <MX_DAC_Init>
	MX_TIM2_Init();
 8000c30:	f000 f850 	bl	8000cd4 <MX_TIM2_Init>
    HAL_TIM_Base_Start(&htim2);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <Inicializar_DAC_DMA+0x1c>)
 8000c36:	f002 fb93 	bl	8003360 <HAL_TIM_Base_Start>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200002cc 	.word	0x200002cc

08000c44 <Comenzar_DAC_DMA>:
/**
  * @brief Comienza a enviar Datos a salida por DAC
  * @param Puntero a Datos y cantidad de datos Num_Datos
  * @retval None
  */
void Comenzar_DAC_DMA(uint32_t * Datos, uint32_t Num_Datos) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, Datos, Num_Datos, DAC_ALIGN_12B_R);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	2110      	movs	r1, #16
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <Comenzar_DAC_DMA+0x24>)
 8000c5a:	f000 feb3 	bl	80019c4 <HAL_DAC_Start_DMA>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000258 	.word	0x20000258

08000c6c <Parar_DAC_DMA>:
/**
  * @brief Para el envío de Datos a salida por DAC
  * @param None
  * @retval None
  */
void Parar_DAC_DMA(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 8000c70:	2110      	movs	r1, #16
 8000c72:	4802      	ldr	r0, [pc, #8]	; (8000c7c <Parar_DAC_DMA+0x10>)
 8000c74:	f000 ff74 	bl	8001b60 <HAL_DAC_Stop_DMA>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000258 	.word	0x20000258

08000c80 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization   */
  hdac.Instance = DAC;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_DAC_Init+0x4c>)
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <MX_DAC_Init+0x50>)
 8000c92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_DAC_Init+0x4c>)
 8000c96:	f000 fe72 	bl	800197e <HAL_DAC_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ca0:	f7ff fc87 	bl	80005b2 <Error_Handler>
  }

  /** DAC channel OUT2 config   */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000ca4:	2324      	movs	r3, #36	; 0x24
 8000ca6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	2210      	movs	r2, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <MX_DAC_Init+0x4c>)
 8000cb4:	f000 ffba 	bl	8001c2c <HAL_DAC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000cbe:	f7ff fc78 	bl	80005b2 <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000258 	.word	0x20000258
 8000cd0:	40007400 	.word	0x40007400

08000cd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_TIM2_Init+0x94>)
 8000cf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_TIM2_Init+0x94>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_TIM2_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_TIM2_Init+0x94>)
 8000d06:	2207      	movs	r2, #7
 8000d08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_TIM2_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_TIM2_Init+0x94>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d16:	4814      	ldr	r0, [pc, #80]	; (8000d68 <MX_TIM2_Init+0x94>)
 8000d18:	f002 fad2 	bl	80032c0 <HAL_TIM_Base_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000d22:	f7ff fc46 	bl	80005b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4619      	mov	r1, r3
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_TIM2_Init+0x94>)
 8000d34:	f002 fb7c 	bl	8003430 <HAL_TIM_ConfigClockSource>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f7ff fc38 	bl	80005b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d42:	2320      	movs	r3, #32
 8000d44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_TIM2_Init+0x94>)
 8000d50:	f002 fd70 	bl	8003834 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000d5a:	f7ff fc2a 	bl	80005b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200002cc 	.word	0x200002cc

08000d6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_DMA_Init+0x3c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <MX_DMA_Init+0x3c>)
 8000d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_DMA_Init+0x3c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	2011      	movs	r0, #17
 8000d94:	f000 fdbd 	bl	8001912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d98:	2011      	movs	r0, #17
 8000d9a:	f000 fdd6 	bl	800194a <HAL_NVIC_EnableIRQ>

}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <readKeyRelease>:
/*******************************************************************************
* @brief  Me devuelve si hubo flanco ascendente y se resetea.
* @param  None
* @retval None
*/
bool_t readKeyRelease() {
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
	bool_t salida = FlancoDescendente;
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <readKeyRelease+0x30>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
	if (FlancoDescendente == true) {
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <readKeyRelease+0x30>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d005      	beq.n	8000dcc <readKeyRelease+0x20>
		// Reseteo registro de flancos
		FlancoAscendente = false;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <readKeyRelease+0x34>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
		FlancoDescendente = false;
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <readKeyRelease+0x30>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
	}
	return salida;
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000331 	.word	0x20000331
 8000de0:	20000330 	.word	0x20000330

08000de4 <readKeyPush>:
/*******************************************************************************
* @brief  Me devuelve si hubo flanco descendente y se resetea.
* @param  None
* @retval None
*/
bool_t readKeyPush() {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
	bool_t salida = FlancoAscendente;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <readKeyPush+0x30>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
	if (FlancoAscendente == true) {
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <readKeyPush+0x30>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <readKeyPush+0x20>
		// Reseteo registro de flancos
		FlancoAscendente = false;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <readKeyPush+0x30>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
		FlancoDescendente = false;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <readKeyPush+0x34>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
	}
	return salida;
 8000e04:	79fb      	ldrb	r3, [r7, #7]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000330 	.word	0x20000330
 8000e18:	20000331 	.word	0x20000331

08000e1c <readPresionadoLargo>:

bool_t readPresionadoLargo() {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
	bool_t salida = PresionadoLargo;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <readPresionadoLargo+0x20>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
	PresionadoLargo = false;
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <readPresionadoLargo+0x20>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
	return salida;
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	20000332 	.word	0x20000332

08000e40 <debounceFSM_init>:
/*******************************************************************************
* @brief  Inicializa MEF antirrebote en BUTTON_UP
* @param  None
* @retval None
*/
void debounceFSM_init() {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	// Inicializo estado, flanco y retardo de validación
	estadoActual = BUTTON_UP;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <debounceFSM_init+0x38>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
	FlancoAscendente = false;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <debounceFSM_init+0x3c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
	FlancoDescendente = false;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <debounceFSM_init+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceDelay, ventanaAntirrebote);
 8000e56:	231e      	movs	r3, #30
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480a      	ldr	r0, [pc, #40]	; (8000e84 <debounceFSM_init+0x44>)
 8000e5c:	f000 f8ac 	bl	8000fb8 <delayInit>
	delayInit(&retardoLargo, ventanaPresionadoLargo);
 8000e60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e64:	4619      	mov	r1, r3
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <debounceFSM_init+0x48>)
 8000e68:	f000 f8a6 	bl	8000fb8 <delayInit>
	// Initialize BSP PB for BUTTON_USER
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 fb72 	bl	8001558 <BSP_PB_Init>
	// También inicializo los leds que uso dentro del módulo
	//BSP_LED_Init(LED1);
	//BSP_LED_Init(LED3);
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000314 	.word	0x20000314
 8000e7c:	20000330 	.word	0x20000330
 8000e80:	20000331 	.word	0x20000331
 8000e84:	20000318 	.word	0x20000318
 8000e88:	20000324 	.word	0x20000324

08000e8c <debounceFSM_update>:
*         Lee las entradas, resuelve la lógica de transición
*         y actualizar las salidas.
* @param  None
* @retval None
*/
void debounceFSM_update() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
	bool LecturaBoton = BSP_PB_GetState(BUTTON_USER);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 fbb6 	bl	8001604 <BSP_PB_GetState>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf14      	ite	ne
 8000e9e:	2301      	movne	r3, #1
 8000ea0:	2300      	moveq	r3, #0
 8000ea2:	71fb      	strb	r3, [r7, #7]

	switch (estadoActual) { // -------------------------------------------------
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <debounceFSM_update+0xc8>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d845      	bhi.n	8000f38 <debounceFSM_update+0xac>
 8000eac:	a201      	add	r2, pc, #4	; (adr r2, 8000eb4 <debounceFSM_update+0x28>)
 8000eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb2:	bf00      	nop
 8000eb4:	08000ec5 	.word	0x08000ec5
 8000eb8:	08000ed3 	.word	0x08000ed3
 8000ebc:	08000eff 	.word	0x08000eff
 8000ec0:	08000f13 	.word	0x08000f13

		case BUTTON_UP:
			if (LecturaBoton == true) {
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d039      	beq.n	8000f3e <debounceFSM_update+0xb2>
				// Debo cambiar de estado...
				estadoActual = BUTTON_FALLING;
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <debounceFSM_update+0xc8>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ed0:	e035      	b.n	8000f3e <debounceFSM_update+0xb2>

		case BUTTON_FALLING:
			if (delayRead(&debounceDelay) == true) {
 8000ed2:	4821      	ldr	r0, [pc, #132]	; (8000f58 <debounceFSM_update+0xcc>)
 8000ed4:	f000 f899 	bl	800100a <delayRead>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d031      	beq.n	8000f42 <debounceFSM_update+0xb6>
				// Terminó el retardo y por lo tanto
				// debo evaluar cambio de estado...
				if (LecturaBoton == false) {
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f083 0301 	eor.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <debounceFSM_update+0x66>
					// ...en definitiva fue un falso descenso
					estadoActual = BUTTON_UP;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <debounceFSM_update+0xc8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
					// Hay un cambio de estado!!!
					estadoActual = BUTTON_DOWN;
					buttonPressed();	// Acción de flanco ascendente de señal.
				}
			}
		break;
 8000ef0:	e027      	b.n	8000f42 <debounceFSM_update+0xb6>
					estadoActual = BUTTON_DOWN;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <debounceFSM_update+0xc8>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	701a      	strb	r2, [r3, #0]
					buttonPressed();	// Acción de flanco ascendente de señal.
 8000ef8:	f000 f830 	bl	8000f5c <buttonPressed>
		break;
 8000efc:	e021      	b.n	8000f42 <debounceFSM_update+0xb6>

		case BUTTON_DOWN:
			if (LecturaBoton == false) {
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f083 0301 	eor.w	r3, r3, #1
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d01d      	beq.n	8000f46 <debounceFSM_update+0xba>
				// Debo cambiar de estado...
				estadoActual = BUTTON_RISING;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <debounceFSM_update+0xc8>)
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8000f10:	e019      	b.n	8000f46 <debounceFSM_update+0xba>

		case BUTTON_RISING:
			if (delayRead(&debounceDelay) == true) {
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <debounceFSM_update+0xcc>)
 8000f14:	f000 f879 	bl	800100a <delayRead>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d015      	beq.n	8000f4a <debounceFSM_update+0xbe>
				// Terminó el retardo y por lo tanto
				// debo evaluar cambio de estado...
				if (LecturaBoton == true) {
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <debounceFSM_update+0xa0>
					// ...en definitiva fue un falso ascenso
					estadoActual = BUTTON_DOWN;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <debounceFSM_update+0xc8>)
 8000f26:	2202      	movs	r2, #2
 8000f28:	701a      	strb	r2, [r3, #0]
					// Hay un cambio de estado!!!
					estadoActual = BUTTON_UP;
					buttonReleased();	// Acción de flanco descendente de señal (de 1 a 0).
				}
			}
		break;
 8000f2a:	e00e      	b.n	8000f4a <debounceFSM_update+0xbe>
					estadoActual = BUTTON_UP;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <debounceFSM_update+0xc8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
					buttonReleased();	// Acción de flanco descendente de señal (de 1 a 0).
 8000f32:	f000 f827 	bl	8000f84 <buttonReleased>
		break;
 8000f36:	e008      	b.n	8000f4a <debounceFSM_update+0xbe>

		default:
			Error_Handler();
 8000f38:	f7ff fb3b 	bl	80005b2 <Error_Handler>
		break;
 8000f3c:	e006      	b.n	8000f4c <debounceFSM_update+0xc0>
		break;
 8000f3e:	bf00      	nop
 8000f40:	e004      	b.n	8000f4c <debounceFSM_update+0xc0>
		break;
 8000f42:	bf00      	nop
 8000f44:	e002      	b.n	8000f4c <debounceFSM_update+0xc0>
		break;
 8000f46:	bf00      	nop
 8000f48:	e000      	b.n	8000f4c <debounceFSM_update+0xc0>
		break;
 8000f4a:	bf00      	nop
	} // -------------------------- Fin del switch ----------------------------
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000314 	.word	0x20000314
 8000f58:	20000318 	.word	0x20000318

08000f5c <buttonPressed>:
/*******************************************************************************
* @brief  Acción de flanco ascendente: cambia LED1.
* @param  None
* @retval None
*/
void buttonPressed() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	//BSP_LED_Toggle(LED1);
	FlancoAscendente = true;	// Dejo registrado que hubo flanco ascendente en la señal (de 0 a 1)
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <buttonPressed+0x1c>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
	PresionadoLargo = false;
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <buttonPressed+0x20>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
	delayRead(&retardoLargo);	// En realidad, no leo: lo hago comenzar a contar
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <buttonPressed+0x24>)
 8000f6e:	f000 f84c 	bl	800100a <delayRead>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000330 	.word	0x20000330
 8000f7c:	20000332 	.word	0x20000332
 8000f80:	20000324 	.word	0x20000324

08000f84 <buttonReleased>:
/*******************************************************************************
* @brief  Acción de flanco descendente: cambia LED3.
* @param  None
* @retval None
*/
void buttonReleased()  {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	// BSP_LED_Toggle(LED3);
	FlancoDescendente = true;	// Dejo registrado que hubo flanco descendente en la señal (de 1 a 0)
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <buttonReleased+0x28>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
	if (delayRead(&retardoLargo) == true) PresionadoLargo = true;
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <buttonReleased+0x2c>)
 8000f90:	f000 f83b 	bl	800100a <delayRead>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <buttonReleased+0x1c>
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <buttonReleased+0x30>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
	delayReset(&retardoLargo);
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <buttonReleased+0x2c>)
 8000fa2:	f000 f825 	bl	8000ff0 <delayReset>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000331 	.word	0x20000331
 8000fb0:	20000324 	.word	0x20000324
 8000fb4:	20000332 	.word	0x20000332

08000fb8 <delayInit>:
/*******************************************************************************
  * @brief  Carga el valor de duración del retardo en la estructura
  *			Inicializa el flag running en `false´.
  */
void delayInit( delay_t * delay, tick_t duration )
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	if (duration <= MAX_DELAY && delay != NULL) {
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <delayInit+0x34>)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d809      	bhi.n	8000fde <delayInit+0x26>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <delayInit+0x26>
		delay->duration = duration;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
		delay->running = false;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	721a      	strb	r2, [r3, #8]
 8000fdc:	e002      	b.n	8000fe4 <delayInit+0x2c>
	} else {
		// Parámetros erróneos
	    Error_Handler();
 8000fde:	f7ff fae8 	bl	80005b2 <Error_Handler>
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	000927c0 	.word	0x000927c0

08000ff0 <delayReset>:

/*******************************************************************************
  * @brief  Deja de contar el retardo.
  * 		Es necesario un delayRead para volver a empezar
  */
void delayReset( delay_t * delay) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	delay->running = false;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	721a      	strb	r2, [r3, #8]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <delayRead>:

/*******************************************************************************
  * @brief	Verifica el estado del flag running.
  */
bool_t delayRead( delay_t * delay )
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	bool_t ended = false;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
	if (delay == NULL) {
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <delayRead+0x16>
		// Parámetro erróneo
		Error_Handler();
 800101c:	f7ff fac9 	bl	80005b2 <Error_Handler>
	}
	if (!delay->running) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7a1b      	ldrb	r3, [r3, #8]
 8001024:	f083 0301 	eor.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <delayRead+0x36>
		// Configuro inicio de contador de retardo
		delay->startTime = HAL_GetTick();
 800102e:	f000 fb65 	bl	80016fc <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	721a      	strb	r2, [r3, #8]
 800103e:	e00e      	b.n	800105e <delayRead+0x54>
	} else {
		// Analizo si debo continuar con el retardo o no
		if ( (HAL_GetTick()-delay->startTime) > (delay->duration) ) {
 8001040:	f000 fb5c 	bl	80016fc <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1ad2      	subs	r2, r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	d904      	bls.n	800105e <delayRead+0x54>
			// Terminó el retardo!!!
			ended = true;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
			delay->running = false;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	721a      	strb	r2, [r3, #8]
		}
	}
	return ended;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <delayWrite>:

/*******************************************************************************
  * @brief  Cambia el valor de duración del retardo en la estructura.
  */
void delayWrite( delay_t * delay, tick_t duration )
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	if (duration <= MAX_DELAY && delay != NULL) {
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <delayWrite+0x30>)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4293      	cmp	r3, r2
 8001078:	d806      	bhi.n	8001088 <delayWrite+0x20>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <delayWrite+0x20>
			delay->duration = duration;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	e002      	b.n	800108e <delayWrite+0x26>
	} else {
		// Parámetros erróneos
	    Error_Handler();
 8001088:	f7ff fa93 	bl	80005b2 <Error_Handler>
	}
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	000927c0 	.word	0x000927c0

0800109c <Gen_Init>:
/*******************************************************************************
  * @brief  Inicializa Generador
  * @param  Estructura de datos del generador
  * @retval None
  */
void Gen_Init(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	GeneradorDAC2.cargado = false;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <Gen_Init+0x3c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	709a      	strb	r2, [r3, #2]
	GeneradorDAC2.encendido = false;
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <Gen_Init+0x3c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	705a      	strb	r2, [r3, #1]
	GeneradorDAC2.estado = Espera;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <Gen_Init+0x3c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	BSP_LED_Init(LED_BLUE);			// Indicador en estados Cargado en adelante
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 f9b2 	bl	800141c <BSP_LED_Init>
	BSP_LED_Init(LED_GREEN);		// Indicador en estados Espera y Recibiendo
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 f9af 	bl	800141c <BSP_LED_Init>
	delayInit( &parpadeoLedAzul, TIEMPO_PARPADEO_CARGADO);
 80010be:	f240 21ee 	movw	r1, #750	; 0x2ee
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <Gen_Init+0x40>)
 80010c4:	f7ff ff78 	bl	8000fb8 <delayInit>
	delayInit( &parpadeoLedVerde, TIEMPO_PARPADEO_ESPERA);
 80010c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <Gen_Init+0x44>)
 80010ce:	f7ff ff73 	bl	8000fb8 <delayInit>
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000334 	.word	0x20000334
 80010dc:	200004dc 	.word	0x200004dc
 80010e0:	200004e8 	.word	0x200004e8

080010e4 <Gen_Espera>:
/*******************************************************************************
  * @brief  Establece al generador en espera
  * @param  Estructura de datos del generador
  * @retval None
  */
void Gen_Espera(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	// Apago led azul     = señal cargada
	// Parpadeo led verde = en espera
	BSP_LED_Off(LED_BLUE);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fa01 	bl	80014f0 <BSP_LED_Off>
	delayWrite( &parpadeoLedVerde, TIEMPO_PARPADEO_ESPERA );
 80010ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010f2:	4809      	ldr	r0, [pc, #36]	; (8001118 <Gen_Espera+0x34>)
 80010f4:	f7ff ffb8 	bl	8001068 <delayWrite>

	// Actualizo estructura
	GeneradorDAC2.cargado = false;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <Gen_Espera+0x38>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	709a      	strb	r2, [r3, #2]
	GeneradorDAC2.estado = Espera;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <Gen_Espera+0x38>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]

	// Finalmente corto señal del generador
	Parar_DAC_DMA();
 8001104:	f7ff fdb2 	bl	8000c6c <Parar_DAC_DMA>

	// Y envío informe a UART
    uartClearBuffer();
 8001108:	f000 f976 	bl	80013f8 <uartClearBuffer>
    uartSendString((uint8_t *) "Generador vacio y en espera...\n");
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <Gen_Espera+0x3c>)
 800110e:	f000 f92b 	bl	8001368 <uartSendString>
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200004e8 	.word	0x200004e8
 800111c:	20000334 	.word	0x20000334
 8001120:	08004cd8 	.word	0x08004cd8

08001124 <Gen_Recibir>:
/*******************************************************************************
  * @brief  Pasa a estado de receción de señal
  * @param  Estructura de datos del generador
  * @retval None
  */
void Gen_Recibir(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	GeneradorDAC2.estado = Recibiendo;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <Gen_Recibir+0x20>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
	BSP_LED_On(LED_GREEN);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f9c4 	bl	80014bc <BSP_LED_On>
    uartSendString((uint8_t *) "Listo para recibir...\n");
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <Gen_Recibir+0x24>)
 8001136:	f000 f917 	bl	8001368 <uartSendString>
    uartClearBuffer();
 800113a:	f000 f95d 	bl	80013f8 <uartClearBuffer>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000334 	.word	0x20000334
 8001148:	08004cf8 	.word	0x08004cf8

0800114c <Gen_Cargar>:
/*******************************************************************************
  * @brief  Carga señal en el generador
  * @param  Estructura de datos del generador
  * @retval None
  */
void Gen_Cargar(uint32_t Senial[]) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	// Chequeo que la Senial tenga todos los datos que necesito
	for (uint16_t i=0; i<N_MUESTRAS; i++) {
 8001154:	2300      	movs	r3, #0
 8001156:	81fb      	strh	r3, [r7, #14]
 8001158:	e00c      	b.n	8001174 <Gen_Cargar+0x28>
		// Verifico que Senial[] sea acorde a 12 bits
		if (Senial[i] > 0x0FFF) Error_Handler();
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001168:	d301      	bcc.n	800116e <Gen_Cargar+0x22>
 800116a:	f7ff fa22 	bl	80005b2 <Error_Handler>
	for (uint16_t i=0; i<N_MUESTRAS; i++) {
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	3301      	adds	r3, #1
 8001172:	81fb      	strh	r3, [r7, #14]
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	2b68      	cmp	r3, #104	; 0x68
 8001178:	d9ef      	bls.n	800115a <Gen_Cargar+0xe>
	}

	// Copio valores
	for (uint16_t i=0; i<N_MUESTRAS; i++) GeneradorDAC2.senial[i] = Senial[i];
 800117a:	2300      	movs	r3, #0
 800117c:	81bb      	strh	r3, [r7, #12]
 800117e:	e00c      	b.n	800119a <Gen_Cargar+0x4e>
 8001180:	89bb      	ldrh	r3, [r7, #12]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	441a      	add	r2, r3
 8001188:	89bb      	ldrh	r3, [r7, #12]
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	4910      	ldr	r1, [pc, #64]	; (80011d0 <Gen_Cargar+0x84>)
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	89bb      	ldrh	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	81bb      	strh	r3, [r7, #12]
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	2b68      	cmp	r3, #104	; 0x68
 800119e:	d9ef      	bls.n	8001180 <Gen_Cargar+0x34>

	// Actualizo el estado
	GeneradorDAC2.cargado = true;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <Gen_Cargar+0x84>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	709a      	strb	r2, [r3, #2]
	GeneradorDAC2.estado = Cargado;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <Gen_Cargar+0x84>)
 80011a8:	2202      	movs	r2, #2
 80011aa:	701a      	strb	r2, [r3, #0]

	// Informo con leds y por UART
	BSP_LED_Off(LED_GREEN);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f99f 	bl	80014f0 <BSP_LED_Off>
	delayWrite( &parpadeoLedAzul, TIEMPO_PARPADEO_CARGADO );
 80011b2:	f240 21ee 	movw	r1, #750	; 0x2ee
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <Gen_Cargar+0x88>)
 80011b8:	f7ff ff56 	bl	8001068 <delayWrite>
    uartClearBuffer();
 80011bc:	f000 f91c 	bl	80013f8 <uartClearBuffer>
    uartSendString((uint8_t *) "Senial cargada en generador.\n");
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <Gen_Cargar+0x8c>)
 80011c2:	f000 f8d1 	bl	8001368 <uartSendString>
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000334 	.word	0x20000334
 80011d4:	200004dc 	.word	0x200004dc
 80011d8:	08004d10 	.word	0x08004d10

080011dc <Gen_Encender>:
/*******************************************************************************
  * @brief  Enciende el generador
  * @param  Estructura de datos del generador
  * @retval None
  */
void Gen_Encender(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	// Acelero el parpadeo del led azul
	delayWrite( &parpadeoLedAzul, TIEMPO_PARPADEO_ENCENDIDO );
 80011e0:	214b      	movs	r1, #75	; 0x4b
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <Gen_Encender+0x2c>)
 80011e4:	f7ff ff40 	bl	8001068 <delayWrite>

	// Actualizo estructura
	GeneradorDAC2.estado = Generando;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <Gen_Encender+0x30>)
 80011ea:	2203      	movs	r2, #3
 80011ec:	701a      	strb	r2, [r3, #0]
	GeneradorDAC2.encendido = true;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <Gen_Encender+0x30>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	705a      	strb	r2, [r3, #1]

	// Enciendo generador
	Comenzar_DAC_DMA(GeneradorDAC2.senial, N_MUESTRAS);
 80011f4:	2169      	movs	r1, #105	; 0x69
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <Gen_Encender+0x34>)
 80011f8:	f7ff fd24 	bl	8000c44 <Comenzar_DAC_DMA>

	// Reinicializo índice de carga
	//MuestraNro = 0;

	// Muestro mensaje de esto.
	uartSendString((uint8_t *) "Generador 2 encendido.\n\r");
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <Gen_Encender+0x38>)
 80011fe:	f000 f8b3 	bl	8001368 <uartSendString>

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200004dc 	.word	0x200004dc
 800120c:	20000334 	.word	0x20000334
 8001210:	20000338 	.word	0x20000338
 8001214:	08004d30 	.word	0x08004d30

08001218 <Gen_Pausar>:
/*******************************************************************************
  * @brief  Pone pausa al generador (sale de pausa con boton de usuario)
  * @param  Estructura de datos del generador
  * @retval None
  */
void Gen_Pausar(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

	GeneradorDAC2.estado = Pausa;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <Gen_Pausar+0x28>)
 800121e:	2204      	movs	r2, #4
 8001220:	701a      	strb	r2, [r3, #0]
	GeneradorDAC2.encendido = false;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <Gen_Pausar+0x28>)
 8001224:	2200      	movs	r2, #0
 8001226:	705a      	strb	r2, [r3, #1]

	Parar_DAC_DMA();
 8001228:	f7ff fd20 	bl	8000c6c <Parar_DAC_DMA>

	uartSendString((uint8_t *) "Generador 2 en pausa.\n\r");
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <Gen_Pausar+0x2c>)
 800122e:	f000 f89b 	bl	8001368 <uartSendString>
	delayWrite( &parpadeoLedAzul, TIEMPO_PARPADEO_CARGADO );
 8001232:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <Gen_Pausar+0x30>)
 8001238:	f7ff ff16 	bl	8001068 <delayWrite>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000334 	.word	0x20000334
 8001244:	08004d4c 	.word	0x08004d4c
 8001248:	200004dc 	.word	0x200004dc

0800124c <Gen_Estado>:
/*******************************************************************************
  * @brief  Devuelve el estado del generador
  * @param  Estructura de datos del generador
  * @retval estado del generador
  */
estadosMEF Gen_Estado(void) {
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	return GeneradorDAC2.estado;
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <Gen_Estado+0x14>)
 8001252:	781b      	ldrb	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000334 	.word	0x20000334

08001264 <Gen_Actualiza_Leds>:
/*******************************************************************************
  * @brief  Actualiza leds según estado del generador
  * @param  Estructura de datos del generador
  * @retval None
  */
void Gen_Actualiza_Leds(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	// Analizo parpadeo LED VERDE:
	if ( (Gen_Estado() == Espera) && delayRead( &parpadeoLedVerde )) BSP_LED_Toggle(LED_GREEN);
 8001268:	f7ff fff0 	bl	800124c <Gen_Estado>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d108      	bne.n	8001284 <Gen_Actualiza_Leds+0x20>
 8001272:	480c      	ldr	r0, [pc, #48]	; (80012a4 <Gen_Actualiza_Leds+0x40>)
 8001274:	f7ff fec9 	bl	800100a <delayRead>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <Gen_Actualiza_Leds+0x20>
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f950 	bl	8001524 <BSP_LED_Toggle>

	// Analizo parpadeo LED AZUL:
	if ( (Gen_Estado() >= Cargado) && delayRead( &parpadeoLedAzul )) BSP_LED_Toggle(LED_BLUE);
 8001284:	f7ff ffe2 	bl	800124c <Gen_Estado>
 8001288:	4603      	mov	r3, r0
 800128a:	2b01      	cmp	r3, #1
 800128c:	d908      	bls.n	80012a0 <Gen_Actualiza_Leds+0x3c>
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <Gen_Actualiza_Leds+0x44>)
 8001290:	f7ff febb 	bl	800100a <delayRead>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <Gen_Actualiza_Leds+0x3c>
 800129a:	2001      	movs	r0, #1
 800129c:	f000 f942 	bl	8001524 <BSP_LED_Toggle>
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200004e8 	.word	0x200004e8
 80012a8:	200004dc 	.word	0x200004dc

080012ac <uartInit>:
/*******************************************************************************
  * @brief  Inicializa la conexión por UART
  * @param  None
  * @retval None
  */
bool_t uartInit() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
	                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
      - Stop Bit    = One Stop bit
      - Parity      = ODD parity
      - BaudRate    = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance          = USARTx;
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <uartInit+0x98>)
 80012b4:	4a24      	ldr	r2, [pc, #144]	; (8001348 <uartInit+0x9c>)
 80012b6:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate     = 9600;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <uartInit+0x98>)
 80012ba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012be:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <uartInit+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <uartInit+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <uartInit+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <uartInit+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <uartInit+0x98>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <uartInit+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
  /*##########################################################################*/
  if (HAL_UART_Init(&UartHandle) == HAL_OK) {
 80012e4:	4817      	ldr	r0, [pc, #92]	; (8001344 <uartInit+0x98>)
 80012e6:	f002 fb21 	bl	800392c <HAL_UART_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d11c      	bne.n	800132a <uartInit+0x7e>
	  char Cadena[32];
	  uartSendString((uint8_t *) "CONEXION UART ESTABLECIDA:\n");
 80012f0:	4816      	ldr	r0, [pc, #88]	; (800134c <uartInit+0xa0>)
 80012f2:	f000 f839 	bl	8001368 <uartSendString>

	  uartSendString((uint8_t *) "Baudios = ");
 80012f6:	4816      	ldr	r0, [pc, #88]	; (8001350 <uartInit+0xa4>)
 80012f8:	f000 f836 	bl	8001368 <uartSendString>
	  sprintf(Cadena, "%ld", UartHandle.Init.BaudRate);
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <uartInit+0x98>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	463b      	mov	r3, r7
 8001302:	4914      	ldr	r1, [pc, #80]	; (8001354 <uartInit+0xa8>)
 8001304:	4618      	mov	r0, r3
 8001306:	f002 ffab 	bl	8004260 <siprintf>
	  //itoa((int) UartHandle.Init.BaudRate, Cadena, 10);
	  uartSendString((uint8_t *) Cadena);
 800130a:	463b      	mov	r3, r7
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f82b 	bl	8001368 <uartSendString>
	  uartSendString((uint8_t *) "\n\r");
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <uartInit+0xac>)
 8001314:	f000 f828 	bl	8001368 <uartSendString>

	  uartSendString((uint8_t *) "Largo de palabra = 8\n\r");
 8001318:	4810      	ldr	r0, [pc, #64]	; (800135c <uartInit+0xb0>)
 800131a:	f000 f825 	bl	8001368 <uartSendString>
	  uartSendString((uint8_t *) "Bits de parada = 1\n\r");
 800131e:	4810      	ldr	r0, [pc, #64]	; (8001360 <uartInit+0xb4>)
 8001320:	f000 f822 	bl	8001368 <uartSendString>
	  uartSendString((uint8_t *) "Paridad = Ninguna\n\r");
 8001324:	480f      	ldr	r0, [pc, #60]	; (8001364 <uartInit+0xb8>)
 8001326:	f000 f81f 	bl	8001368 <uartSendString>

	  // Esto se podría hacer mejor, pero implicaría traducir cada constante.

  }

  return (HAL_UART_Init(&UartHandle) == HAL_OK);
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <uartInit+0x98>)
 800132c:	f002 fafe 	bl	800392c <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
}
 800133c:	4618      	mov	r0, r3
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200004f4 	.word	0x200004f4
 8001348:	40004800 	.word	0x40004800
 800134c:	08004d64 	.word	0x08004d64
 8001350:	08004d80 	.word	0x08004d80
 8001354:	08004d8c 	.word	0x08004d8c
 8001358:	08004d90 	.word	0x08004d90
 800135c:	08004d94 	.word	0x08004d94
 8001360:	08004dac 	.word	0x08004dac
 8001364:	08004dc4 	.word	0x08004dc4

08001368 <uartSendString>:
/*******************************************************************************
  * @brief  Transmite por UART una cadena completa
  * @param  Puntero a cadena a enviar
  * @retval None
  */
void uartSendString(uint8_t * pstring) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	// ¿El puntero es válido?
	if (pstring == NULL) Error_Handler();
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <uartSendString+0x12>
 8001376:	f7ff f91c 	bl	80005b2 <Error_Handler>

	// Cuento cantidad de caracteres de la cadena a enviar:
	uint16_t size = (uint16_t) strlen((char *) pstring);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7fe ff38 	bl	80001f0 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	81fb      	strh	r3, [r7, #14]
		 * Se podria hacer buscando "\0" con un for.
		 * Atención con el casteo (char *).
		 */

	// Verifico que el largo no supere el máximo configurado:
	size = (size<maxSize) ? size : maxSize;
 8001384:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	4293      	cmp	r3, r2
 800138c:	bf28      	it	cs
 800138e:	4613      	movcs	r3, r2
 8001390:	81fb      	strh	r3, [r7, #14]

	// Envío!!!
	HAL_UART_Transmit(&UartHandle, (uint8_t *) pstring, size, uartTimeOut);
 8001392:	234f      	movs	r3, #79	; 0x4f
 8001394:	89fa      	ldrh	r2, [r7, #14]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <uartSendString+0x40>)
 800139a:	f002 fb14 	bl	80039c6 <HAL_UART_Transmit>
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200004f4 	.word	0x200004f4

080013ac <uartReceiveStringSize>:
  * @brief  Recibe por UART una cantidad definida de caracteres
  * @param  Puntero a buffer donde gurdar datos
  * @param  Cantidad de datos a recibir
  * @retval None
  */
bool_t uartReceiveStringSize(uint8_t * pstring, uint16_t size) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
	// ¿El puntero es válido?
	if (pstring == NULL) Error_Handler();
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <uartReceiveStringSize+0x16>
 80013be:	f7ff f8f8 	bl	80005b2 <Error_Handler>

	// Verifico que no se supere el máximo:
	size = (size>maxSize) ? maxSize : size;
 80013c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	4293      	cmp	r3, r2
 80013ca:	bf28      	it	cs
 80013cc:	4613      	movcs	r3, r2
 80013ce:	807b      	strh	r3, [r7, #2]

	// Recibo...
	HAL_StatusTypeDef Resultado;
	Resultado = HAL_UART_Receive(&UartHandle, (uint8_t *)pstring, (uint16_t) size, uartTimeOut);
 80013d0:	234f      	movs	r3, #79	; 0x4f
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <uartReceiveStringSize+0x48>)
 80013d8:	f002 fb87 	bl	8003aea <HAL_UART_Receive>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
	if (Resultado == HAL_OK) return true;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <uartReceiveStringSize+0x3e>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <uartReceiveStringSize+0x40>
	return false;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200004f4 	.word	0x200004f4

080013f8 <uartClearBuffer>:

void uartClearBuffer() {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	uint8_t Basura[5];
    while (uartReceiveStringSize(Basura, 1)) {}; // Vacío el buffer de lectura, si tiene algo.
 80013fe:	bf00      	nop
 8001400:	463b      	mov	r3, r7
 8001402:	2101      	movs	r1, #1
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ffd1 	bl	80013ac <uartReceiveStringSize>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f7      	bne.n	8001400 <uartClearBuffer+0x8>

}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10e      	bne.n	800144a <BSP_LED_Init+0x2e>
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <BSP_LED_Init+0x94>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <BSP_LED_Init+0x94>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <BSP_LED_Init+0x94>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	e00d      	b.n	8001466 <BSP_LED_Init+0x4a>
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <BSP_LED_Init+0x94>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <BSP_LED_Init+0x94>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <BSP_LED_Init+0x94>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <BSP_LED_Init+0x98>)
 800146a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001478:	2302      	movs	r3, #2
 800147a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <BSP_LED_Init+0x9c>)
 8001480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001484:	f107 0214 	add.w	r2, r7, #20
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f001 f888 	bl	80025a0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <BSP_LED_Init+0x9c>)
 8001494:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <BSP_LED_Init+0x98>)
 800149c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014a0:	2200      	movs	r2, #0
 80014a2:	4619      	mov	r1, r3
 80014a4:	f001 fa40 	bl	8002928 <HAL_GPIO_WritePin>
}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	08004df0 	.word	0x08004df0
 80014b8:	200001a8 	.word	0x200001a8

080014bc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <BSP_LED_On+0x2c>)
 80014ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <BSP_LED_On+0x30>)
 80014d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d6:	2201      	movs	r2, #1
 80014d8:	4619      	mov	r1, r3
 80014da:	f001 fa25 	bl	8002928 <HAL_GPIO_WritePin>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200001a8 	.word	0x200001a8
 80014ec:	08004df0 	.word	0x08004df0

080014f0 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4a07      	ldr	r2, [pc, #28]	; (800151c <BSP_LED_Off+0x2c>)
 80014fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <BSP_LED_Off+0x30>)
 8001506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	f001 fa0b 	bl	8002928 <HAL_GPIO_WritePin>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200001a8 	.word	0x200001a8
 8001520:	08004df0 	.word	0x08004df0

08001524 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4a07      	ldr	r2, [pc, #28]	; (8001550 <BSP_LED_Toggle+0x2c>)
 8001532:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4906      	ldr	r1, [pc, #24]	; (8001554 <BSP_LED_Toggle+0x30>)
 800153a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800153e:	4619      	mov	r1, r3
 8001540:	4610      	mov	r0, r2
 8001542:	f001 fa0a 	bl	800295a <HAL_GPIO_TogglePin>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200001a8 	.word	0x200001a8
 8001554:	08004df0 	.word	0x08004df0

08001558 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	71fb      	strb	r3, [r7, #7]
 8001564:	4613      	mov	r3, r2
 8001566:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <BSP_PB_Init+0xa4>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a22      	ldr	r2, [pc, #136]	; (80015fc <BSP_PB_Init+0xa4>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b20      	ldr	r3, [pc, #128]	; (80015fc <BSP_PB_Init+0xa4>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d112      	bne.n	80015b0 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800158a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001594:	2302      	movs	r3, #2
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4a18      	ldr	r2, [pc, #96]	; (8001600 <BSP_PB_Init+0xa8>)
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	f107 020c 	add.w	r2, r7, #12
 80015a8:	4611      	mov	r1, r2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fff8 	bl	80025a0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80015b0:	79bb      	ldrb	r3, [r7, #6]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d11d      	bne.n	80015f2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80015b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80015c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015c4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <BSP_PB_Init+0xa8>)
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	f107 020c 	add.w	r2, r7, #12
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 ffe3 	bl	80025a0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80015da:	2328      	movs	r3, #40	; 0x28
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	2200      	movs	r2, #0
 80015e0:	210f      	movs	r1, #15
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f995 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80015e8:	2328      	movs	r3, #40	; 0x28
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f9ac 	bl	800194a <HAL_NVIC_EnableIRQ>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	200001b4 	.word	0x200001b4

08001604 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <BSP_PB_GetState+0x28>)
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f001 f96b 	bl	80028f8 <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200001b4 	.word	0x200001b4

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_Init+0x40>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_Init+0x40>)
 8001646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_Init+0x40>)
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f94f 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001664:	f7ff f92e 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f967 	bl	8001966 <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b0:	f000 f92f 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200001a4 	.word	0x200001a4
 80016cc:	200001bc 	.word	0x200001bc
 80016d0:	200001b8 	.word	0x200001b8

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200001bc 	.word	0x200001bc
 80016f8:	20000538 	.word	0x20000538

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000538 	.word	0x20000538

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff ffee 	bl	80016fc <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffde 	bl	80016fc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001bc 	.word	0x200001bc

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018dc:	f7ff ff8e 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff29 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff3e 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff8e 	bl	8001850 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5d 	bl	80017fc <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff31 	bl	80017c0 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa2 	bl	80018b8 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e014      	b.n	80019ba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d105      	bne.n	80019a6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe ffb7 	bl	8000914 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2202      	movs	r2, #2
 80019aa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	795b      	ldrb	r3, [r3, #5]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_DAC_Start_DMA+0x22>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e0ab      	b.n	8001b3e <HAL_DAC_Start_DMA+0x17a>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2202      	movs	r2, #2
 80019f0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d12f      	bne.n	8001a58 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_DAC_Start_DMA+0x184>)
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a51      	ldr	r2, [pc, #324]	; (8001b4c <HAL_DAC_Start_DMA+0x188>)
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a50      	ldr	r2, [pc, #320]	; (8001b50 <HAL_DAC_Start_DMA+0x18c>)
 8001a0e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a1e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d013      	beq.n	8001a4e <HAL_DAC_Start_DMA+0x8a>
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d845      	bhi.n	8001ab8 <HAL_DAC_Start_DMA+0xf4>
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_DAC_Start_DMA+0x76>
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d005      	beq.n	8001a44 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001a38:	e03e      	b.n	8001ab8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3308      	adds	r3, #8
 8001a40:	613b      	str	r3, [r7, #16]
        break;
 8001a42:	e03c      	b.n	8001abe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	330c      	adds	r3, #12
 8001a4a:	613b      	str	r3, [r7, #16]
        break;
 8001a4c:	e037      	b.n	8001abe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3310      	adds	r3, #16
 8001a54:	613b      	str	r3, [r7, #16]
        break;
 8001a56:	e032      	b.n	8001abe <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4a3d      	ldr	r2, [pc, #244]	; (8001b54 <HAL_DAC_Start_DMA+0x190>)
 8001a5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a3c      	ldr	r2, [pc, #240]	; (8001b58 <HAL_DAC_Start_DMA+0x194>)
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a3b      	ldr	r2, [pc, #236]	; (8001b5c <HAL_DAC_Start_DMA+0x198>)
 8001a6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a7e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d013      	beq.n	8001aae <HAL_DAC_Start_DMA+0xea>
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d817      	bhi.n	8001abc <HAL_DAC_Start_DMA+0xf8>
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_DAC_Start_DMA+0xd6>
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d005      	beq.n	8001aa4 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001a98:	e010      	b.n	8001abc <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3314      	adds	r3, #20
 8001aa0:	613b      	str	r3, [r7, #16]
        break;
 8001aa2:	e00c      	b.n	8001abe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3318      	adds	r3, #24
 8001aaa:	613b      	str	r3, [r7, #16]
        break;
 8001aac:	e007      	b.n	8001abe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	331c      	adds	r3, #28
 8001ab4:	613b      	str	r3, [r7, #16]
        break;
 8001ab6:	e002      	b.n	8001abe <HAL_DAC_Start_DMA+0xfa>
        break;
 8001ab8:	bf00      	nop
 8001aba:	e000      	b.n	8001abe <HAL_DAC_Start_DMA+0xfa>
        break;
 8001abc:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d111      	bne.n	8001ae8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6898      	ldr	r0, [r3, #8]
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	f000 fa2d 	bl	8001f3c <HAL_DMA_Start_IT>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	75fb      	strb	r3, [r7, #23]
 8001ae6:	e010      	b.n	8001b0a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001af6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	68d8      	ldr	r0, [r3, #12]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	f000 fa1b 	bl	8001f3c <HAL_DMA_Start_IT>
 8001b06:	4603      	mov	r3, r0
 8001b08:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6819      	ldr	r1, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2201      	movs	r2, #1
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e005      	b.n	8001b3c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f043 0204 	orr.w	r2, r3, #4
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	08001ccb 	.word	0x08001ccb
 8001b4c:	08001ced 	.word	0x08001ced
 8001b50:	08001d09 	.word	0x08001d09
 8001b54:	08001d73 	.word	0x08001d73
 8001b58:	08001d95 	.word	0x08001d95
 8001b5c:	08001db1 	.word	0x08001db1

08001b60 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6819      	ldr	r1, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	400a      	ands	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2201      	movs	r2, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10d      	bne.n	8001bc6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fa1c 	bl	8001fec <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e00c      	b.n	8001be0 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fa0e 	bl	8001fec <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001bde:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b087      	sub	sp, #28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	795b      	ldrb	r3, [r3, #5]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_DAC_ConfigChannel+0x18>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e03c      	b.n	8001cbe <HAL_DAC_ConfigChannel+0x92>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	22c0      	movs	r2, #192	; 0xc0
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	400a      	ands	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff ff89 	bl	8001bf0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	711a      	strb	r2, [r3, #4]
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7ff ff82 	bl	8001c04 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f043 0204 	orr.w	r2, r3, #4
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff ff78 	bl	8001c18 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	711a      	strb	r2, [r3, #4]
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7ff ffd8 	bl	8001d36 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	711a      	strb	r2, [r3, #4]
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff ffd1 	bl	8001d4a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f043 0204 	orr.w	r2, r3, #4
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff ffc7 	bl	8001d5e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	711a      	strb	r2, [r3, #4]
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff fc86 	bl	80016fc <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e099      	b.n	8001f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1c:	e00f      	b.n	8001e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1e:	f7ff fc6d 	bl	80016fc <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d908      	bls.n	8001e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e078      	b.n	8001f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e8      	bne.n	8001e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_DMA_Init+0x158>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d117      	bne.n	8001f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00e      	beq.n	8001f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fadf 	bl	80024a8 <DMA_CheckFifoParam>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001efe:	2301      	movs	r3, #1
 8001f00:	e016      	b.n	8001f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa96 	bl	800243c <DMA_CalcBaseAndBitshift>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	223f      	movs	r2, #63	; 0x3f
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	f010803f 	.word	0xf010803f

08001f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA_Start_IT+0x26>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e040      	b.n	8001fe4 <HAL_DMA_Start_IT+0xa8>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d12f      	bne.n	8001fd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fa28 	bl	80023e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	223f      	movs	r2, #63	; 0x3f
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0216 	orr.w	r2, r2, #22
 8001faa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e005      	b.n	8001fe2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ffa:	f7ff fb7f 	bl	80016fc <HAL_GetTick>
 8001ffe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d008      	beq.n	800201e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e052      	b.n	80020c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0216 	bic.w	r2, r2, #22
 800202c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800203c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <HAL_DMA_Abort+0x62>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0208 	bic.w	r2, r2, #8
 800205c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206e:	e013      	b.n	8002098 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002070:	f7ff fb44 	bl	80016fc <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b05      	cmp	r3, #5
 800207c:	d90c      	bls.n	8002098 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2203      	movs	r2, #3
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e015      	b.n	80020c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e4      	bne.n	8002070 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	223f      	movs	r2, #63	; 0x3f
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020d8:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <HAL_DMA_IRQHandler+0x248>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a8e      	ldr	r2, [pc, #568]	; (8002318 <HAL_DMA_IRQHandler+0x24c>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0a9b      	lsrs	r3, r3, #10
 80020e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	2208      	movs	r2, #8
 80020f8:	409a      	lsls	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01a      	beq.n	8002138 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d013      	beq.n	8002138 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0204 	bic.w	r2, r2, #4
 800211e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2208      	movs	r2, #8
 8002126:	409a      	lsls	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	f043 0201 	orr.w	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	2201      	movs	r2, #1
 800213e:	409a      	lsls	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d012      	beq.n	800216e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	2201      	movs	r2, #1
 800215c:	409a      	lsls	r2, r3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	f043 0202 	orr.w	r2, r3, #2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	2204      	movs	r2, #4
 8002174:	409a      	lsls	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d012      	beq.n	80021a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00b      	beq.n	80021a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	2204      	movs	r2, #4
 8002192:	409a      	lsls	r2, r3
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	f043 0204 	orr.w	r2, r3, #4
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a8:	2210      	movs	r2, #16
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d043      	beq.n	800223c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d03c      	beq.n	800223c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	2210      	movs	r2, #16
 80021c8:	409a      	lsls	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d018      	beq.n	800220e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d024      	beq.n	800223c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	4798      	blx	r3
 80021fa:	e01f      	b.n	800223c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01b      	beq.n	800223c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
 800220c:	e016      	b.n	800223c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d107      	bne.n	800222c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0208 	bic.w	r2, r2, #8
 800222a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2220      	movs	r2, #32
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 808f 	beq.w	800236c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8087 	beq.w	800236c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	2220      	movs	r2, #32
 8002264:	409a      	lsls	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b05      	cmp	r3, #5
 8002274:	d136      	bne.n	80022e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0216 	bic.w	r2, r2, #22
 8002284:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002294:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d103      	bne.n	80022a6 <HAL_DMA_IRQHandler+0x1da>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0208 	bic.w	r2, r2, #8
 80022b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	223f      	movs	r2, #63	; 0x3f
 80022bc:	409a      	lsls	r2, r3
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d07e      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	4798      	blx	r3
        }
        return;
 80022e2:	e079      	b.n	80023d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01d      	beq.n	800232e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10d      	bne.n	800231c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	2b00      	cmp	r3, #0
 8002306:	d031      	beq.n	800236c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
 8002310:	e02c      	b.n	800236c <HAL_DMA_IRQHandler+0x2a0>
 8002312:	bf00      	nop
 8002314:	200001a4 	.word	0x200001a4
 8002318:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d023      	beq.n	800236c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
 800232c:	e01e      	b.n	800236c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10f      	bne.n	800235c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0210 	bic.w	r2, r2, #16
 800234a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002370:	2b00      	cmp	r3, #0
 8002372:	d032      	beq.n	80023da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d022      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2205      	movs	r2, #5
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	3301      	adds	r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d307      	bcc.n	80023b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f2      	bne.n	8002398 <HAL_DMA_IRQHandler+0x2cc>
 80023b2:	e000      	b.n	80023b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	4798      	blx	r3
 80023d6:	e000      	b.n	80023da <HAL_DMA_IRQHandler+0x30e>
        return;
 80023d8:	bf00      	nop
    }
  }
}
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b40      	cmp	r3, #64	; 0x40
 800240c:	d108      	bne.n	8002420 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800241e:	e007      	b.n	8002430 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3b10      	subs	r3, #16
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <DMA_CalcBaseAndBitshift+0x64>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002456:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b03      	cmp	r3, #3
 8002468:	d909      	bls.n	800247e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002472:	f023 0303 	bic.w	r3, r3, #3
 8002476:	1d1a      	adds	r2, r3, #4
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	659a      	str	r2, [r3, #88]	; 0x58
 800247c:	e007      	b.n	800248e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	aaaaaaab 	.word	0xaaaaaaab
 80024a4:	08004df8 	.word	0x08004df8

080024a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d11f      	bne.n	8002502 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d856      	bhi.n	8002576 <DMA_CheckFifoParam+0xce>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <DMA_CheckFifoParam+0x28>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024f3 	.word	0x080024f3
 80024d8:	080024e1 	.word	0x080024e1
 80024dc:	08002577 	.word	0x08002577
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d046      	beq.n	800257a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f0:	e043      	b.n	800257a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024fa:	d140      	bne.n	800257e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002500:	e03d      	b.n	800257e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250a:	d121      	bne.n	8002550 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d837      	bhi.n	8002582 <DMA_CheckFifoParam+0xda>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <DMA_CheckFifoParam+0x70>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002529 	.word	0x08002529
 800251c:	0800252f 	.word	0x0800252f
 8002520:	08002529 	.word	0x08002529
 8002524:	08002541 	.word	0x08002541
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      break;
 800252c:	e030      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d025      	beq.n	8002586 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253e:	e022      	b.n	8002586 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002548:	d11f      	bne.n	800258a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800254e:	e01c      	b.n	800258a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d903      	bls.n	800255e <DMA_CheckFifoParam+0xb6>
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d003      	beq.n	8002564 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800255c:	e018      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      break;
 8002562:	e015      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00e      	beq.n	800258e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
      break;
 8002574:	e00b      	b.n	800258e <DMA_CheckFifoParam+0xe6>
      break;
 8002576:	bf00      	nop
 8002578:	e00a      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 800257a:	bf00      	nop
 800257c:	e008      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 800257e:	bf00      	nop
 8002580:	e006      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 8002582:	bf00      	nop
 8002584:	e004      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 8002586:	bf00      	nop
 8002588:	e002      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;   
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <DMA_CheckFifoParam+0xe8>
      break;
 800258e:	bf00      	nop
    }
  } 
  
  return status; 
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	e177      	b.n	80028ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025bc:	2201      	movs	r2, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	f040 8166 	bne.w	80028a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d005      	beq.n	80025f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d130      	bne.n	8002654 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002628:	2201      	movs	r2, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 0201 	and.w	r2, r3, #1
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b03      	cmp	r3, #3
 800265e:	d017      	beq.n	8002690 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d123      	bne.n	80026e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	08da      	lsrs	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3208      	adds	r2, #8
 80026a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	220f      	movs	r2, #15
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	08da      	lsrs	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3208      	adds	r2, #8
 80026de:	69b9      	ldr	r1, [r7, #24]
 80026e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2203      	movs	r2, #3
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0203 	and.w	r2, r3, #3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80c0 	beq.w	80028a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b66      	ldr	r3, [pc, #408]	; (80028c4 <HAL_GPIO_Init+0x324>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a65      	ldr	r2, [pc, #404]	; (80028c4 <HAL_GPIO_Init+0x324>)
 8002730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002734:	6453      	str	r3, [r2, #68]	; 0x44
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_GPIO_Init+0x324>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002742:	4a61      	ldr	r2, [pc, #388]	; (80028c8 <HAL_GPIO_Init+0x328>)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	220f      	movs	r2, #15
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_GPIO_Init+0x32c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d037      	beq.n	80027de <HAL_GPIO_Init+0x23e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a57      	ldr	r2, [pc, #348]	; (80028d0 <HAL_GPIO_Init+0x330>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d031      	beq.n	80027da <HAL_GPIO_Init+0x23a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a56      	ldr	r2, [pc, #344]	; (80028d4 <HAL_GPIO_Init+0x334>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d02b      	beq.n	80027d6 <HAL_GPIO_Init+0x236>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a55      	ldr	r2, [pc, #340]	; (80028d8 <HAL_GPIO_Init+0x338>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d025      	beq.n	80027d2 <HAL_GPIO_Init+0x232>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a54      	ldr	r2, [pc, #336]	; (80028dc <HAL_GPIO_Init+0x33c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01f      	beq.n	80027ce <HAL_GPIO_Init+0x22e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a53      	ldr	r2, [pc, #332]	; (80028e0 <HAL_GPIO_Init+0x340>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d019      	beq.n	80027ca <HAL_GPIO_Init+0x22a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_GPIO_Init+0x344>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_GPIO_Init+0x226>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a51      	ldr	r2, [pc, #324]	; (80028e8 <HAL_GPIO_Init+0x348>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00d      	beq.n	80027c2 <HAL_GPIO_Init+0x222>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a50      	ldr	r2, [pc, #320]	; (80028ec <HAL_GPIO_Init+0x34c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d007      	beq.n	80027be <HAL_GPIO_Init+0x21e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4f      	ldr	r2, [pc, #316]	; (80028f0 <HAL_GPIO_Init+0x350>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d101      	bne.n	80027ba <HAL_GPIO_Init+0x21a>
 80027b6:	2309      	movs	r3, #9
 80027b8:	e012      	b.n	80027e0 <HAL_GPIO_Init+0x240>
 80027ba:	230a      	movs	r3, #10
 80027bc:	e010      	b.n	80027e0 <HAL_GPIO_Init+0x240>
 80027be:	2308      	movs	r3, #8
 80027c0:	e00e      	b.n	80027e0 <HAL_GPIO_Init+0x240>
 80027c2:	2307      	movs	r3, #7
 80027c4:	e00c      	b.n	80027e0 <HAL_GPIO_Init+0x240>
 80027c6:	2306      	movs	r3, #6
 80027c8:	e00a      	b.n	80027e0 <HAL_GPIO_Init+0x240>
 80027ca:	2305      	movs	r3, #5
 80027cc:	e008      	b.n	80027e0 <HAL_GPIO_Init+0x240>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x240>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e004      	b.n	80027e0 <HAL_GPIO_Init+0x240>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_Init+0x240>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_GPIO_Init+0x240>
 80027de:	2300      	movs	r3, #0
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f002 0203 	and.w	r2, r2, #3
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	4093      	lsls	r3, r2
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f0:	4935      	ldr	r1, [pc, #212]	; (80028c8 <HAL_GPIO_Init+0x328>)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fe:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <HAL_GPIO_Init+0x354>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002822:	4a34      	ldr	r2, [pc, #208]	; (80028f4 <HAL_GPIO_Init+0x354>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002828:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <HAL_GPIO_Init+0x354>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800284c:	4a29      	ldr	r2, [pc, #164]	; (80028f4 <HAL_GPIO_Init+0x354>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002852:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <HAL_GPIO_Init+0x354>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002876:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <HAL_GPIO_Init+0x354>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_GPIO_Init+0x354>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <HAL_GPIO_Init+0x354>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	f67f ae84 	bls.w	80025bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40013800 	.word	0x40013800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40020400 	.word	0x40020400
 80028d4:	40020800 	.word	0x40020800
 80028d8:	40020c00 	.word	0x40020c00
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40021400 	.word	0x40021400
 80028e4:	40021800 	.word	0x40021800
 80028e8:	40021c00 	.word	0x40021c00
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40022400 	.word	0x40022400
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	887b      	ldrh	r3, [r7, #2]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	e001      	b.n	800291a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
 8002934:	4613      	mov	r3, r2
 8002936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002938:	787b      	ldrb	r3, [r7, #1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800293e:	887a      	ldrh	r2, [r7, #2]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002944:	e003      	b.n	800294e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	041a      	lsls	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	619a      	str	r2, [r3, #24]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800296c:	887a      	ldrh	r2, [r7, #2]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4013      	ands	r3, r2
 8002972:	041a      	lsls	r2, r3, #16
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43d9      	mvns	r1, r3
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	400b      	ands	r3, r1
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	619a      	str	r2, [r3, #24]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e267      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d075      	beq.n	8002a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ae:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d00c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ba:	4b85      	ldr	r3, [pc, #532]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d112      	bne.n	80029ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c6:	4b82      	ldr	r3, [pc, #520]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d2:	d10b      	bne.n	80029ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	4b7e      	ldr	r3, [pc, #504]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d05b      	beq.n	8002a98 <HAL_RCC_OscConfig+0x108>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d157      	bne.n	8002a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e242      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d106      	bne.n	8002a04 <HAL_RCC_OscConfig+0x74>
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a75      	ldr	r2, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e01d      	b.n	8002a40 <HAL_RCC_OscConfig+0xb0>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x98>
 8002a0e:	4b70      	ldr	r3, [pc, #448]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6f      	ldr	r2, [pc, #444]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b6d      	ldr	r3, [pc, #436]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6c      	ldr	r2, [pc, #432]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0xb0>
 8002a28:	4b69      	ldr	r3, [pc, #420]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a68      	ldr	r2, [pc, #416]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a65      	ldr	r2, [pc, #404]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fe58 	bl	80016fc <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe fe54 	bl	80016fc <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e207      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b5b      	ldr	r3, [pc, #364]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0xc0>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fe44 	bl	80016fc <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fe40 	bl	80016fc <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e1f3      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8a:	4b51      	ldr	r3, [pc, #324]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0xe8>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d063      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d11c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002abe:	4b44      	ldr	r3, [pc, #272]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d116      	bne.n	8002af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x152>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1c7      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4937      	ldr	r1, [pc, #220]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	e03a      	b.n	8002b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d020      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b00:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x244>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fdf9 	bl	80016fc <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fdf5 	bl	80016fc <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1a8      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4925      	ldr	r1, [pc, #148]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	600b      	str	r3, [r1, #0]
 8002b40:	e015      	b.n	8002b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCC_OscConfig+0x244>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fdd8 	bl	80016fc <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b50:	f7fe fdd4 	bl	80016fc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e187      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d036      	beq.n	8002be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d016      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_RCC_OscConfig+0x248>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe fdb8 	bl	80016fc <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe fdb4 	bl	80016fc <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e167      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x200>
 8002bae:	e01b      	b.n	8002be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_OscConfig+0x248>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fda1 	bl	80016fc <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbc:	e00e      	b.n	8002bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bbe:	f7fe fd9d 	bl	80016fc <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d907      	bls.n	8002bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e150      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	42470000 	.word	0x42470000
 8002bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bdc:	4b88      	ldr	r3, [pc, #544]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ea      	bne.n	8002bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8097 	beq.w	8002d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfa:	4b81      	ldr	r3, [pc, #516]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	4b7d      	ldr	r3, [pc, #500]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a7c      	ldr	r2, [pc, #496]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b7a      	ldr	r3, [pc, #488]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	4b77      	ldr	r3, [pc, #476]	; (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c32:	4b74      	ldr	r3, [pc, #464]	; (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a73      	ldr	r2, [pc, #460]	; (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fd5d 	bl	80016fc <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7fe fd59 	bl	80016fc <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e10c      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c58:	4b6a      	ldr	r3, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x474>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x2ea>
 8002c6c:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a63      	ldr	r2, [pc, #396]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x324>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x30c>
 8002c82:	4b5f      	ldr	r3, [pc, #380]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	4a5e      	ldr	r2, [pc, #376]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8e:	4b5c      	ldr	r3, [pc, #368]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a5b      	ldr	r2, [pc, #364]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x324>
 8002c9c:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca0:	4a57      	ldr	r2, [pc, #348]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a54      	ldr	r2, [pc, #336]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002cae:	f023 0304 	bic.w	r3, r3, #4
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d015      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fd1e 	bl	80016fc <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fd1a 	bl	80016fc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0cb      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cda:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ee      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x334>
 8002ce6:	e014      	b.n	8002d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fd08 	bl	80016fc <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fd04 	bl	80016fc <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0b5      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	4b3e      	ldr	r3, [pc, #248]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ee      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d105      	bne.n	8002d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d18:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a38      	ldr	r2, [pc, #224]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80a1 	beq.w	8002e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d05c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d141      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d42:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_RCC_OscConfig+0x478>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fcd8 	bl	80016fc <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe fcd4 	bl	80016fc <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e087      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	3b01      	subs	r3, #1
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	061b      	lsls	r3, r3, #24
 8002d92:	491b      	ldr	r1, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x478>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fcad 	bl	80016fc <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fe fca9 	bl	80016fc <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e05c      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x416>
 8002dc4:	e054      	b.n	8002e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <HAL_RCC_OscConfig+0x478>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fc96 	bl	80016fc <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe fc92 	bl	80016fc <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e045      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_OscConfig+0x470>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x444>
 8002df2:	e03d      	b.n	8002e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e038      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000
 8002e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_RCC_OscConfig+0x4ec>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d028      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d121      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d11a      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d111      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800

08002e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0cc      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e94:	4b68      	ldr	r3, [pc, #416]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d90c      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b65      	ldr	r3, [pc, #404]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0b8      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed4:	4b59      	ldr	r3, [pc, #356]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eec:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef8:	4b50      	ldr	r3, [pc, #320]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	494d      	ldr	r1, [pc, #308]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d044      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d119      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3e:	4b3f      	ldr	r3, [pc, #252]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e06f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e067      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4934      	ldr	r1, [pc, #208]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f70:	f7fe fbc4 	bl	80016fc <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe fbc0 	bl	80016fc <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e04f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d20c      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e032      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4916      	ldr	r1, [pc, #88]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	490e      	ldr	r1, [pc, #56]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003006:	f000 f821 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800300a:	4602      	mov	r2, r0
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	490a      	ldr	r1, [pc, #40]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	5ccb      	ldrb	r3, [r1, r3]
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fb24 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023c00 	.word	0x40023c00
 800303c:	40023800 	.word	0x40023800
 8003040:	08004dd8 	.word	0x08004dd8
 8003044:	200001a4 	.word	0x200001a4
 8003048:	200001b8 	.word	0x200001b8

0800304c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b094      	sub	sp, #80	; 0x50
 8003052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	647b      	str	r3, [r7, #68]	; 0x44
 8003058:	2300      	movs	r3, #0
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800305c:	2300      	movs	r3, #0
 800305e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003064:	4b79      	ldr	r3, [pc, #484]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d00d      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x40>
 8003070:	2b08      	cmp	r3, #8
 8003072:	f200 80e1 	bhi.w	8003238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x34>
 800307a:	2b04      	cmp	r3, #4
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x3a>
 800307e:	e0db      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b73      	ldr	r3, [pc, #460]	; (8003250 <HAL_RCC_GetSysClockFreq+0x204>)
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003084:	e0db      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003086:	4b73      	ldr	r3, [pc, #460]	; (8003254 <HAL_RCC_GetSysClockFreq+0x208>)
 8003088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800308a:	e0d8      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800308c:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003094:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003096:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	2200      	movs	r2, #0
 80030aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
 80030b6:	2300      	movs	r3, #0
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34
 80030ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4621      	mov	r1, r4
 80030d8:	1a51      	subs	r1, r2, r1
 80030da:	6139      	str	r1, [r7, #16]
 80030dc:	4629      	mov	r1, r5
 80030de:	eb63 0301 	sbc.w	r3, r3, r1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f0:	4659      	mov	r1, fp
 80030f2:	018b      	lsls	r3, r1, #6
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fa:	4651      	mov	r1, sl
 80030fc:	018a      	lsls	r2, r1, #6
 80030fe:	4651      	mov	r1, sl
 8003100:	ebb2 0801 	subs.w	r8, r2, r1
 8003104:	4659      	mov	r1, fp
 8003106:	eb63 0901 	sbc.w	r9, r3, r1
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800311a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800311e:	4690      	mov	r8, r2
 8003120:	4699      	mov	r9, r3
 8003122:	4623      	mov	r3, r4
 8003124:	eb18 0303 	adds.w	r3, r8, r3
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	462b      	mov	r3, r5
 800312c:	eb49 0303 	adc.w	r3, r9, r3
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800313e:	4629      	mov	r1, r5
 8003140:	024b      	lsls	r3, r1, #9
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003148:	4621      	mov	r1, r4
 800314a:	024a      	lsls	r2, r1, #9
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003152:	2200      	movs	r2, #0
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
 8003156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800315c:	f7fd f8a0 	bl	80002a0 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003168:	e058      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316a:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	099b      	lsrs	r3, r3, #6
 8003170:	2200      	movs	r2, #0
 8003172:	4618      	mov	r0, r3
 8003174:	4611      	mov	r1, r2
 8003176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800317a:	623b      	str	r3, [r7, #32]
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	f04f 0000 	mov.w	r0, #0
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	0159      	lsls	r1, r3, #5
 8003192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003196:	0150      	lsls	r0, r2, #5
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4641      	mov	r1, r8
 800319e:	ebb2 0a01 	subs.w	sl, r2, r1
 80031a2:	4649      	mov	r1, r9
 80031a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031bc:	ebb2 040a 	subs.w	r4, r2, sl
 80031c0:	eb63 050b 	sbc.w	r5, r3, fp
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	00eb      	lsls	r3, r5, #3
 80031ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d2:	00e2      	lsls	r2, r4, #3
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	18e3      	adds	r3, r4, r3
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	464b      	mov	r3, r9
 80031e0:	eb45 0303 	adc.w	r3, r5, r3
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f2:	4629      	mov	r1, r5
 80031f4:	028b      	lsls	r3, r1, #10
 80031f6:	4621      	mov	r1, r4
 80031f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031fc:	4621      	mov	r1, r4
 80031fe:	028a      	lsls	r2, r1, #10
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003206:	2200      	movs	r2, #0
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	61fa      	str	r2, [r7, #28]
 800320c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003210:	f7fd f846 	bl	80002a0 <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4613      	mov	r3, r2
 800321a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800322c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800322e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003236:	e002      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetSysClockFreq+0x204>)
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800323c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003240:	4618      	mov	r0, r3
 8003242:	3750      	adds	r7, #80	; 0x50
 8003244:	46bd      	mov	sp, r7
 8003246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	00f42400 	.word	0x00f42400
 8003254:	007a1200 	.word	0x007a1200

08003258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCC_GetHCLKFreq+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	200001a4 	.word	0x200001a4

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003274:	f7ff fff0 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	08004de8 	.word	0x08004de8

08003298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800329c:	f7ff ffdc 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0b5b      	lsrs	r3, r3, #13
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4903      	ldr	r1, [pc, #12]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	08004de8 	.word	0x08004de8

080032c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e041      	b.n	8003356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fb8e 	bl	8000a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 f95e 	bl	80035c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d001      	beq.n	8003378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e046      	b.n	8003406 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <HAL_TIM_Base_Start+0xb4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d022      	beq.n	80033d0 <HAL_TIM_Base_Start+0x70>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003392:	d01d      	beq.n	80033d0 <HAL_TIM_Base_Start+0x70>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <HAL_TIM_Base_Start+0xb8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <HAL_TIM_Base_Start+0x70>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1e      	ldr	r2, [pc, #120]	; (800341c <HAL_TIM_Base_Start+0xbc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <HAL_TIM_Base_Start+0x70>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <HAL_TIM_Base_Start+0xc0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <HAL_TIM_Base_Start+0x70>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <HAL_TIM_Base_Start+0xc4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d009      	beq.n	80033d0 <HAL_TIM_Base_Start+0x70>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a19      	ldr	r2, [pc, #100]	; (8003428 <HAL_TIM_Base_Start+0xc8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_TIM_Base_Start+0x70>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a18      	ldr	r2, [pc, #96]	; (800342c <HAL_TIM_Base_Start+0xcc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d111      	bne.n	80033f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d010      	beq.n	8003404 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	e007      	b.n	8003404 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40010000 	.word	0x40010000
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00
 8003424:	40010400 	.word	0x40010400
 8003428:	40014000 	.word	0x40014000
 800342c:	40001800 	.word	0x40001800

08003430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_TIM_ConfigClockSource+0x1c>
 8003448:	2302      	movs	r3, #2
 800344a:	e0b4      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x186>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800346a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003484:	d03e      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0xd4>
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348a:	f200 8087 	bhi.w	800359c <HAL_TIM_ConfigClockSource+0x16c>
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003492:	f000 8086 	beq.w	80035a2 <HAL_TIM_ConfigClockSource+0x172>
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	d87f      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b70      	cmp	r3, #112	; 0x70
 800349e:	d01a      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0xa6>
 80034a0:	2b70      	cmp	r3, #112	; 0x70
 80034a2:	d87b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b60      	cmp	r3, #96	; 0x60
 80034a6:	d050      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x11a>
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d877      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b50      	cmp	r3, #80	; 0x50
 80034ae:	d03c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0xfa>
 80034b0:	2b50      	cmp	r3, #80	; 0x50
 80034b2:	d873      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d058      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x13a>
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d86f      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d064      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15a>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d86b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d060      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15a>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d867      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05c      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15a>
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d05a      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15a>
 80034d4:	e062      	b.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6899      	ldr	r1, [r3, #8]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f000 f985 	bl	80037f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	609a      	str	r2, [r3, #8]
      break;
 8003502:	e04f      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6899      	ldr	r1, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f000 f96e 	bl	80037f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003526:	609a      	str	r2, [r3, #8]
      break;
 8003528:	e03c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 f8e2 	bl	8003700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2150      	movs	r1, #80	; 0x50
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f93b 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 8003548:	e02c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 f901 	bl	800375e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2160      	movs	r1, #96	; 0x60
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f92b 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 8003568:	e01c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	461a      	mov	r2, r3
 8003578:	f000 f8c2 	bl	8003700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2140      	movs	r1, #64	; 0x40
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f91b 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 8003588:	e00c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f000 f912 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 800359a:	e003      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
      break;
 80035a0:	e000      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a40      	ldr	r2, [pc, #256]	; (80036d4 <TIM_Base_SetConfig+0x114>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035de:	d00f      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a3d      	ldr	r2, [pc, #244]	; (80036d8 <TIM_Base_SetConfig+0x118>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00b      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3c      	ldr	r2, [pc, #240]	; (80036dc <TIM_Base_SetConfig+0x11c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3b      	ldr	r2, [pc, #236]	; (80036e0 <TIM_Base_SetConfig+0x120>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <TIM_Base_SetConfig+0x40>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3a      	ldr	r2, [pc, #232]	; (80036e4 <TIM_Base_SetConfig+0x124>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2f      	ldr	r2, [pc, #188]	; (80036d4 <TIM_Base_SetConfig+0x114>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d02b      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d027      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2c      	ldr	r2, [pc, #176]	; (80036d8 <TIM_Base_SetConfig+0x118>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d023      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <TIM_Base_SetConfig+0x11c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01f      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <TIM_Base_SetConfig+0x120>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01b      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <TIM_Base_SetConfig+0x124>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d017      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <TIM_Base_SetConfig+0x128>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a27      	ldr	r2, [pc, #156]	; (80036ec <TIM_Base_SetConfig+0x12c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00f      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a26      	ldr	r2, [pc, #152]	; (80036f0 <TIM_Base_SetConfig+0x130>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00b      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a25      	ldr	r2, [pc, #148]	; (80036f4 <TIM_Base_SetConfig+0x134>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d007      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a24      	ldr	r2, [pc, #144]	; (80036f8 <TIM_Base_SetConfig+0x138>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a23      	ldr	r2, [pc, #140]	; (80036fc <TIM_Base_SetConfig+0x13c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d108      	bne.n	8003684 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <TIM_Base_SetConfig+0x114>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <TIM_Base_SetConfig+0xf8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <TIM_Base_SetConfig+0x124>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d103      	bne.n	80036c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	615a      	str	r2, [r3, #20]
}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40010400 	.word	0x40010400
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800
 80036f4:	40001800 	.word	0x40001800
 80036f8:	40001c00 	.word	0x40001c00
 80036fc:	40002000 	.word	0x40002000

08003700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f023 030a 	bic.w	r3, r3, #10
 800373c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800375e:	b480      	push	{r7}
 8003760:	b087      	sub	sp, #28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f023 0210 	bic.w	r2, r3, #16
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	031b      	lsls	r3, r3, #12
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800379a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	621a      	str	r2, [r3, #32]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	f043 0307 	orr.w	r3, r3, #7
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800380e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	021a      	lsls	r2, r3, #8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	431a      	orrs	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	609a      	str	r2, [r3, #8]
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003848:	2302      	movs	r3, #2
 800384a:	e05a      	b.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a21      	ldr	r2, [pc, #132]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d022      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003898:	d01d      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d018      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1a      	ldr	r2, [pc, #104]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a15      	ldr	r2, [pc, #84]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10c      	bne.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40010000 	.word	0x40010000
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40000c00 	.word	0x40000c00
 8003920:	40010400 	.word	0x40010400
 8003924:	40014000 	.word	0x40014000
 8003928:	40001800 	.word	0x40001800

0800392c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e03f      	b.n	80039be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd f878 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f9cb 	bl	8003d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b08a      	sub	sp, #40	; 0x28
 80039ca:	af02      	add	r7, sp, #8
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d17c      	bne.n	8003ae0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_UART_Transmit+0x2c>
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e075      	b.n	8003ae2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_UART_Transmit+0x3e>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e06e      	b.n	8003ae2 <HAL_UART_Transmit+0x11c>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2221      	movs	r2, #33	; 0x21
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a1a:	f7fd fe6f 	bl	80016fc <HAL_GetTick>
 8003a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	88fa      	ldrh	r2, [r7, #6]
 8003a24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a34:	d108      	bne.n	8003a48 <HAL_UART_Transmit+0x82>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e003      	b.n	8003a50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a58:	e02a      	b.n	8003ab0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2180      	movs	r1, #128	; 0x80
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f8e2 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e036      	b.n	8003ae2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e007      	b.n	8003aa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1cf      	bne.n	8003a5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	2140      	movs	r1, #64	; 0x40
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f8b2 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e006      	b.n	8003ae2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b08a      	sub	sp, #40	; 0x28
 8003aee:	af02      	add	r7, sp, #8
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4613      	mov	r3, r2
 8003af8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	f040 808c 	bne.w	8003c24 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_UART_Receive+0x2e>
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e084      	b.n	8003c26 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Receive+0x40>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e07d      	b.n	8003c26 <HAL_UART_Receive+0x13c>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2222      	movs	r2, #34	; 0x22
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b46:	f7fd fdd9 	bl	80016fc <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d108      	bne.n	8003b74 <HAL_UART_Receive+0x8a>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	e003      	b.n	8003b7c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b84:	e043      	b.n	8003c0e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2120      	movs	r1, #32
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f84c 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e042      	b.n	8003c26 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	3302      	adds	r3, #2
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e01f      	b.n	8003c00 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d007      	beq.n	8003bda <HAL_UART_Receive+0xf0>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <HAL_UART_Receive+0xfe>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	e008      	b.n	8003bfa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1b6      	bne.n	8003b86 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b090      	sub	sp, #64	; 0x40
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3e:	e050      	b.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c46:	d04c      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c4e:	f7fd fd55 	bl	80016fc <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d241      	bcs.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c7e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb2:	623a      	str	r2, [r7, #32]
 8003cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	69f9      	ldr	r1, [r7, #28]
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e5      	bne.n	8003c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00f      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d09f      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3740      	adds	r7, #64	; 0x40
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d10:	b0c0      	sub	sp, #256	; 0x100
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	68d9      	ldr	r1, [r3, #12]
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	ea40 0301 	orr.w	r3, r0, r1
 8003d34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d64:	f021 010c 	bic.w	r1, r1, #12
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d72:	430b      	orrs	r3, r1
 8003d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	6999      	ldr	r1, [r3, #24]
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	ea40 0301 	orr.w	r3, r0, r1
 8003d92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b8f      	ldr	r3, [pc, #572]	; (8003fd8 <UART_SetConfig+0x2cc>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d005      	beq.n	8003dac <UART_SetConfig+0xa0>
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b8d      	ldr	r3, [pc, #564]	; (8003fdc <UART_SetConfig+0x2d0>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d104      	bne.n	8003db6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7ff fa74 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8003db0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003db4:	e003      	b.n	8003dbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003db6:	f7ff fa5b 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8003dba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc8:	f040 810c 	bne.w	8003fe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dde:	4622      	mov	r2, r4
 8003de0:	462b      	mov	r3, r5
 8003de2:	1891      	adds	r1, r2, r2
 8003de4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003de6:	415b      	adcs	r3, r3
 8003de8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dee:	4621      	mov	r1, r4
 8003df0:	eb12 0801 	adds.w	r8, r2, r1
 8003df4:	4629      	mov	r1, r5
 8003df6:	eb43 0901 	adc.w	r9, r3, r1
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0e:	4690      	mov	r8, r2
 8003e10:	4699      	mov	r9, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	eb18 0303 	adds.w	r3, r8, r3
 8003e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	eb49 0303 	adc.w	r3, r9, r3
 8003e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	18db      	adds	r3, r3, r3
 8003e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e40:	4613      	mov	r3, r2
 8003e42:	eb42 0303 	adc.w	r3, r2, r3
 8003e46:	657b      	str	r3, [r7, #84]	; 0x54
 8003e48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e50:	f7fc fa26 	bl	80002a0 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4b61      	ldr	r3, [pc, #388]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	011c      	lsls	r4, r3, #4
 8003e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e84:	4641      	mov	r1, r8
 8003e86:	eb12 0a01 	adds.w	sl, r2, r1
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea4:	4692      	mov	sl, r2
 8003ea6:	469b      	mov	fp, r3
 8003ea8:	4643      	mov	r3, r8
 8003eaa:	eb1a 0303 	adds.w	r3, sl, r3
 8003eae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	eb4b 0303 	adc.w	r3, fp, r3
 8003eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ec8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ecc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	18db      	adds	r3, r3, r3
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	eb42 0303 	adc.w	r3, r2, r3
 8003edc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ee6:	f7fc f9db 	bl	80002a0 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2264      	movs	r2, #100	; 0x64
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	1acb      	subs	r3, r1, r3
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f06:	4b36      	ldr	r3, [pc, #216]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003f08:	fba3 2302 	umull	r2, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f14:	441c      	add	r4, r3
 8003f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f28:	4642      	mov	r2, r8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f30:	415b      	adcs	r3, r3
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f38:	4641      	mov	r1, r8
 8003f3a:	1851      	adds	r1, r2, r1
 8003f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f3e:	4649      	mov	r1, r9
 8003f40:	414b      	adcs	r3, r1
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f50:	4659      	mov	r1, fp
 8003f52:	00cb      	lsls	r3, r1, #3
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	00ca      	lsls	r2, r1, #3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	4642      	mov	r2, r8
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	460a      	mov	r2, r1
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	18db      	adds	r3, r3, r3
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f92:	4613      	mov	r3, r2
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fa2:	f7fc f97d 	bl	80002a0 <__aeabi_uldivmod>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003fac:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	2164      	movs	r1, #100	; 0x64
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	3332      	adds	r3, #50	; 0x32
 8003fbe:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	f003 0207 	and.w	r2, r3, #7
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4422      	add	r2, r4
 8003fd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fd4:	e105      	b.n	80041e2 <UART_SetConfig+0x4d6>
 8003fd6:	bf00      	nop
 8003fd8:	40011000 	.word	0x40011000
 8003fdc:	40011400 	.word	0x40011400
 8003fe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ff6:	4642      	mov	r2, r8
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	1891      	adds	r1, r2, r2
 8003ffc:	6239      	str	r1, [r7, #32]
 8003ffe:	415b      	adcs	r3, r3
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
 8004002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004006:	4641      	mov	r1, r8
 8004008:	1854      	adds	r4, r2, r1
 800400a:	4649      	mov	r1, r9
 800400c:	eb43 0501 	adc.w	r5, r3, r1
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	00eb      	lsls	r3, r5, #3
 800401a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800401e:	00e2      	lsls	r2, r4, #3
 8004020:	4614      	mov	r4, r2
 8004022:	461d      	mov	r5, r3
 8004024:	4643      	mov	r3, r8
 8004026:	18e3      	adds	r3, r4, r3
 8004028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800402c:	464b      	mov	r3, r9
 800402e:	eb45 0303 	adc.w	r3, r5, r3
 8004032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004052:	4629      	mov	r1, r5
 8004054:	008b      	lsls	r3, r1, #2
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800405c:	4621      	mov	r1, r4
 800405e:	008a      	lsls	r2, r1, #2
 8004060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004064:	f7fc f91c 	bl	80002a0 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4b60      	ldr	r3, [pc, #384]	; (80041f0 <UART_SetConfig+0x4e4>)
 800406e:	fba3 2302 	umull	r2, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	011c      	lsls	r4, r3, #4
 8004076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004080:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004088:	4642      	mov	r2, r8
 800408a:	464b      	mov	r3, r9
 800408c:	1891      	adds	r1, r2, r2
 800408e:	61b9      	str	r1, [r7, #24]
 8004090:	415b      	adcs	r3, r3
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004098:	4641      	mov	r1, r8
 800409a:	1851      	adds	r1, r2, r1
 800409c:	6139      	str	r1, [r7, #16]
 800409e:	4649      	mov	r1, r9
 80040a0:	414b      	adcs	r3, r1
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b0:	4659      	mov	r1, fp
 80040b2:	00cb      	lsls	r3, r1, #3
 80040b4:	4651      	mov	r1, sl
 80040b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ba:	4651      	mov	r1, sl
 80040bc:	00ca      	lsls	r2, r1, #3
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	4642      	mov	r2, r8
 80040c6:	189b      	adds	r3, r3, r2
 80040c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040cc:	464b      	mov	r3, r9
 80040ce:	460a      	mov	r2, r1
 80040d0:	eb42 0303 	adc.w	r3, r2, r3
 80040d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80040e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040f0:	4649      	mov	r1, r9
 80040f2:	008b      	lsls	r3, r1, #2
 80040f4:	4641      	mov	r1, r8
 80040f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040fa:	4641      	mov	r1, r8
 80040fc:	008a      	lsls	r2, r1, #2
 80040fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004102:	f7fc f8cd 	bl	80002a0 <__aeabi_uldivmod>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <UART_SetConfig+0x4e4>)
 800410c:	fba3 1302 	umull	r1, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	2164      	movs	r1, #100	; 0x64
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	3332      	adds	r3, #50	; 0x32
 800411e:	4a34      	ldr	r2, [pc, #208]	; (80041f0 <UART_SetConfig+0x4e4>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412a:	441c      	add	r4, r3
 800412c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004130:	2200      	movs	r2, #0
 8004132:	673b      	str	r3, [r7, #112]	; 0x70
 8004134:	677a      	str	r2, [r7, #116]	; 0x74
 8004136:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800413a:	4642      	mov	r2, r8
 800413c:	464b      	mov	r3, r9
 800413e:	1891      	adds	r1, r2, r2
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	415b      	adcs	r3, r3
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800414a:	4641      	mov	r1, r8
 800414c:	1851      	adds	r1, r2, r1
 800414e:	6039      	str	r1, [r7, #0]
 8004150:	4649      	mov	r1, r9
 8004152:	414b      	adcs	r3, r1
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004162:	4659      	mov	r1, fp
 8004164:	00cb      	lsls	r3, r1, #3
 8004166:	4651      	mov	r1, sl
 8004168:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800416c:	4651      	mov	r1, sl
 800416e:	00ca      	lsls	r2, r1, #3
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	4603      	mov	r3, r0
 8004176:	4642      	mov	r2, r8
 8004178:	189b      	adds	r3, r3, r2
 800417a:	66bb      	str	r3, [r7, #104]	; 0x68
 800417c:	464b      	mov	r3, r9
 800417e:	460a      	mov	r2, r1
 8004180:	eb42 0303 	adc.w	r3, r2, r3
 8004184:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	663b      	str	r3, [r7, #96]	; 0x60
 8004190:	667a      	str	r2, [r7, #100]	; 0x64
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800419e:	4649      	mov	r1, r9
 80041a0:	008b      	lsls	r3, r1, #2
 80041a2:	4641      	mov	r1, r8
 80041a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a8:	4641      	mov	r1, r8
 80041aa:	008a      	lsls	r2, r1, #2
 80041ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041b0:	f7fc f876 	bl	80002a0 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <UART_SetConfig+0x4e4>)
 80041ba:	fba3 1302 	umull	r1, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2164      	movs	r1, #100	; 0x64
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a08      	ldr	r2, [pc, #32]	; (80041f0 <UART_SetConfig+0x4e4>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 020f 	and.w	r2, r3, #15
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4422      	add	r2, r4
 80041e0:	609a      	str	r2, [r3, #8]
}
 80041e2:	bf00      	nop
 80041e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041e8:	46bd      	mov	sp, r7
 80041ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ee:	bf00      	nop
 80041f0:	51eb851f 	.word	0x51eb851f

080041f4 <atoi>:
 80041f4:	220a      	movs	r2, #10
 80041f6:	2100      	movs	r1, #0
 80041f8:	f000 b8d4 	b.w	80043a4 <strtol>

080041fc <__errno>:
 80041fc:	4b01      	ldr	r3, [pc, #4]	; (8004204 <__errno+0x8>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	200001c0 	.word	0x200001c0

08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4d0d      	ldr	r5, [pc, #52]	; (8004240 <__libc_init_array+0x38>)
 800420c:	4c0d      	ldr	r4, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 800420e:	1b64      	subs	r4, r4, r5
 8004210:	10a4      	asrs	r4, r4, #2
 8004212:	2600      	movs	r6, #0
 8004214:	42a6      	cmp	r6, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	4d0b      	ldr	r5, [pc, #44]	; (8004248 <__libc_init_array+0x40>)
 800421a:	4c0c      	ldr	r4, [pc, #48]	; (800424c <__libc_init_array+0x44>)
 800421c:	f000 fd1a 	bl	8004c54 <_init>
 8004220:	1b64      	subs	r4, r4, r5
 8004222:	10a4      	asrs	r4, r4, #2
 8004224:	2600      	movs	r6, #0
 8004226:	42a6      	cmp	r6, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004230:	4798      	blx	r3
 8004232:	3601      	adds	r6, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	f855 3b04 	ldr.w	r3, [r5], #4
 800423a:	4798      	blx	r3
 800423c:	3601      	adds	r6, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	08004f3c 	.word	0x08004f3c
 8004244:	08004f3c 	.word	0x08004f3c
 8004248:	08004f3c 	.word	0x08004f3c
 800424c:	08004f40 	.word	0x08004f40

08004250 <memset>:
 8004250:	4402      	add	r2, r0
 8004252:	4603      	mov	r3, r0
 8004254:	4293      	cmp	r3, r2
 8004256:	d100      	bne.n	800425a <memset+0xa>
 8004258:	4770      	bx	lr
 800425a:	f803 1b01 	strb.w	r1, [r3], #1
 800425e:	e7f9      	b.n	8004254 <memset+0x4>

08004260 <siprintf>:
 8004260:	b40e      	push	{r1, r2, r3}
 8004262:	b500      	push	{lr}
 8004264:	b09c      	sub	sp, #112	; 0x70
 8004266:	ab1d      	add	r3, sp, #116	; 0x74
 8004268:	9002      	str	r0, [sp, #8]
 800426a:	9006      	str	r0, [sp, #24]
 800426c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004270:	4809      	ldr	r0, [pc, #36]	; (8004298 <siprintf+0x38>)
 8004272:	9107      	str	r1, [sp, #28]
 8004274:	9104      	str	r1, [sp, #16]
 8004276:	4909      	ldr	r1, [pc, #36]	; (800429c <siprintf+0x3c>)
 8004278:	f853 2b04 	ldr.w	r2, [r3], #4
 800427c:	9105      	str	r1, [sp, #20]
 800427e:	6800      	ldr	r0, [r0, #0]
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	a902      	add	r1, sp, #8
 8004284:	f000 f8f4 	bl	8004470 <_svfiprintf_r>
 8004288:	9b02      	ldr	r3, [sp, #8]
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	b01c      	add	sp, #112	; 0x70
 8004290:	f85d eb04 	ldr.w	lr, [sp], #4
 8004294:	b003      	add	sp, #12
 8004296:	4770      	bx	lr
 8004298:	200001c0 	.word	0x200001c0
 800429c:	ffff0208 	.word	0xffff0208

080042a0 <_strtol_l.constprop.0>:
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a6:	d001      	beq.n	80042ac <_strtol_l.constprop.0+0xc>
 80042a8:	2b24      	cmp	r3, #36	; 0x24
 80042aa:	d906      	bls.n	80042ba <_strtol_l.constprop.0+0x1a>
 80042ac:	f7ff ffa6 	bl	80041fc <__errno>
 80042b0:	2316      	movs	r3, #22
 80042b2:	6003      	str	r3, [r0, #0]
 80042b4:	2000      	movs	r0, #0
 80042b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80043a0 <_strtol_l.constprop.0+0x100>
 80042be:	460d      	mov	r5, r1
 80042c0:	462e      	mov	r6, r5
 80042c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80042ca:	f017 0708 	ands.w	r7, r7, #8
 80042ce:	d1f7      	bne.n	80042c0 <_strtol_l.constprop.0+0x20>
 80042d0:	2c2d      	cmp	r4, #45	; 0x2d
 80042d2:	d132      	bne.n	800433a <_strtol_l.constprop.0+0x9a>
 80042d4:	782c      	ldrb	r4, [r5, #0]
 80042d6:	2701      	movs	r7, #1
 80042d8:	1cb5      	adds	r5, r6, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d05b      	beq.n	8004396 <_strtol_l.constprop.0+0xf6>
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d109      	bne.n	80042f6 <_strtol_l.constprop.0+0x56>
 80042e2:	2c30      	cmp	r4, #48	; 0x30
 80042e4:	d107      	bne.n	80042f6 <_strtol_l.constprop.0+0x56>
 80042e6:	782c      	ldrb	r4, [r5, #0]
 80042e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80042ec:	2c58      	cmp	r4, #88	; 0x58
 80042ee:	d14d      	bne.n	800438c <_strtol_l.constprop.0+0xec>
 80042f0:	786c      	ldrb	r4, [r5, #1]
 80042f2:	2310      	movs	r3, #16
 80042f4:	3502      	adds	r5, #2
 80042f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80042fa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80042fe:	f04f 0c00 	mov.w	ip, #0
 8004302:	fbb8 f9f3 	udiv	r9, r8, r3
 8004306:	4666      	mov	r6, ip
 8004308:	fb03 8a19 	mls	sl, r3, r9, r8
 800430c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004310:	f1be 0f09 	cmp.w	lr, #9
 8004314:	d816      	bhi.n	8004344 <_strtol_l.constprop.0+0xa4>
 8004316:	4674      	mov	r4, lr
 8004318:	42a3      	cmp	r3, r4
 800431a:	dd24      	ble.n	8004366 <_strtol_l.constprop.0+0xc6>
 800431c:	f1bc 0f00 	cmp.w	ip, #0
 8004320:	db1e      	blt.n	8004360 <_strtol_l.constprop.0+0xc0>
 8004322:	45b1      	cmp	r9, r6
 8004324:	d31c      	bcc.n	8004360 <_strtol_l.constprop.0+0xc0>
 8004326:	d101      	bne.n	800432c <_strtol_l.constprop.0+0x8c>
 8004328:	45a2      	cmp	sl, r4
 800432a:	db19      	blt.n	8004360 <_strtol_l.constprop.0+0xc0>
 800432c:	fb06 4603 	mla	r6, r6, r3, r4
 8004330:	f04f 0c01 	mov.w	ip, #1
 8004334:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004338:	e7e8      	b.n	800430c <_strtol_l.constprop.0+0x6c>
 800433a:	2c2b      	cmp	r4, #43	; 0x2b
 800433c:	bf04      	itt	eq
 800433e:	782c      	ldrbeq	r4, [r5, #0]
 8004340:	1cb5      	addeq	r5, r6, #2
 8004342:	e7ca      	b.n	80042da <_strtol_l.constprop.0+0x3a>
 8004344:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004348:	f1be 0f19 	cmp.w	lr, #25
 800434c:	d801      	bhi.n	8004352 <_strtol_l.constprop.0+0xb2>
 800434e:	3c37      	subs	r4, #55	; 0x37
 8004350:	e7e2      	b.n	8004318 <_strtol_l.constprop.0+0x78>
 8004352:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004356:	f1be 0f19 	cmp.w	lr, #25
 800435a:	d804      	bhi.n	8004366 <_strtol_l.constprop.0+0xc6>
 800435c:	3c57      	subs	r4, #87	; 0x57
 800435e:	e7db      	b.n	8004318 <_strtol_l.constprop.0+0x78>
 8004360:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004364:	e7e6      	b.n	8004334 <_strtol_l.constprop.0+0x94>
 8004366:	f1bc 0f00 	cmp.w	ip, #0
 800436a:	da05      	bge.n	8004378 <_strtol_l.constprop.0+0xd8>
 800436c:	2322      	movs	r3, #34	; 0x22
 800436e:	6003      	str	r3, [r0, #0]
 8004370:	4646      	mov	r6, r8
 8004372:	b942      	cbnz	r2, 8004386 <_strtol_l.constprop.0+0xe6>
 8004374:	4630      	mov	r0, r6
 8004376:	e79e      	b.n	80042b6 <_strtol_l.constprop.0+0x16>
 8004378:	b107      	cbz	r7, 800437c <_strtol_l.constprop.0+0xdc>
 800437a:	4276      	negs	r6, r6
 800437c:	2a00      	cmp	r2, #0
 800437e:	d0f9      	beq.n	8004374 <_strtol_l.constprop.0+0xd4>
 8004380:	f1bc 0f00 	cmp.w	ip, #0
 8004384:	d000      	beq.n	8004388 <_strtol_l.constprop.0+0xe8>
 8004386:	1e69      	subs	r1, r5, #1
 8004388:	6011      	str	r1, [r2, #0]
 800438a:	e7f3      	b.n	8004374 <_strtol_l.constprop.0+0xd4>
 800438c:	2430      	movs	r4, #48	; 0x30
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1b1      	bne.n	80042f6 <_strtol_l.constprop.0+0x56>
 8004392:	2308      	movs	r3, #8
 8004394:	e7af      	b.n	80042f6 <_strtol_l.constprop.0+0x56>
 8004396:	2c30      	cmp	r4, #48	; 0x30
 8004398:	d0a5      	beq.n	80042e6 <_strtol_l.constprop.0+0x46>
 800439a:	230a      	movs	r3, #10
 800439c:	e7ab      	b.n	80042f6 <_strtol_l.constprop.0+0x56>
 800439e:	bf00      	nop
 80043a0:	08004e01 	.word	0x08004e01

080043a4 <strtol>:
 80043a4:	4613      	mov	r3, r2
 80043a6:	460a      	mov	r2, r1
 80043a8:	4601      	mov	r1, r0
 80043aa:	4802      	ldr	r0, [pc, #8]	; (80043b4 <strtol+0x10>)
 80043ac:	6800      	ldr	r0, [r0, #0]
 80043ae:	f7ff bf77 	b.w	80042a0 <_strtol_l.constprop.0>
 80043b2:	bf00      	nop
 80043b4:	200001c0 	.word	0x200001c0

080043b8 <__ssputs_r>:
 80043b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043bc:	688e      	ldr	r6, [r1, #8]
 80043be:	429e      	cmp	r6, r3
 80043c0:	4682      	mov	sl, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	4690      	mov	r8, r2
 80043c6:	461f      	mov	r7, r3
 80043c8:	d838      	bhi.n	800443c <__ssputs_r+0x84>
 80043ca:	898a      	ldrh	r2, [r1, #12]
 80043cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043d0:	d032      	beq.n	8004438 <__ssputs_r+0x80>
 80043d2:	6825      	ldr	r5, [r4, #0]
 80043d4:	6909      	ldr	r1, [r1, #16]
 80043d6:	eba5 0901 	sub.w	r9, r5, r1
 80043da:	6965      	ldr	r5, [r4, #20]
 80043dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043e4:	3301      	adds	r3, #1
 80043e6:	444b      	add	r3, r9
 80043e8:	106d      	asrs	r5, r5, #1
 80043ea:	429d      	cmp	r5, r3
 80043ec:	bf38      	it	cc
 80043ee:	461d      	movcc	r5, r3
 80043f0:	0553      	lsls	r3, r2, #21
 80043f2:	d531      	bpl.n	8004458 <__ssputs_r+0xa0>
 80043f4:	4629      	mov	r1, r5
 80043f6:	f000 fb63 	bl	8004ac0 <_malloc_r>
 80043fa:	4606      	mov	r6, r0
 80043fc:	b950      	cbnz	r0, 8004414 <__ssputs_r+0x5c>
 80043fe:	230c      	movs	r3, #12
 8004400:	f8ca 3000 	str.w	r3, [sl]
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800440a:	81a3      	strh	r3, [r4, #12]
 800440c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004414:	6921      	ldr	r1, [r4, #16]
 8004416:	464a      	mov	r2, r9
 8004418:	f000 fabe 	bl	8004998 <memcpy>
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004426:	81a3      	strh	r3, [r4, #12]
 8004428:	6126      	str	r6, [r4, #16]
 800442a:	6165      	str	r5, [r4, #20]
 800442c:	444e      	add	r6, r9
 800442e:	eba5 0509 	sub.w	r5, r5, r9
 8004432:	6026      	str	r6, [r4, #0]
 8004434:	60a5      	str	r5, [r4, #8]
 8004436:	463e      	mov	r6, r7
 8004438:	42be      	cmp	r6, r7
 800443a:	d900      	bls.n	800443e <__ssputs_r+0x86>
 800443c:	463e      	mov	r6, r7
 800443e:	6820      	ldr	r0, [r4, #0]
 8004440:	4632      	mov	r2, r6
 8004442:	4641      	mov	r1, r8
 8004444:	f000 fab6 	bl	80049b4 <memmove>
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	1b9b      	subs	r3, r3, r6
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	4433      	add	r3, r6
 8004452:	6023      	str	r3, [r4, #0]
 8004454:	2000      	movs	r0, #0
 8004456:	e7db      	b.n	8004410 <__ssputs_r+0x58>
 8004458:	462a      	mov	r2, r5
 800445a:	f000 fba5 	bl	8004ba8 <_realloc_r>
 800445e:	4606      	mov	r6, r0
 8004460:	2800      	cmp	r0, #0
 8004462:	d1e1      	bne.n	8004428 <__ssputs_r+0x70>
 8004464:	6921      	ldr	r1, [r4, #16]
 8004466:	4650      	mov	r0, sl
 8004468:	f000 fabe 	bl	80049e8 <_free_r>
 800446c:	e7c7      	b.n	80043fe <__ssputs_r+0x46>
	...

08004470 <_svfiprintf_r>:
 8004470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	4698      	mov	r8, r3
 8004476:	898b      	ldrh	r3, [r1, #12]
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	b09d      	sub	sp, #116	; 0x74
 800447c:	4607      	mov	r7, r0
 800447e:	460d      	mov	r5, r1
 8004480:	4614      	mov	r4, r2
 8004482:	d50e      	bpl.n	80044a2 <_svfiprintf_r+0x32>
 8004484:	690b      	ldr	r3, [r1, #16]
 8004486:	b963      	cbnz	r3, 80044a2 <_svfiprintf_r+0x32>
 8004488:	2140      	movs	r1, #64	; 0x40
 800448a:	f000 fb19 	bl	8004ac0 <_malloc_r>
 800448e:	6028      	str	r0, [r5, #0]
 8004490:	6128      	str	r0, [r5, #16]
 8004492:	b920      	cbnz	r0, 800449e <_svfiprintf_r+0x2e>
 8004494:	230c      	movs	r3, #12
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800449c:	e0d1      	b.n	8004642 <_svfiprintf_r+0x1d2>
 800449e:	2340      	movs	r3, #64	; 0x40
 80044a0:	616b      	str	r3, [r5, #20]
 80044a2:	2300      	movs	r3, #0
 80044a4:	9309      	str	r3, [sp, #36]	; 0x24
 80044a6:	2320      	movs	r3, #32
 80044a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80044b0:	2330      	movs	r3, #48	; 0x30
 80044b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800465c <_svfiprintf_r+0x1ec>
 80044b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044ba:	f04f 0901 	mov.w	r9, #1
 80044be:	4623      	mov	r3, r4
 80044c0:	469a      	mov	sl, r3
 80044c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044c6:	b10a      	cbz	r2, 80044cc <_svfiprintf_r+0x5c>
 80044c8:	2a25      	cmp	r2, #37	; 0x25
 80044ca:	d1f9      	bne.n	80044c0 <_svfiprintf_r+0x50>
 80044cc:	ebba 0b04 	subs.w	fp, sl, r4
 80044d0:	d00b      	beq.n	80044ea <_svfiprintf_r+0x7a>
 80044d2:	465b      	mov	r3, fp
 80044d4:	4622      	mov	r2, r4
 80044d6:	4629      	mov	r1, r5
 80044d8:	4638      	mov	r0, r7
 80044da:	f7ff ff6d 	bl	80043b8 <__ssputs_r>
 80044de:	3001      	adds	r0, #1
 80044e0:	f000 80aa 	beq.w	8004638 <_svfiprintf_r+0x1c8>
 80044e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044e6:	445a      	add	r2, fp
 80044e8:	9209      	str	r2, [sp, #36]	; 0x24
 80044ea:	f89a 3000 	ldrb.w	r3, [sl]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80a2 	beq.w	8004638 <_svfiprintf_r+0x1c8>
 80044f4:	2300      	movs	r3, #0
 80044f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044fe:	f10a 0a01 	add.w	sl, sl, #1
 8004502:	9304      	str	r3, [sp, #16]
 8004504:	9307      	str	r3, [sp, #28]
 8004506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800450a:	931a      	str	r3, [sp, #104]	; 0x68
 800450c:	4654      	mov	r4, sl
 800450e:	2205      	movs	r2, #5
 8004510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004514:	4851      	ldr	r0, [pc, #324]	; (800465c <_svfiprintf_r+0x1ec>)
 8004516:	f7fb fe73 	bl	8000200 <memchr>
 800451a:	9a04      	ldr	r2, [sp, #16]
 800451c:	b9d8      	cbnz	r0, 8004556 <_svfiprintf_r+0xe6>
 800451e:	06d0      	lsls	r0, r2, #27
 8004520:	bf44      	itt	mi
 8004522:	2320      	movmi	r3, #32
 8004524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004528:	0711      	lsls	r1, r2, #28
 800452a:	bf44      	itt	mi
 800452c:	232b      	movmi	r3, #43	; 0x2b
 800452e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004532:	f89a 3000 	ldrb.w	r3, [sl]
 8004536:	2b2a      	cmp	r3, #42	; 0x2a
 8004538:	d015      	beq.n	8004566 <_svfiprintf_r+0xf6>
 800453a:	9a07      	ldr	r2, [sp, #28]
 800453c:	4654      	mov	r4, sl
 800453e:	2000      	movs	r0, #0
 8004540:	f04f 0c0a 	mov.w	ip, #10
 8004544:	4621      	mov	r1, r4
 8004546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800454a:	3b30      	subs	r3, #48	; 0x30
 800454c:	2b09      	cmp	r3, #9
 800454e:	d94e      	bls.n	80045ee <_svfiprintf_r+0x17e>
 8004550:	b1b0      	cbz	r0, 8004580 <_svfiprintf_r+0x110>
 8004552:	9207      	str	r2, [sp, #28]
 8004554:	e014      	b.n	8004580 <_svfiprintf_r+0x110>
 8004556:	eba0 0308 	sub.w	r3, r0, r8
 800455a:	fa09 f303 	lsl.w	r3, r9, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	9304      	str	r3, [sp, #16]
 8004562:	46a2      	mov	sl, r4
 8004564:	e7d2      	b.n	800450c <_svfiprintf_r+0x9c>
 8004566:	9b03      	ldr	r3, [sp, #12]
 8004568:	1d19      	adds	r1, r3, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	9103      	str	r1, [sp, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	bfbb      	ittet	lt
 8004572:	425b      	neglt	r3, r3
 8004574:	f042 0202 	orrlt.w	r2, r2, #2
 8004578:	9307      	strge	r3, [sp, #28]
 800457a:	9307      	strlt	r3, [sp, #28]
 800457c:	bfb8      	it	lt
 800457e:	9204      	strlt	r2, [sp, #16]
 8004580:	7823      	ldrb	r3, [r4, #0]
 8004582:	2b2e      	cmp	r3, #46	; 0x2e
 8004584:	d10c      	bne.n	80045a0 <_svfiprintf_r+0x130>
 8004586:	7863      	ldrb	r3, [r4, #1]
 8004588:	2b2a      	cmp	r3, #42	; 0x2a
 800458a:	d135      	bne.n	80045f8 <_svfiprintf_r+0x188>
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	1d1a      	adds	r2, r3, #4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	9203      	str	r2, [sp, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	bfb8      	it	lt
 8004598:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800459c:	3402      	adds	r4, #2
 800459e:	9305      	str	r3, [sp, #20]
 80045a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800466c <_svfiprintf_r+0x1fc>
 80045a4:	7821      	ldrb	r1, [r4, #0]
 80045a6:	2203      	movs	r2, #3
 80045a8:	4650      	mov	r0, sl
 80045aa:	f7fb fe29 	bl	8000200 <memchr>
 80045ae:	b140      	cbz	r0, 80045c2 <_svfiprintf_r+0x152>
 80045b0:	2340      	movs	r3, #64	; 0x40
 80045b2:	eba0 000a 	sub.w	r0, r0, sl
 80045b6:	fa03 f000 	lsl.w	r0, r3, r0
 80045ba:	9b04      	ldr	r3, [sp, #16]
 80045bc:	4303      	orrs	r3, r0
 80045be:	3401      	adds	r4, #1
 80045c0:	9304      	str	r3, [sp, #16]
 80045c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c6:	4826      	ldr	r0, [pc, #152]	; (8004660 <_svfiprintf_r+0x1f0>)
 80045c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045cc:	2206      	movs	r2, #6
 80045ce:	f7fb fe17 	bl	8000200 <memchr>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d038      	beq.n	8004648 <_svfiprintf_r+0x1d8>
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <_svfiprintf_r+0x1f4>)
 80045d8:	bb1b      	cbnz	r3, 8004622 <_svfiprintf_r+0x1b2>
 80045da:	9b03      	ldr	r3, [sp, #12]
 80045dc:	3307      	adds	r3, #7
 80045de:	f023 0307 	bic.w	r3, r3, #7
 80045e2:	3308      	adds	r3, #8
 80045e4:	9303      	str	r3, [sp, #12]
 80045e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e8:	4433      	add	r3, r6
 80045ea:	9309      	str	r3, [sp, #36]	; 0x24
 80045ec:	e767      	b.n	80044be <_svfiprintf_r+0x4e>
 80045ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80045f2:	460c      	mov	r4, r1
 80045f4:	2001      	movs	r0, #1
 80045f6:	e7a5      	b.n	8004544 <_svfiprintf_r+0xd4>
 80045f8:	2300      	movs	r3, #0
 80045fa:	3401      	adds	r4, #1
 80045fc:	9305      	str	r3, [sp, #20]
 80045fe:	4619      	mov	r1, r3
 8004600:	f04f 0c0a 	mov.w	ip, #10
 8004604:	4620      	mov	r0, r4
 8004606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800460a:	3a30      	subs	r2, #48	; 0x30
 800460c:	2a09      	cmp	r2, #9
 800460e:	d903      	bls.n	8004618 <_svfiprintf_r+0x1a8>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0c5      	beq.n	80045a0 <_svfiprintf_r+0x130>
 8004614:	9105      	str	r1, [sp, #20]
 8004616:	e7c3      	b.n	80045a0 <_svfiprintf_r+0x130>
 8004618:	fb0c 2101 	mla	r1, ip, r1, r2
 800461c:	4604      	mov	r4, r0
 800461e:	2301      	movs	r3, #1
 8004620:	e7f0      	b.n	8004604 <_svfiprintf_r+0x194>
 8004622:	ab03      	add	r3, sp, #12
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	462a      	mov	r2, r5
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <_svfiprintf_r+0x1f8>)
 800462a:	a904      	add	r1, sp, #16
 800462c:	4638      	mov	r0, r7
 800462e:	f3af 8000 	nop.w
 8004632:	1c42      	adds	r2, r0, #1
 8004634:	4606      	mov	r6, r0
 8004636:	d1d6      	bne.n	80045e6 <_svfiprintf_r+0x176>
 8004638:	89ab      	ldrh	r3, [r5, #12]
 800463a:	065b      	lsls	r3, r3, #25
 800463c:	f53f af2c 	bmi.w	8004498 <_svfiprintf_r+0x28>
 8004640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004642:	b01d      	add	sp, #116	; 0x74
 8004644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004648:	ab03      	add	r3, sp, #12
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	462a      	mov	r2, r5
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <_svfiprintf_r+0x1f8>)
 8004650:	a904      	add	r1, sp, #16
 8004652:	4638      	mov	r0, r7
 8004654:	f000 f87a 	bl	800474c <_printf_i>
 8004658:	e7eb      	b.n	8004632 <_svfiprintf_r+0x1c2>
 800465a:	bf00      	nop
 800465c:	08004f01 	.word	0x08004f01
 8004660:	08004f0b 	.word	0x08004f0b
 8004664:	00000000 	.word	0x00000000
 8004668:	080043b9 	.word	0x080043b9
 800466c:	08004f07 	.word	0x08004f07

08004670 <_printf_common>:
 8004670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004674:	4616      	mov	r6, r2
 8004676:	4699      	mov	r9, r3
 8004678:	688a      	ldr	r2, [r1, #8]
 800467a:	690b      	ldr	r3, [r1, #16]
 800467c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004680:	4293      	cmp	r3, r2
 8004682:	bfb8      	it	lt
 8004684:	4613      	movlt	r3, r2
 8004686:	6033      	str	r3, [r6, #0]
 8004688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800468c:	4607      	mov	r7, r0
 800468e:	460c      	mov	r4, r1
 8004690:	b10a      	cbz	r2, 8004696 <_printf_common+0x26>
 8004692:	3301      	adds	r3, #1
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	0699      	lsls	r1, r3, #26
 800469a:	bf42      	ittt	mi
 800469c:	6833      	ldrmi	r3, [r6, #0]
 800469e:	3302      	addmi	r3, #2
 80046a0:	6033      	strmi	r3, [r6, #0]
 80046a2:	6825      	ldr	r5, [r4, #0]
 80046a4:	f015 0506 	ands.w	r5, r5, #6
 80046a8:	d106      	bne.n	80046b8 <_printf_common+0x48>
 80046aa:	f104 0a19 	add.w	sl, r4, #25
 80046ae:	68e3      	ldr	r3, [r4, #12]
 80046b0:	6832      	ldr	r2, [r6, #0]
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	42ab      	cmp	r3, r5
 80046b6:	dc26      	bgt.n	8004706 <_printf_common+0x96>
 80046b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046bc:	1e13      	subs	r3, r2, #0
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	bf18      	it	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	0692      	lsls	r2, r2, #26
 80046c6:	d42b      	bmi.n	8004720 <_printf_common+0xb0>
 80046c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046cc:	4649      	mov	r1, r9
 80046ce:	4638      	mov	r0, r7
 80046d0:	47c0      	blx	r8
 80046d2:	3001      	adds	r0, #1
 80046d4:	d01e      	beq.n	8004714 <_printf_common+0xa4>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	68e5      	ldr	r5, [r4, #12]
 80046da:	6832      	ldr	r2, [r6, #0]
 80046dc:	f003 0306 	and.w	r3, r3, #6
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	bf08      	it	eq
 80046e4:	1aad      	subeq	r5, r5, r2
 80046e6:	68a3      	ldr	r3, [r4, #8]
 80046e8:	6922      	ldr	r2, [r4, #16]
 80046ea:	bf0c      	ite	eq
 80046ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f0:	2500      	movne	r5, #0
 80046f2:	4293      	cmp	r3, r2
 80046f4:	bfc4      	itt	gt
 80046f6:	1a9b      	subgt	r3, r3, r2
 80046f8:	18ed      	addgt	r5, r5, r3
 80046fa:	2600      	movs	r6, #0
 80046fc:	341a      	adds	r4, #26
 80046fe:	42b5      	cmp	r5, r6
 8004700:	d11a      	bne.n	8004738 <_printf_common+0xc8>
 8004702:	2000      	movs	r0, #0
 8004704:	e008      	b.n	8004718 <_printf_common+0xa8>
 8004706:	2301      	movs	r3, #1
 8004708:	4652      	mov	r2, sl
 800470a:	4649      	mov	r1, r9
 800470c:	4638      	mov	r0, r7
 800470e:	47c0      	blx	r8
 8004710:	3001      	adds	r0, #1
 8004712:	d103      	bne.n	800471c <_printf_common+0xac>
 8004714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471c:	3501      	adds	r5, #1
 800471e:	e7c6      	b.n	80046ae <_printf_common+0x3e>
 8004720:	18e1      	adds	r1, r4, r3
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	2030      	movs	r0, #48	; 0x30
 8004726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800472a:	4422      	add	r2, r4
 800472c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004734:	3302      	adds	r3, #2
 8004736:	e7c7      	b.n	80046c8 <_printf_common+0x58>
 8004738:	2301      	movs	r3, #1
 800473a:	4622      	mov	r2, r4
 800473c:	4649      	mov	r1, r9
 800473e:	4638      	mov	r0, r7
 8004740:	47c0      	blx	r8
 8004742:	3001      	adds	r0, #1
 8004744:	d0e6      	beq.n	8004714 <_printf_common+0xa4>
 8004746:	3601      	adds	r6, #1
 8004748:	e7d9      	b.n	80046fe <_printf_common+0x8e>
	...

0800474c <_printf_i>:
 800474c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004750:	7e0f      	ldrb	r7, [r1, #24]
 8004752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004754:	2f78      	cmp	r7, #120	; 0x78
 8004756:	4691      	mov	r9, r2
 8004758:	4680      	mov	r8, r0
 800475a:	460c      	mov	r4, r1
 800475c:	469a      	mov	sl, r3
 800475e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004762:	d807      	bhi.n	8004774 <_printf_i+0x28>
 8004764:	2f62      	cmp	r7, #98	; 0x62
 8004766:	d80a      	bhi.n	800477e <_printf_i+0x32>
 8004768:	2f00      	cmp	r7, #0
 800476a:	f000 80d8 	beq.w	800491e <_printf_i+0x1d2>
 800476e:	2f58      	cmp	r7, #88	; 0x58
 8004770:	f000 80a3 	beq.w	80048ba <_printf_i+0x16e>
 8004774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800477c:	e03a      	b.n	80047f4 <_printf_i+0xa8>
 800477e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004782:	2b15      	cmp	r3, #21
 8004784:	d8f6      	bhi.n	8004774 <_printf_i+0x28>
 8004786:	a101      	add	r1, pc, #4	; (adr r1, 800478c <_printf_i+0x40>)
 8004788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800478c:	080047e5 	.word	0x080047e5
 8004790:	080047f9 	.word	0x080047f9
 8004794:	08004775 	.word	0x08004775
 8004798:	08004775 	.word	0x08004775
 800479c:	08004775 	.word	0x08004775
 80047a0:	08004775 	.word	0x08004775
 80047a4:	080047f9 	.word	0x080047f9
 80047a8:	08004775 	.word	0x08004775
 80047ac:	08004775 	.word	0x08004775
 80047b0:	08004775 	.word	0x08004775
 80047b4:	08004775 	.word	0x08004775
 80047b8:	08004905 	.word	0x08004905
 80047bc:	08004829 	.word	0x08004829
 80047c0:	080048e7 	.word	0x080048e7
 80047c4:	08004775 	.word	0x08004775
 80047c8:	08004775 	.word	0x08004775
 80047cc:	08004927 	.word	0x08004927
 80047d0:	08004775 	.word	0x08004775
 80047d4:	08004829 	.word	0x08004829
 80047d8:	08004775 	.word	0x08004775
 80047dc:	08004775 	.word	0x08004775
 80047e0:	080048ef 	.word	0x080048ef
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	1d1a      	adds	r2, r3, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	602a      	str	r2, [r5, #0]
 80047ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0a3      	b.n	8004940 <_printf_i+0x1f4>
 80047f8:	6820      	ldr	r0, [r4, #0]
 80047fa:	6829      	ldr	r1, [r5, #0]
 80047fc:	0606      	lsls	r6, r0, #24
 80047fe:	f101 0304 	add.w	r3, r1, #4
 8004802:	d50a      	bpl.n	800481a <_printf_i+0xce>
 8004804:	680e      	ldr	r6, [r1, #0]
 8004806:	602b      	str	r3, [r5, #0]
 8004808:	2e00      	cmp	r6, #0
 800480a:	da03      	bge.n	8004814 <_printf_i+0xc8>
 800480c:	232d      	movs	r3, #45	; 0x2d
 800480e:	4276      	negs	r6, r6
 8004810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004814:	485e      	ldr	r0, [pc, #376]	; (8004990 <_printf_i+0x244>)
 8004816:	230a      	movs	r3, #10
 8004818:	e019      	b.n	800484e <_printf_i+0x102>
 800481a:	680e      	ldr	r6, [r1, #0]
 800481c:	602b      	str	r3, [r5, #0]
 800481e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004822:	bf18      	it	ne
 8004824:	b236      	sxthne	r6, r6
 8004826:	e7ef      	b.n	8004808 <_printf_i+0xbc>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	6820      	ldr	r0, [r4, #0]
 800482c:	1d19      	adds	r1, r3, #4
 800482e:	6029      	str	r1, [r5, #0]
 8004830:	0601      	lsls	r1, r0, #24
 8004832:	d501      	bpl.n	8004838 <_printf_i+0xec>
 8004834:	681e      	ldr	r6, [r3, #0]
 8004836:	e002      	b.n	800483e <_printf_i+0xf2>
 8004838:	0646      	lsls	r6, r0, #25
 800483a:	d5fb      	bpl.n	8004834 <_printf_i+0xe8>
 800483c:	881e      	ldrh	r6, [r3, #0]
 800483e:	4854      	ldr	r0, [pc, #336]	; (8004990 <_printf_i+0x244>)
 8004840:	2f6f      	cmp	r7, #111	; 0x6f
 8004842:	bf0c      	ite	eq
 8004844:	2308      	moveq	r3, #8
 8004846:	230a      	movne	r3, #10
 8004848:	2100      	movs	r1, #0
 800484a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800484e:	6865      	ldr	r5, [r4, #4]
 8004850:	60a5      	str	r5, [r4, #8]
 8004852:	2d00      	cmp	r5, #0
 8004854:	bfa2      	ittt	ge
 8004856:	6821      	ldrge	r1, [r4, #0]
 8004858:	f021 0104 	bicge.w	r1, r1, #4
 800485c:	6021      	strge	r1, [r4, #0]
 800485e:	b90e      	cbnz	r6, 8004864 <_printf_i+0x118>
 8004860:	2d00      	cmp	r5, #0
 8004862:	d04d      	beq.n	8004900 <_printf_i+0x1b4>
 8004864:	4615      	mov	r5, r2
 8004866:	fbb6 f1f3 	udiv	r1, r6, r3
 800486a:	fb03 6711 	mls	r7, r3, r1, r6
 800486e:	5dc7      	ldrb	r7, [r0, r7]
 8004870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004874:	4637      	mov	r7, r6
 8004876:	42bb      	cmp	r3, r7
 8004878:	460e      	mov	r6, r1
 800487a:	d9f4      	bls.n	8004866 <_printf_i+0x11a>
 800487c:	2b08      	cmp	r3, #8
 800487e:	d10b      	bne.n	8004898 <_printf_i+0x14c>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	07de      	lsls	r6, r3, #31
 8004884:	d508      	bpl.n	8004898 <_printf_i+0x14c>
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	6861      	ldr	r1, [r4, #4]
 800488a:	4299      	cmp	r1, r3
 800488c:	bfde      	ittt	le
 800488e:	2330      	movle	r3, #48	; 0x30
 8004890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004894:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004898:	1b52      	subs	r2, r2, r5
 800489a:	6122      	str	r2, [r4, #16]
 800489c:	f8cd a000 	str.w	sl, [sp]
 80048a0:	464b      	mov	r3, r9
 80048a2:	aa03      	add	r2, sp, #12
 80048a4:	4621      	mov	r1, r4
 80048a6:	4640      	mov	r0, r8
 80048a8:	f7ff fee2 	bl	8004670 <_printf_common>
 80048ac:	3001      	adds	r0, #1
 80048ae:	d14c      	bne.n	800494a <_printf_i+0x1fe>
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048b4:	b004      	add	sp, #16
 80048b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ba:	4835      	ldr	r0, [pc, #212]	; (8004990 <_printf_i+0x244>)
 80048bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048c0:	6829      	ldr	r1, [r5, #0]
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80048c8:	6029      	str	r1, [r5, #0]
 80048ca:	061d      	lsls	r5, r3, #24
 80048cc:	d514      	bpl.n	80048f8 <_printf_i+0x1ac>
 80048ce:	07df      	lsls	r7, r3, #31
 80048d0:	bf44      	itt	mi
 80048d2:	f043 0320 	orrmi.w	r3, r3, #32
 80048d6:	6023      	strmi	r3, [r4, #0]
 80048d8:	b91e      	cbnz	r6, 80048e2 <_printf_i+0x196>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	f023 0320 	bic.w	r3, r3, #32
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	2310      	movs	r3, #16
 80048e4:	e7b0      	b.n	8004848 <_printf_i+0xfc>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	f043 0320 	orr.w	r3, r3, #32
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	2378      	movs	r3, #120	; 0x78
 80048f0:	4828      	ldr	r0, [pc, #160]	; (8004994 <_printf_i+0x248>)
 80048f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048f6:	e7e3      	b.n	80048c0 <_printf_i+0x174>
 80048f8:	0659      	lsls	r1, r3, #25
 80048fa:	bf48      	it	mi
 80048fc:	b2b6      	uxthmi	r6, r6
 80048fe:	e7e6      	b.n	80048ce <_printf_i+0x182>
 8004900:	4615      	mov	r5, r2
 8004902:	e7bb      	b.n	800487c <_printf_i+0x130>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	6826      	ldr	r6, [r4, #0]
 8004908:	6961      	ldr	r1, [r4, #20]
 800490a:	1d18      	adds	r0, r3, #4
 800490c:	6028      	str	r0, [r5, #0]
 800490e:	0635      	lsls	r5, r6, #24
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	d501      	bpl.n	8004918 <_printf_i+0x1cc>
 8004914:	6019      	str	r1, [r3, #0]
 8004916:	e002      	b.n	800491e <_printf_i+0x1d2>
 8004918:	0670      	lsls	r0, r6, #25
 800491a:	d5fb      	bpl.n	8004914 <_printf_i+0x1c8>
 800491c:	8019      	strh	r1, [r3, #0]
 800491e:	2300      	movs	r3, #0
 8004920:	6123      	str	r3, [r4, #16]
 8004922:	4615      	mov	r5, r2
 8004924:	e7ba      	b.n	800489c <_printf_i+0x150>
 8004926:	682b      	ldr	r3, [r5, #0]
 8004928:	1d1a      	adds	r2, r3, #4
 800492a:	602a      	str	r2, [r5, #0]
 800492c:	681d      	ldr	r5, [r3, #0]
 800492e:	6862      	ldr	r2, [r4, #4]
 8004930:	2100      	movs	r1, #0
 8004932:	4628      	mov	r0, r5
 8004934:	f7fb fc64 	bl	8000200 <memchr>
 8004938:	b108      	cbz	r0, 800493e <_printf_i+0x1f2>
 800493a:	1b40      	subs	r0, r0, r5
 800493c:	6060      	str	r0, [r4, #4]
 800493e:	6863      	ldr	r3, [r4, #4]
 8004940:	6123      	str	r3, [r4, #16]
 8004942:	2300      	movs	r3, #0
 8004944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004948:	e7a8      	b.n	800489c <_printf_i+0x150>
 800494a:	6923      	ldr	r3, [r4, #16]
 800494c:	462a      	mov	r2, r5
 800494e:	4649      	mov	r1, r9
 8004950:	4640      	mov	r0, r8
 8004952:	47d0      	blx	sl
 8004954:	3001      	adds	r0, #1
 8004956:	d0ab      	beq.n	80048b0 <_printf_i+0x164>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	079b      	lsls	r3, r3, #30
 800495c:	d413      	bmi.n	8004986 <_printf_i+0x23a>
 800495e:	68e0      	ldr	r0, [r4, #12]
 8004960:	9b03      	ldr	r3, [sp, #12]
 8004962:	4298      	cmp	r0, r3
 8004964:	bfb8      	it	lt
 8004966:	4618      	movlt	r0, r3
 8004968:	e7a4      	b.n	80048b4 <_printf_i+0x168>
 800496a:	2301      	movs	r3, #1
 800496c:	4632      	mov	r2, r6
 800496e:	4649      	mov	r1, r9
 8004970:	4640      	mov	r0, r8
 8004972:	47d0      	blx	sl
 8004974:	3001      	adds	r0, #1
 8004976:	d09b      	beq.n	80048b0 <_printf_i+0x164>
 8004978:	3501      	adds	r5, #1
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	9903      	ldr	r1, [sp, #12]
 800497e:	1a5b      	subs	r3, r3, r1
 8004980:	42ab      	cmp	r3, r5
 8004982:	dcf2      	bgt.n	800496a <_printf_i+0x21e>
 8004984:	e7eb      	b.n	800495e <_printf_i+0x212>
 8004986:	2500      	movs	r5, #0
 8004988:	f104 0619 	add.w	r6, r4, #25
 800498c:	e7f5      	b.n	800497a <_printf_i+0x22e>
 800498e:	bf00      	nop
 8004990:	08004f12 	.word	0x08004f12
 8004994:	08004f23 	.word	0x08004f23

08004998 <memcpy>:
 8004998:	440a      	add	r2, r1
 800499a:	4291      	cmp	r1, r2
 800499c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049a0:	d100      	bne.n	80049a4 <memcpy+0xc>
 80049a2:	4770      	bx	lr
 80049a4:	b510      	push	{r4, lr}
 80049a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ae:	4291      	cmp	r1, r2
 80049b0:	d1f9      	bne.n	80049a6 <memcpy+0xe>
 80049b2:	bd10      	pop	{r4, pc}

080049b4 <memmove>:
 80049b4:	4288      	cmp	r0, r1
 80049b6:	b510      	push	{r4, lr}
 80049b8:	eb01 0402 	add.w	r4, r1, r2
 80049bc:	d902      	bls.n	80049c4 <memmove+0x10>
 80049be:	4284      	cmp	r4, r0
 80049c0:	4623      	mov	r3, r4
 80049c2:	d807      	bhi.n	80049d4 <memmove+0x20>
 80049c4:	1e43      	subs	r3, r0, #1
 80049c6:	42a1      	cmp	r1, r4
 80049c8:	d008      	beq.n	80049dc <memmove+0x28>
 80049ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049d2:	e7f8      	b.n	80049c6 <memmove+0x12>
 80049d4:	4402      	add	r2, r0
 80049d6:	4601      	mov	r1, r0
 80049d8:	428a      	cmp	r2, r1
 80049da:	d100      	bne.n	80049de <memmove+0x2a>
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049e6:	e7f7      	b.n	80049d8 <memmove+0x24>

080049e8 <_free_r>:
 80049e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049ea:	2900      	cmp	r1, #0
 80049ec:	d044      	beq.n	8004a78 <_free_r+0x90>
 80049ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f2:	9001      	str	r0, [sp, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f1a1 0404 	sub.w	r4, r1, #4
 80049fa:	bfb8      	it	lt
 80049fc:	18e4      	addlt	r4, r4, r3
 80049fe:	f000 f913 	bl	8004c28 <__malloc_lock>
 8004a02:	4a1e      	ldr	r2, [pc, #120]	; (8004a7c <_free_r+0x94>)
 8004a04:	9801      	ldr	r0, [sp, #4]
 8004a06:	6813      	ldr	r3, [r2, #0]
 8004a08:	b933      	cbnz	r3, 8004a18 <_free_r+0x30>
 8004a0a:	6063      	str	r3, [r4, #4]
 8004a0c:	6014      	str	r4, [r2, #0]
 8004a0e:	b003      	add	sp, #12
 8004a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a14:	f000 b90e 	b.w	8004c34 <__malloc_unlock>
 8004a18:	42a3      	cmp	r3, r4
 8004a1a:	d908      	bls.n	8004a2e <_free_r+0x46>
 8004a1c:	6825      	ldr	r5, [r4, #0]
 8004a1e:	1961      	adds	r1, r4, r5
 8004a20:	428b      	cmp	r3, r1
 8004a22:	bf01      	itttt	eq
 8004a24:	6819      	ldreq	r1, [r3, #0]
 8004a26:	685b      	ldreq	r3, [r3, #4]
 8004a28:	1949      	addeq	r1, r1, r5
 8004a2a:	6021      	streq	r1, [r4, #0]
 8004a2c:	e7ed      	b.n	8004a0a <_free_r+0x22>
 8004a2e:	461a      	mov	r2, r3
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	b10b      	cbz	r3, 8004a38 <_free_r+0x50>
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d9fa      	bls.n	8004a2e <_free_r+0x46>
 8004a38:	6811      	ldr	r1, [r2, #0]
 8004a3a:	1855      	adds	r5, r2, r1
 8004a3c:	42a5      	cmp	r5, r4
 8004a3e:	d10b      	bne.n	8004a58 <_free_r+0x70>
 8004a40:	6824      	ldr	r4, [r4, #0]
 8004a42:	4421      	add	r1, r4
 8004a44:	1854      	adds	r4, r2, r1
 8004a46:	42a3      	cmp	r3, r4
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	d1e0      	bne.n	8004a0e <_free_r+0x26>
 8004a4c:	681c      	ldr	r4, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	6053      	str	r3, [r2, #4]
 8004a52:	4421      	add	r1, r4
 8004a54:	6011      	str	r1, [r2, #0]
 8004a56:	e7da      	b.n	8004a0e <_free_r+0x26>
 8004a58:	d902      	bls.n	8004a60 <_free_r+0x78>
 8004a5a:	230c      	movs	r3, #12
 8004a5c:	6003      	str	r3, [r0, #0]
 8004a5e:	e7d6      	b.n	8004a0e <_free_r+0x26>
 8004a60:	6825      	ldr	r5, [r4, #0]
 8004a62:	1961      	adds	r1, r4, r5
 8004a64:	428b      	cmp	r3, r1
 8004a66:	bf04      	itt	eq
 8004a68:	6819      	ldreq	r1, [r3, #0]
 8004a6a:	685b      	ldreq	r3, [r3, #4]
 8004a6c:	6063      	str	r3, [r4, #4]
 8004a6e:	bf04      	itt	eq
 8004a70:	1949      	addeq	r1, r1, r5
 8004a72:	6021      	streq	r1, [r4, #0]
 8004a74:	6054      	str	r4, [r2, #4]
 8004a76:	e7ca      	b.n	8004a0e <_free_r+0x26>
 8004a78:	b003      	add	sp, #12
 8004a7a:	bd30      	pop	{r4, r5, pc}
 8004a7c:	2000053c 	.word	0x2000053c

08004a80 <sbrk_aligned>:
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	4e0e      	ldr	r6, [pc, #56]	; (8004abc <sbrk_aligned+0x3c>)
 8004a84:	460c      	mov	r4, r1
 8004a86:	6831      	ldr	r1, [r6, #0]
 8004a88:	4605      	mov	r5, r0
 8004a8a:	b911      	cbnz	r1, 8004a92 <sbrk_aligned+0x12>
 8004a8c:	f000 f8bc 	bl	8004c08 <_sbrk_r>
 8004a90:	6030      	str	r0, [r6, #0]
 8004a92:	4621      	mov	r1, r4
 8004a94:	4628      	mov	r0, r5
 8004a96:	f000 f8b7 	bl	8004c08 <_sbrk_r>
 8004a9a:	1c43      	adds	r3, r0, #1
 8004a9c:	d00a      	beq.n	8004ab4 <sbrk_aligned+0x34>
 8004a9e:	1cc4      	adds	r4, r0, #3
 8004aa0:	f024 0403 	bic.w	r4, r4, #3
 8004aa4:	42a0      	cmp	r0, r4
 8004aa6:	d007      	beq.n	8004ab8 <sbrk_aligned+0x38>
 8004aa8:	1a21      	subs	r1, r4, r0
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 f8ac 	bl	8004c08 <_sbrk_r>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d101      	bne.n	8004ab8 <sbrk_aligned+0x38>
 8004ab4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ab8:	4620      	mov	r0, r4
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
 8004abc:	20000540 	.word	0x20000540

08004ac0 <_malloc_r>:
 8004ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac4:	1ccd      	adds	r5, r1, #3
 8004ac6:	f025 0503 	bic.w	r5, r5, #3
 8004aca:	3508      	adds	r5, #8
 8004acc:	2d0c      	cmp	r5, #12
 8004ace:	bf38      	it	cc
 8004ad0:	250c      	movcc	r5, #12
 8004ad2:	2d00      	cmp	r5, #0
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	db01      	blt.n	8004adc <_malloc_r+0x1c>
 8004ad8:	42a9      	cmp	r1, r5
 8004ada:	d905      	bls.n	8004ae8 <_malloc_r+0x28>
 8004adc:	230c      	movs	r3, #12
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	2600      	movs	r6, #0
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae8:	4e2e      	ldr	r6, [pc, #184]	; (8004ba4 <_malloc_r+0xe4>)
 8004aea:	f000 f89d 	bl	8004c28 <__malloc_lock>
 8004aee:	6833      	ldr	r3, [r6, #0]
 8004af0:	461c      	mov	r4, r3
 8004af2:	bb34      	cbnz	r4, 8004b42 <_malloc_r+0x82>
 8004af4:	4629      	mov	r1, r5
 8004af6:	4638      	mov	r0, r7
 8004af8:	f7ff ffc2 	bl	8004a80 <sbrk_aligned>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	4604      	mov	r4, r0
 8004b00:	d14d      	bne.n	8004b9e <_malloc_r+0xde>
 8004b02:	6834      	ldr	r4, [r6, #0]
 8004b04:	4626      	mov	r6, r4
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	d140      	bne.n	8004b8c <_malloc_r+0xcc>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	4631      	mov	r1, r6
 8004b0e:	4638      	mov	r0, r7
 8004b10:	eb04 0803 	add.w	r8, r4, r3
 8004b14:	f000 f878 	bl	8004c08 <_sbrk_r>
 8004b18:	4580      	cmp	r8, r0
 8004b1a:	d13a      	bne.n	8004b92 <_malloc_r+0xd2>
 8004b1c:	6821      	ldr	r1, [r4, #0]
 8004b1e:	3503      	adds	r5, #3
 8004b20:	1a6d      	subs	r5, r5, r1
 8004b22:	f025 0503 	bic.w	r5, r5, #3
 8004b26:	3508      	adds	r5, #8
 8004b28:	2d0c      	cmp	r5, #12
 8004b2a:	bf38      	it	cc
 8004b2c:	250c      	movcc	r5, #12
 8004b2e:	4629      	mov	r1, r5
 8004b30:	4638      	mov	r0, r7
 8004b32:	f7ff ffa5 	bl	8004a80 <sbrk_aligned>
 8004b36:	3001      	adds	r0, #1
 8004b38:	d02b      	beq.n	8004b92 <_malloc_r+0xd2>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	442b      	add	r3, r5
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	e00e      	b.n	8004b60 <_malloc_r+0xa0>
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	1b52      	subs	r2, r2, r5
 8004b46:	d41e      	bmi.n	8004b86 <_malloc_r+0xc6>
 8004b48:	2a0b      	cmp	r2, #11
 8004b4a:	d916      	bls.n	8004b7a <_malloc_r+0xba>
 8004b4c:	1961      	adds	r1, r4, r5
 8004b4e:	42a3      	cmp	r3, r4
 8004b50:	6025      	str	r5, [r4, #0]
 8004b52:	bf18      	it	ne
 8004b54:	6059      	strne	r1, [r3, #4]
 8004b56:	6863      	ldr	r3, [r4, #4]
 8004b58:	bf08      	it	eq
 8004b5a:	6031      	streq	r1, [r6, #0]
 8004b5c:	5162      	str	r2, [r4, r5]
 8004b5e:	604b      	str	r3, [r1, #4]
 8004b60:	4638      	mov	r0, r7
 8004b62:	f104 060b 	add.w	r6, r4, #11
 8004b66:	f000 f865 	bl	8004c34 <__malloc_unlock>
 8004b6a:	f026 0607 	bic.w	r6, r6, #7
 8004b6e:	1d23      	adds	r3, r4, #4
 8004b70:	1af2      	subs	r2, r6, r3
 8004b72:	d0b6      	beq.n	8004ae2 <_malloc_r+0x22>
 8004b74:	1b9b      	subs	r3, r3, r6
 8004b76:	50a3      	str	r3, [r4, r2]
 8004b78:	e7b3      	b.n	8004ae2 <_malloc_r+0x22>
 8004b7a:	6862      	ldr	r2, [r4, #4]
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	bf0c      	ite	eq
 8004b80:	6032      	streq	r2, [r6, #0]
 8004b82:	605a      	strne	r2, [r3, #4]
 8004b84:	e7ec      	b.n	8004b60 <_malloc_r+0xa0>
 8004b86:	4623      	mov	r3, r4
 8004b88:	6864      	ldr	r4, [r4, #4]
 8004b8a:	e7b2      	b.n	8004af2 <_malloc_r+0x32>
 8004b8c:	4634      	mov	r4, r6
 8004b8e:	6876      	ldr	r6, [r6, #4]
 8004b90:	e7b9      	b.n	8004b06 <_malloc_r+0x46>
 8004b92:	230c      	movs	r3, #12
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4638      	mov	r0, r7
 8004b98:	f000 f84c 	bl	8004c34 <__malloc_unlock>
 8004b9c:	e7a1      	b.n	8004ae2 <_malloc_r+0x22>
 8004b9e:	6025      	str	r5, [r4, #0]
 8004ba0:	e7de      	b.n	8004b60 <_malloc_r+0xa0>
 8004ba2:	bf00      	nop
 8004ba4:	2000053c 	.word	0x2000053c

08004ba8 <_realloc_r>:
 8004ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bac:	4680      	mov	r8, r0
 8004bae:	4614      	mov	r4, r2
 8004bb0:	460e      	mov	r6, r1
 8004bb2:	b921      	cbnz	r1, 8004bbe <_realloc_r+0x16>
 8004bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb8:	4611      	mov	r1, r2
 8004bba:	f7ff bf81 	b.w	8004ac0 <_malloc_r>
 8004bbe:	b92a      	cbnz	r2, 8004bcc <_realloc_r+0x24>
 8004bc0:	f7ff ff12 	bl	80049e8 <_free_r>
 8004bc4:	4625      	mov	r5, r4
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bcc:	f000 f838 	bl	8004c40 <_malloc_usable_size_r>
 8004bd0:	4284      	cmp	r4, r0
 8004bd2:	4607      	mov	r7, r0
 8004bd4:	d802      	bhi.n	8004bdc <_realloc_r+0x34>
 8004bd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bda:	d812      	bhi.n	8004c02 <_realloc_r+0x5a>
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4640      	mov	r0, r8
 8004be0:	f7ff ff6e 	bl	8004ac0 <_malloc_r>
 8004be4:	4605      	mov	r5, r0
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d0ed      	beq.n	8004bc6 <_realloc_r+0x1e>
 8004bea:	42bc      	cmp	r4, r7
 8004bec:	4622      	mov	r2, r4
 8004bee:	4631      	mov	r1, r6
 8004bf0:	bf28      	it	cs
 8004bf2:	463a      	movcs	r2, r7
 8004bf4:	f7ff fed0 	bl	8004998 <memcpy>
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	f7ff fef4 	bl	80049e8 <_free_r>
 8004c00:	e7e1      	b.n	8004bc6 <_realloc_r+0x1e>
 8004c02:	4635      	mov	r5, r6
 8004c04:	e7df      	b.n	8004bc6 <_realloc_r+0x1e>
	...

08004c08 <_sbrk_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4d06      	ldr	r5, [pc, #24]	; (8004c24 <_sbrk_r+0x1c>)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4604      	mov	r4, r0
 8004c10:	4608      	mov	r0, r1
 8004c12:	602b      	str	r3, [r5, #0]
 8004c14:	f7fb ff94 	bl	8000b40 <_sbrk>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_sbrk_r+0x1a>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_sbrk_r+0x1a>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20000544 	.word	0x20000544

08004c28 <__malloc_lock>:
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <__malloc_lock+0x8>)
 8004c2a:	f000 b811 	b.w	8004c50 <__retarget_lock_acquire_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000548 	.word	0x20000548

08004c34 <__malloc_unlock>:
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <__malloc_unlock+0x8>)
 8004c36:	f000 b80c 	b.w	8004c52 <__retarget_lock_release_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	20000548 	.word	0x20000548

08004c40 <_malloc_usable_size_r>:
 8004c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c44:	1f18      	subs	r0, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bfbc      	itt	lt
 8004c4a:	580b      	ldrlt	r3, [r1, r0]
 8004c4c:	18c0      	addlt	r0, r0, r3
 8004c4e:	4770      	bx	lr

08004c50 <__retarget_lock_acquire_recursive>:
 8004c50:	4770      	bx	lr

08004c52 <__retarget_lock_release_recursive>:
 8004c52:	4770      	bx	lr

08004c54 <_init>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr

08004c60 <_fini>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr
