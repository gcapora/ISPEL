
ISPEL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f14  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a0  080051a0  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080051a0  080051a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051a8  080051a8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080051b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00004800  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004898  20004898  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b82b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003650  00000000  00000000  0003b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  0003ef48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001448  00000000  00000000  000404d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002768a  00000000  00000000  00041920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019511  00000000  00000000  00068faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb9ed  00000000  00000000  000824bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016dea8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e58  00000000  00000000  0016def8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050ac 	.word	0x080050ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	080050ac 	.word	0x080050ac

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <appInit>:


/*------------------------------------------------------------------*/
/* App Initialization */
void appInit( void )
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af02      	add	r7, sp, #8

	/* Print out the name of this Example. */
  	//vPrintString( pcTextForMain );

	/* Task Led thread at priority 1 */
	ptr = &LDX_Config[0];
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <appInit+0xb8>)
 80004fc:	61fb      	str	r3, [r7, #28]
	ret = xTaskCreate( vTaskLed,						/* Pointer to the function thats implement the task. */
 80004fe:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <appInit+0xbc>)
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800050c:	4929      	ldr	r1, [pc, #164]	; (80005b4 <appInit+0xc0>)
 800050e:	482a      	ldr	r0, [pc, #168]	; (80005b8 <appInit+0xc4>)
 8000510:	f003 fb62 	bl	8003bd8 <xTaskCreate>
 8000514:	61b8      	str	r0, [r7, #24]
	                   (void*)ptr,    					/* Pass the ptr as the task parameter. */
					   (tskIDLE_PRIORITY + 1UL),		/* This task will run at priority 1. 		*/
					   &xTaskLedHandle );				/* We are using a variable as task handle.	*/

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d00a      	beq.n	8000532 <appInit+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800051c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000520:	f383 8811 	msr	BASEPRI, r3
 8000524:	f3bf 8f6f 	isb	sy
 8000528:	f3bf 8f4f 	dsb	sy
 800052c:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800052e:	bf00      	nop
 8000530:	e7fe      	b.n	8000530 <appInit+0x3c>

	/* Task Led thread at priority 1 */
	led2 = &LDX_Config[1];
 8000532:	4b22      	ldr	r3, [pc, #136]	; (80005bc <appInit+0xc8>)
 8000534:	617b      	str	r3, [r7, #20]
	ret = xTaskCreate( vTaskLed, "Task Led", (2 * configMINIMAL_STACK_SIZE),
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <appInit+0xbc>)
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2301      	movs	r3, #1
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000544:	491b      	ldr	r1, [pc, #108]	; (80005b4 <appInit+0xc0>)
 8000546:	481c      	ldr	r0, [pc, #112]	; (80005b8 <appInit+0xc4>)
 8000548:	f003 fb46 	bl	8003bd8 <xTaskCreate>
 800054c:	61b8      	str	r0, [r7, #24]
			           (void*)led2, (tskIDLE_PRIORITY + 1UL), &xTaskLedHandle );
	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d00a      	beq.n	800056a <appInit+0x76>
	__asm volatile
 8000554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000558:	f383 8811 	msr	BASEPRI, r3
 800055c:	f3bf 8f6f 	isb	sy
 8000560:	f3bf 8f4f 	dsb	sy
 8000564:	60bb      	str	r3, [r7, #8]
}
 8000566:	bf00      	nop
 8000568:	e7fe      	b.n	8000568 <appInit+0x74>

	/* Task Led thread at priority 1 */
	led3 = &LDX_Config[2];
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <appInit+0xcc>)
 800056c:	613b      	str	r3, [r7, #16]
	ret = xTaskCreate( vTaskLed, "Task Led", (2 * configMINIMAL_STACK_SIZE),
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <appInit+0xbc>)
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2301      	movs	r3, #1
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800057c:	490d      	ldr	r1, [pc, #52]	; (80005b4 <appInit+0xc0>)
 800057e:	480e      	ldr	r0, [pc, #56]	; (80005b8 <appInit+0xc4>)
 8000580:	f003 fb2a 	bl	8003bd8 <xTaskCreate>
 8000584:	61b8      	str	r0, [r7, #24]
			           (void*)led3, (tskIDLE_PRIORITY + 1UL), &xTaskLedHandle );
	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 8000586:	69bb      	ldr	r3, [r7, #24]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d00a      	beq.n	80005a2 <appInit+0xae>
	__asm volatile
 800058c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000590:	f383 8811 	msr	BASEPRI, r3
 8000594:	f3bf 8f6f 	isb	sy
 8000598:	f3bf 8f4f 	dsb	sy
 800059c:	607b      	str	r3, [r7, #4]
}
 800059e:	bf00      	nop
 80005a0:	e7fe      	b.n	80005a0 <appInit+0xac>
	//				   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
	//				   &xTaskButtonHandle );		/* We are using a variable as task handle.	*/

	/* Check the task was created successfully. */
	//configASSERT( ret == pdPASS );
}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000
 80005b0:	200000b4 	.word	0x200000b4
 80005b4:	080050ec 	.word	0x080050ec
 80005b8:	080005c5 	.word	0x080005c5
 80005bc:	2000000c 	.word	0x2000000c
 80005c0:	20000018 	.word	0x20000018

080005c4 <vTaskLed>:
// ------ external functions definition --------------------------------

/*------------------------------------------------------------------*/
/* Task Led thread */
void vTaskLed( void *pvParameters )
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	/*  Declaración e inicialización de variables de la tarea */
	LDX_Config_t * ptr = (LDX_Config_t *)pvParameters;    // Nro de led pasado por argumento
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();       // Tiempo inicial de referencia
 80005d0:	f003 fe16 	bl	8004200 <xTaskGetTickCount>
 80005d4:	4603      	mov	r3, r0
 80005d6:	60bb      	str	r3, [r7, #8]

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Check Led Flag */
		if( ptr->ledFlag == Blinking )
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	79db      	ldrb	r3, [r3, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d113      	bne.n	8000608 <vTaskLed+0x44>
		{
			/* Check, Update and Print Led State */
		   	if( ptr->ledState == GPIO_PIN_RESET )
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	799b      	ldrb	r3, [r3, #6]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d103      	bne.n	80005f0 <vTaskLed+0x2c>
		   	{
		   		ptr->ledState = GPIO_PIN_SET;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	2201      	movs	r2, #1
 80005ec:	719a      	strb	r2, [r3, #6]
 80005ee:	e002      	b.n	80005f6 <vTaskLed+0x32>
            	//vPrintTwoStrings( pcTaskName, pcTextForTask_LDXTOn );
		   	}
	    	else
	    	{
	    		ptr->ledState = GPIO_PIN_RESET;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2200      	movs	r2, #0
 80005f4:	719a      	strb	r2, [r3, #6]
            	//vPrintTwoStrings( pcTaskName, pcTextForTask_LDXTOff );
		   	}
			/* Update HW Led State */
		   	HAL_GPIO_WritePin( ptr->LDX_GPIO_Port, ptr->LDX_Pin, ptr->ledState );
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	8899      	ldrh	r1, [r3, #4]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	799b      	ldrb	r3, [r3, #6]
 8000602:	461a      	mov	r2, r3
 8000604:	f001 fac2 	bl	8001b8c <HAL_GPIO_WritePin>
		}

		/* We want this task to execute exactly every 250 milliseconds. */
		vTaskDelayUntil( &xLastWakeTime, ledTickCntMAX );
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	217d      	movs	r1, #125	; 0x7d
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fc30 	bl	8003e74 <vTaskDelayUntil>
		if( ptr->ledFlag == Blinking )
 8000614:	e7e0      	b.n	80005d8 <vTaskLed+0x14>
	...

08000618 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <vApplicationGetIdleTaskMemory+0x2c>)
 8000628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <vApplicationGetIdleTaskMemory+0x30>)
 800062e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	200000b8 	.word	0x200000b8
 8000648:	2000016c 	.word	0x2000016c

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fc7f 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f823 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f931 	bl	80008c0 <MX_GPIO_Init>
  MX_ETH_Init();
 800065e:	f000 f889 	bl	8000774 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000662:	f000 f8d5 	bl	8000810 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000666:	f000 f8fd 	bl	8000864 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* -------------------------------------------------------------------------------------------
   * Este llamado sirve para codear el programa en otro archivo.
   * Creamos una carpeta App, con sus respectivas subcarpetas.
   * ------------------------------------------------------------------------------------------*/
  appInit();
 800066a:	f7ff ff43 	bl	80004f4 <appInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <main+0x4c>)
 8000670:	1d3c      	adds	r4, r7, #4
 8000672:	461d      	mov	r5, r3
 8000674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f003 f936 	bl	80038f6 <osThreadCreate>
 800068a:	4603      	mov	r3, r0
 800068c:	4a03      	ldr	r2, [pc, #12]	; (800069c <main+0x50>)
 800068e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000690:	f003 f92a 	bl	80038e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x48>
 8000696:	bf00      	nop
 8000698:	08005104 	.word	0x08005104
 800069c:	20000ae4 	.word	0x20000ae4

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 fc32 	bl	8004f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <SystemClock_Config+0xcc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xd0>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000700:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000714:	23a8      	movs	r3, #168	; 0xa8
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fb8b 	bl	8001e40 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 f996 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2105      	movs	r1, #5
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fdec 	bl	8002330 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075e:	f000 f97f 	bl	8000a60 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_ETH_Init+0x84>)
 800077a:	4a20      	ldr	r2, [pc, #128]	; (80007fc <MX_ETH_Init+0x88>)
 800077c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_ETH_Init+0x8c>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <MX_ETH_Init+0x8c>)
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_ETH_Init+0x8c>)
 800078c:	22e1      	movs	r2, #225	; 0xe1
 800078e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_ETH_Init+0x8c>)
 8000792:	2200      	movs	r2, #0
 8000794:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_ETH_Init+0x8c>)
 8000798:	2200      	movs	r2, #0
 800079a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_ETH_Init+0x8c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_ETH_Init+0x84>)
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <MX_ETH_Init+0x8c>)
 80007a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_ETH_Init+0x84>)
 80007aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_ETH_Init+0x84>)
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <MX_ETH_Init+0x90>)
 80007b4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_ETH_Init+0x84>)
 80007b8:	4a13      	ldr	r2, [pc, #76]	; (8000808 <MX_ETH_Init+0x94>)
 80007ba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_ETH_Init+0x84>)
 80007be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007c2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_ETH_Init+0x84>)
 80007c6:	f000 fd0d 	bl	80011e4 <HAL_ETH_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007d0:	f000 f946 	bl	8000a60 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007d4:	2238      	movs	r2, #56	; 0x38
 80007d6:	2100      	movs	r1, #0
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_ETH_Init+0x98>)
 80007da:	f004 fb9d 	bl	8004f18 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_ETH_Init+0x98>)
 80007e0:	2221      	movs	r2, #33	; 0x21
 80007e2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_ETH_Init+0x98>)
 80007e6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007ea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_ETH_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200004e4 	.word	0x200004e4
 80007fc:	40028000 	.word	0x40028000
 8000800:	20000ae8 	.word	0x20000ae8
 8000804:	20000444 	.word	0x20000444
 8000808:	200003a4 	.word	0x200003a4
 800080c:	2000036c 	.word	0x2000036c

08000810 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART3_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART3_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART3_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART3_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART3_UART_Init+0x4c>)
 8000848:	f002 fa72 	bl	8002d30 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f905 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000594 	.word	0x20000594
 8000860:	40004800 	.word	0x40004800

08000864 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800086e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2204      	movs	r2, #4
 8000874:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	2202      	movs	r2, #2
 800087a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000884:	2202      	movs	r2, #2
 8000886:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	2201      	movs	r2, #1
 800088c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2201      	movs	r2, #1
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	f001 f9ad 	bl	8001c06 <HAL_PCD_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f8d5 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200005d8 	.word	0x200005d8

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	4b50      	ldr	r3, [pc, #320]	; (8000a1c <MX_GPIO_Init+0x15c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a4f      	ldr	r2, [pc, #316]	; (8000a1c <MX_GPIO_Init+0x15c>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b4d      	ldr	r3, [pc, #308]	; (8000a1c <MX_GPIO_Init+0x15c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	4b49      	ldr	r3, [pc, #292]	; (8000a1c <MX_GPIO_Init+0x15c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a48      	ldr	r2, [pc, #288]	; (8000a1c <MX_GPIO_Init+0x15c>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b46      	ldr	r3, [pc, #280]	; (8000a1c <MX_GPIO_Init+0x15c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <MX_GPIO_Init+0x15c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a41      	ldr	r2, [pc, #260]	; (8000a1c <MX_GPIO_Init+0x15c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <MX_GPIO_Init+0x15c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b3b      	ldr	r3, [pc, #236]	; (8000a1c <MX_GPIO_Init+0x15c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a3a      	ldr	r2, [pc, #232]	; (8000a1c <MX_GPIO_Init+0x15c>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <MX_GPIO_Init+0x15c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <MX_GPIO_Init+0x15c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a33      	ldr	r2, [pc, #204]	; (8000a1c <MX_GPIO_Init+0x15c>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <MX_GPIO_Init+0x15c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MX_GPIO_Init+0x15c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a2c      	ldr	r2, [pc, #176]	; (8000a1c <MX_GPIO_Init+0x15c>)
 800096c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <MX_GPIO_Init+0x15c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f244 0181 	movw	r1, #16513	; 0x4081
 8000984:	4826      	ldr	r0, [pc, #152]	; (8000a20 <MX_GPIO_Init+0x160>)
 8000986:	f001 f901 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2140      	movs	r1, #64	; 0x40
 800098e:	4825      	ldr	r0, [pc, #148]	; (8000a24 <MX_GPIO_Init+0x164>)
 8000990:	f001 f8fc 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	481f      	ldr	r0, [pc, #124]	; (8000a28 <MX_GPIO_Init+0x168>)
 80009ac:	f000 ff42 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009b0:	f244 0381 	movw	r3, #16513	; 0x4081
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4815      	ldr	r0, [pc, #84]	; (8000a20 <MX_GPIO_Init+0x160>)
 80009ca:	f000 ff33 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ce:	2340      	movs	r3, #64	; 0x40
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	480f      	ldr	r0, [pc, #60]	; (8000a24 <MX_GPIO_Init+0x164>)
 80009e6:	f000 ff25 	bl	8001834 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_GPIO_Init+0x164>)
 80009fe:	f000 ff19 	bl	8001834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2105      	movs	r1, #5
 8000a06:	2028      	movs	r0, #40	; 0x28
 8000a08:	f000 fbc2 	bl	8001190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a0c:	2028      	movs	r0, #40	; 0x28
 8000a0e:	f000 fbdb 	bl	80011c8 <HAL_NVIC_EnableIRQ>

}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40021800 	.word	0x40021800
 8000a28:	40020800 	.word	0x40020800

08000a2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f002 ffaa 	bl	800398e <osDelay>
 8000a3a:	e7fb      	b.n	8000a34 <StartDefaultTask+0x8>

08000a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f000 faa3 	bl	8000f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40001400 	.word	0x40001400

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_MspInit+0x54>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_MspInit+0x54>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	210f      	movs	r1, #15
 8000aae:	f06f 0001 	mvn.w	r0, #1
 8000ab2:	f000 fb6d 	bl	8001190 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a55      	ldr	r2, [pc, #340]	; (8000c38 <HAL_ETH_MspInit+0x174>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	f040 80a4 	bne.w	8000c30 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
 8000aec:	4b53      	ldr	r3, [pc, #332]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a52      	ldr	r2, [pc, #328]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b50      	ldr	r3, [pc, #320]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	4b4c      	ldr	r3, [pc, #304]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	4a4b      	ldr	r2, [pc, #300]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b12:	6313      	str	r3, [r2, #48]	; 0x30
 8000b14:	4b49      	ldr	r3, [pc, #292]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b1c:	61fb      	str	r3, [r7, #28]
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	4b45      	ldr	r3, [pc, #276]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a44      	ldr	r2, [pc, #272]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b42      	ldr	r3, [pc, #264]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4a3d      	ldr	r2, [pc, #244]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4c:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a36      	ldr	r2, [pc, #216]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	6313      	str	r3, [r2, #48]	; 0x30
 8000b84:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <HAL_ETH_MspInit+0x178>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bac:	2332      	movs	r3, #50	; 0x32
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481e      	ldr	r0, [pc, #120]	; (8000c40 <HAL_ETH_MspInit+0x17c>)
 8000bc8:	f000 fe34 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bcc:	2386      	movs	r3, #134	; 0x86
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4817      	ldr	r0, [pc, #92]	; (8000c44 <HAL_ETH_MspInit+0x180>)
 8000be8:	f000 fe24 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <HAL_ETH_MspInit+0x184>)
 8000c0a:	f000 fe13 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4808      	ldr	r0, [pc, #32]	; (8000c4c <HAL_ETH_MspInit+0x188>)
 8000c2c:	f000 fe02 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3738      	adds	r7, #56	; 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40028000 	.word	0x40028000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40021800 	.word	0x40021800

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <HAL_UART_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12c      	bne.n	8000ccc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_UART_MspInit+0x88>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_UART_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000caa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_UART_MspInit+0x8c>)
 8000cc8:	f000 fdb4 	bl	8001834 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020c00 	.word	0x40020c00

08000ce0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d00:	d13f      	bne.n	8000d82 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <HAL_PCD_MspInit+0xac>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a20      	ldr	r2, [pc, #128]	; (8000d8c <HAL_PCD_MspInit+0xac>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <HAL_PCD_MspInit+0xac>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d1e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d30:	230a      	movs	r3, #10
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4815      	ldr	r0, [pc, #84]	; (8000d90 <HAL_PCD_MspInit+0xb0>)
 8000d3c:	f000 fd7a 	bl	8001834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	480e      	ldr	r0, [pc, #56]	; (8000d90 <HAL_PCD_MspInit+0xb0>)
 8000d56:	f000 fd6d 	bl	8001834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_PCD_MspInit+0xac>)
 8000d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <HAL_PCD_MspInit+0xac>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d64:	6353      	str	r3, [r2, #52]	; 0x34
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_PCD_MspInit+0xac>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_PCD_MspInit+0xac>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_PCD_MspInit+0xac>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08e      	sub	sp, #56	; 0x38
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <HAL_InitTick+0xe4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a32      	ldr	r2, [pc, #200]	; (8000e78 <HAL_InitTick+0xe4>)
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <HAL_InitTick+0xe4>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f003 0320 	and.w	r3, r3, #32
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc0:	f107 0210 	add.w	r2, r7, #16
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 fcd0 	bl	8002770 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d103      	bne.n	8000de2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dda:	f001 fca1 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8000dde:	6378      	str	r0, [r7, #52]	; 0x34
 8000de0:	e004      	b.n	8000dec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000de2:	f001 fc9d 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8000de6:	4603      	mov	r3, r0
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dee:	4a23      	ldr	r2, [pc, #140]	; (8000e7c <HAL_InitTick+0xe8>)
 8000df0:	fba2 2303 	umull	r2, r3, r2, r3
 8000df4:	0c9b      	lsrs	r3, r3, #18
 8000df6:	3b01      	subs	r3, #1
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_InitTick+0xec>)
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <HAL_InitTick+0xf0>)
 8000dfe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_InitTick+0xec>)
 8000e02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e06:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_InitTick+0xec>)
 8000e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_InitTick+0xec>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <HAL_InitTick+0xec>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_InitTick+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000e20:	4817      	ldr	r0, [pc, #92]	; (8000e80 <HAL_InitTick+0xec>)
 8000e22:	f001 fcd7 	bl	80027d4 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d11b      	bne.n	8000e6c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <HAL_InitTick+0xec>)
 8000e36:	f001 fd27 	bl	8002888 <HAL_TIM_Base_Start_IT>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d111      	bne.n	8000e6c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e48:	2037      	movs	r0, #55	; 0x37
 8000e4a:	f000 f9bd 	bl	80011c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d808      	bhi.n	8000e66 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	2037      	movs	r0, #55	; 0x37
 8000e5a:	f000 f999 	bl	8001190 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_InitTick+0xf4>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e002      	b.n	8000e6c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3738      	adds	r7, #56	; 0x38
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	431bde83 	.word	0x431bde83
 8000e80:	20000af0 	.word	0x20000af0
 8000e84:	40001400 	.word	0x40001400
 8000e88:	20000028 	.word	0x20000028

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ebc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec0:	f000 fe7e 	bl	8001bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM7_IRQHandler+0x10>)
 8000ece:	f001 fd4b 	bl	8002968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000af0 	.word	0x20000af0

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f003 ffcd 	bl	8004ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fb8b 	bl	800064c <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000f44:	080051b0 	.word	0x080051b0
  ldr r2, =_sbss
 8000f48:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000f4c:	20004898 	.word	0x20004898

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f8fc 	bl	800117a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	200f      	movs	r0, #15
 8000f84:	f7ff ff06 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fd70 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000002c 	.word	0x2000002c
 8000fbc:	20000b38 	.word	0x20000b38

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000b38 	.word	0x20000b38

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000002c 	.word	0x2000002c

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4907      	ldr	r1, [pc, #28]	; (80010bc <__NVIC_EnableIRQ+0x38>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff4c 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a2:	f7ff ff61 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	6978      	ldr	r0, [r7, #20]
 80011ae:	f7ff ffb1 	bl	8001114 <NVIC_EncodePriority>
 80011b2:	4602      	mov	r2, r0
 80011b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff80 	bl	80010c0 <__NVIC_SetPriority>
}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff54 	bl	8001084 <__NVIC_EnableIRQ>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e06c      	b.n	80012d0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d106      	bne.n	800120e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2223      	movs	r2, #35	; 0x23
 8001204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff fc5b 	bl	8000ac4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <HAL_ETH_Init+0xf4>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a30      	ldr	r2, [pc, #192]	; (80012d8 <HAL_ETH_Init+0xf4>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <HAL_ETH_Init+0xf4>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <HAL_ETH_Init+0xf8>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a2b      	ldr	r2, [pc, #172]	; (80012dc <HAL_ETH_Init+0xf8>)
 8001230:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001234:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <HAL_ETH_Init+0xf8>)
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	4927      	ldr	r1, [pc, #156]	; (80012dc <HAL_ETH_Init+0xf8>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <HAL_ETH_Init+0xf8>)
 8001246:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800125e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff feae 	bl	8000fc0 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001266:	e011      	b.n	800128c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001268:	f7ff feaa 	bl	8000fc0 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001276:	d909      	bls.n	800128c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2204      	movs	r2, #4
 800127c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	22e0      	movs	r2, #224	; 0xe0
 8001284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e021      	b.n	80012d0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1e4      	bne.n	8001268 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f958 	bl	8001554 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f9ff 	bl	80016a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fa55 	bl	800175a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	461a      	mov	r2, r3
 80012b6:	2100      	movs	r1, #0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f9bd 	bl	8001638 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2210      	movs	r2, #16
 80012ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800

080012e0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	4b51      	ldr	r3, [pc, #324]	; (800143c <ETH_SetMACConfig+0x15c>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	7c1b      	ldrb	r3, [r3, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <ETH_SetMACConfig+0x28>
 8001302:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001306:	e000      	b.n	800130a <ETH_SetMACConfig+0x2a>
 8001308:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	7c5b      	ldrb	r3, [r3, #17]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <ETH_SetMACConfig+0x38>
 8001312:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001316:	e000      	b.n	800131a <ETH_SetMACConfig+0x3a>
 8001318:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800131a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001320:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	7fdb      	ldrb	r3, [r3, #31]
 8001326:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001328:	431a      	orrs	r2, r3
                        macconf->Speed |
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800132e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	7f92      	ldrb	r2, [r2, #30]
 8001334:	2a00      	cmp	r2, #0
 8001336:	d102      	bne.n	800133e <ETH_SetMACConfig+0x5e>
 8001338:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800133c:	e000      	b.n	8001340 <ETH_SetMACConfig+0x60>
 800133e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001340:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	7f1b      	ldrb	r3, [r3, #28]
 8001346:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001348:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800134e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001356:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800135e:	2a00      	cmp	r2, #0
 8001360:	d102      	bne.n	8001368 <ETH_SetMACConfig+0x88>
 8001362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001366:	e000      	b.n	800136a <ETH_SetMACConfig+0x8a>
 8001368:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800136a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	7bdb      	ldrb	r3, [r3, #15]
 8001370:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001372:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001378:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001380:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001382:	4313      	orrs	r3, r2
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff fe1c 	bl	8000fd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013b6:	4013      	ands	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013be:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	d101      	bne.n	80013ce <ETH_SetMACConfig+0xee>
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	e000      	b.n	80013d0 <ETH_SetMACConfig+0xf0>
 80013ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013d0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80013de:	2a01      	cmp	r2, #1
 80013e0:	d101      	bne.n	80013e6 <ETH_SetMACConfig+0x106>
 80013e2:	2208      	movs	r2, #8
 80013e4:	e000      	b.n	80013e8 <ETH_SetMACConfig+0x108>
 80013e6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80013f0:	2a01      	cmp	r2, #1
 80013f2:	d101      	bne.n	80013f8 <ETH_SetMACConfig+0x118>
 80013f4:	2204      	movs	r2, #4
 80013f6:	e000      	b.n	80013fa <ETH_SetMACConfig+0x11a>
 80013f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001402:	2a01      	cmp	r2, #1
 8001404:	d101      	bne.n	800140a <ETH_SetMACConfig+0x12a>
 8001406:	2202      	movs	r2, #2
 8001408:	e000      	b.n	800140c <ETH_SetMACConfig+0x12c>
 800140a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800140c:	4313      	orrs	r3, r2
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff fdd7 	bl	8000fd8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	619a      	str	r2, [r3, #24]
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	ff20810f 	.word	0xff20810f

08001440 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <ETH_SetDMAConfig+0x110>)
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	7b1b      	ldrb	r3, [r3, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d102      	bne.n	800146c <ETH_SetDMAConfig+0x2c>
 8001466:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800146a:	e000      	b.n	800146e <ETH_SetDMAConfig+0x2e>
 800146c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	7b5b      	ldrb	r3, [r3, #13]
 8001472:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001474:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	7f52      	ldrb	r2, [r2, #29]
 800147a:	2a00      	cmp	r2, #0
 800147c:	d102      	bne.n	8001484 <ETH_SetDMAConfig+0x44>
 800147e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001482:	e000      	b.n	8001486 <ETH_SetDMAConfig+0x46>
 8001484:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001486:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	7b9b      	ldrb	r3, [r3, #14]
 800148c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800148e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001494:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	7f1b      	ldrb	r3, [r3, #28]
 800149a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800149c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	7f9b      	ldrb	r3, [r3, #30]
 80014a2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014a4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014b2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014b4:	4313      	orrs	r3, r2
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c4:	461a      	mov	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d6:	2001      	movs	r0, #1
 80014d8:	f7ff fd7e 	bl	8000fd8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e4:	461a      	mov	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	791b      	ldrb	r3, [r3, #4]
 80014ee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014f4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014fa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001500:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001508:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800150a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001512:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001518:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001526:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff fd4f 	bl	8000fd8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	f8de3f23 	.word	0xf8de3f23

08001554 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0a6      	sub	sp, #152	; 0x98
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800155c:	2301      	movs	r3, #1
 800155e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001562:	2301      	movs	r3, #1
 8001564:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001572:	2301      	movs	r3, #1
 8001574:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800157e:	2301      	movs	r3, #1
 8001580:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001590:	2300      	movs	r3, #0
 8001592:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800159a:	2300      	movs	r3, #0
 800159c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ba:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fe86 	bl	80012e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015d8:	2301      	movs	r3, #1
 80015da:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015dc:	2301      	movs	r3, #1
 80015de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001600:	2301      	movs	r3, #1
 8001602:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001608:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800160a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800160e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001614:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001624:	f107 0308 	add.w	r3, r7, #8
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff08 	bl	8001440 <ETH_SetDMAConfig>
}
 8001630:	bf00      	nop
 8001632:	3798      	adds	r7, #152	; 0x98
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3305      	adds	r3, #5
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	3204      	adds	r2, #4
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	4313      	orrs	r3, r2
 8001654:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <ETH_MACAddressConfig+0x68>)
 800165a:	4413      	add	r3, r2
 800165c:	461a      	mov	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3303      	adds	r3, #3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	061a      	lsls	r2, r3, #24
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3302      	adds	r3, #2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3301      	adds	r3, #1
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	4313      	orrs	r3, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	4313      	orrs	r3, r2
 8001684:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <ETH_MACAddressConfig+0x6c>)
 800168a:	4413      	add	r3, r2
 800168c:	461a      	mov	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40028040 	.word	0x40028040
 80016a4:	40028044 	.word	0x40028044

080016a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	e03e      	b.n	8001734 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68d9      	ldr	r1, [r3, #12]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	3206      	adds	r2, #6
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d80c      	bhi.n	8001718 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	461a      	mov	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	e004      	b.n	8001722 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	461a      	mov	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3301      	adds	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d9bd      	bls.n	80016b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174c:	611a      	str	r2, [r3, #16]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e046      	b.n	80017f6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6919      	ldr	r1, [r3, #16]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80017ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017ba:	68b9      	ldr	r1, [r7, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	3212      	adds	r2, #18
 80017c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d80c      	bhi.n	80017e6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6919      	ldr	r1, [r3, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	461a      	mov	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	e004      	b.n	80017f0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3301      	adds	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d9b5      	bls.n	8001768 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001826:	60da      	str	r2, [r3, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e177      	b.n	8001b40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001850:	2201      	movs	r2, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	429a      	cmp	r2, r3
 800186a:	f040 8166 	bne.w	8001b3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d005      	beq.n	8001886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001882:	2b02      	cmp	r3, #2
 8001884:	d130      	bne.n	80018e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 0201 	and.w	r2, r3, #1
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d017      	beq.n	8001924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d123      	bne.n	8001978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	69b9      	ldr	r1, [r7, #24]
 8001974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0203 	and.w	r2, r3, #3
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80c0 	beq.w	8001b3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_GPIO_Init+0x324>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a65      	ldr	r2, [pc, #404]	; (8001b58 <HAL_GPIO_Init+0x324>)
 80019c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b63      	ldr	r3, [pc, #396]	; (8001b58 <HAL_GPIO_Init+0x324>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d6:	4a61      	ldr	r2, [pc, #388]	; (8001b5c <HAL_GPIO_Init+0x328>)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	220f      	movs	r2, #15
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_GPIO_Init+0x32c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d037      	beq.n	8001a72 <HAL_GPIO_Init+0x23e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a57      	ldr	r2, [pc, #348]	; (8001b64 <HAL_GPIO_Init+0x330>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d031      	beq.n	8001a6e <HAL_GPIO_Init+0x23a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a56      	ldr	r2, [pc, #344]	; (8001b68 <HAL_GPIO_Init+0x334>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d02b      	beq.n	8001a6a <HAL_GPIO_Init+0x236>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a55      	ldr	r2, [pc, #340]	; (8001b6c <HAL_GPIO_Init+0x338>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d025      	beq.n	8001a66 <HAL_GPIO_Init+0x232>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a54      	ldr	r2, [pc, #336]	; (8001b70 <HAL_GPIO_Init+0x33c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01f      	beq.n	8001a62 <HAL_GPIO_Init+0x22e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a53      	ldr	r2, [pc, #332]	; (8001b74 <HAL_GPIO_Init+0x340>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d019      	beq.n	8001a5e <HAL_GPIO_Init+0x22a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_GPIO_Init+0x344>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0x226>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_GPIO_Init+0x348>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x222>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a50      	ldr	r2, [pc, #320]	; (8001b80 <HAL_GPIO_Init+0x34c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x21e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4f      	ldr	r2, [pc, #316]	; (8001b84 <HAL_GPIO_Init+0x350>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x21a>
 8001a4a:	2309      	movs	r3, #9
 8001a4c:	e012      	b.n	8001a74 <HAL_GPIO_Init+0x240>
 8001a4e:	230a      	movs	r3, #10
 8001a50:	e010      	b.n	8001a74 <HAL_GPIO_Init+0x240>
 8001a52:	2308      	movs	r3, #8
 8001a54:	e00e      	b.n	8001a74 <HAL_GPIO_Init+0x240>
 8001a56:	2307      	movs	r3, #7
 8001a58:	e00c      	b.n	8001a74 <HAL_GPIO_Init+0x240>
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	e00a      	b.n	8001a74 <HAL_GPIO_Init+0x240>
 8001a5e:	2305      	movs	r3, #5
 8001a60:	e008      	b.n	8001a74 <HAL_GPIO_Init+0x240>
 8001a62:	2304      	movs	r3, #4
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x240>
 8001a66:	2303      	movs	r3, #3
 8001a68:	e004      	b.n	8001a74 <HAL_GPIO_Init+0x240>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e002      	b.n	8001a74 <HAL_GPIO_Init+0x240>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_GPIO_Init+0x240>
 8001a72:	2300      	movs	r3, #0
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	f002 0203 	and.w	r2, r2, #3
 8001a7a:	0092      	lsls	r2, r2, #2
 8001a7c:	4093      	lsls	r3, r2
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a84:	4935      	ldr	r1, [pc, #212]	; (8001b5c <HAL_GPIO_Init+0x328>)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a92:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_GPIO_Init+0x354>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ab6:	4a34      	ldr	r2, [pc, #208]	; (8001b88 <HAL_GPIO_Init+0x354>)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_GPIO_Init+0x354>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae0:	4a29      	ldr	r2, [pc, #164]	; (8001b88 <HAL_GPIO_Init+0x354>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_GPIO_Init+0x354>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <HAL_GPIO_Init+0x354>)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_GPIO_Init+0x354>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <HAL_GPIO_Init+0x354>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	f67f ae84 	bls.w	8001850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40020400 	.word	0x40020400
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40021400 	.word	0x40021400
 8001b78:	40021800 	.word	0x40021800
 8001b7c:	40021c00 	.word	0x40021c00
 8001b80:	40022000 	.word	0x40022000
 8001b84:	40022400 	.word	0x40022400
 8001b88:	40013c00 	.word	0x40013c00

08001b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ba8:	e003      	b.n	8001bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	041a      	lsls	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	619a      	str	r2, [r3, #24]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f806 	bl	8001bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c08:	b08f      	sub	sp, #60	; 0x3c
 8001c0a:	af0a      	add	r7, sp, #40	; 0x28
 8001c0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e10f      	b.n	8001e38 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff f854 	bl	8000ce0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 fb8d 	bl	8003376 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	687e      	ldr	r6, [r7, #4]
 8001c64:	466d      	mov	r5, sp
 8001c66:	f106 0410 	add.w	r4, r6, #16
 8001c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c7a:	1d33      	adds	r3, r6, #4
 8001c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c7e:	6838      	ldr	r0, [r7, #0]
 8001c80:	f001 fb18 	bl	80032b4 <USB_CoreInit>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0d0      	b.n	8001e38 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 fb7b 	bl	8003398 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e04a      	b.n	8001d3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	333d      	adds	r3, #61	; 0x3d
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	333c      	adds	r3, #60	; 0x3c
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	b298      	uxth	r0, r3
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3344      	adds	r3, #68	; 0x44
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3340      	adds	r3, #64	; 0x40
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3348      	adds	r3, #72	; 0x48
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	334c      	adds	r3, #76	; 0x4c
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	3354      	adds	r3, #84	; 0x54
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3af      	bcc.n	8001ca8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e044      	b.n	8001dd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d3b5      	bcc.n	8001d4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	687e      	ldr	r6, [r7, #4]
 8001dea:	466d      	mov	r5, sp
 8001dec:	f106 0410 	add.w	r4, r6, #16
 8001df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e00:	1d33      	adds	r3, r6, #4
 8001e02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e04:	6838      	ldr	r0, [r7, #0]
 8001e06:	f001 fb13 	bl	8003430 <USB_DevInit>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e00d      	b.n	8001e38 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 fcde 	bl	80037f2 <USB_DevDisconnect>

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e267      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d075      	beq.n	8001f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5e:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d00c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6a:	4b85      	ldr	r3, [pc, #532]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d112      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4b82      	ldr	r3, [pc, #520]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	4b7e      	ldr	r3, [pc, #504]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d05b      	beq.n	8001f48 <HAL_RCC_OscConfig+0x108>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d157      	bne.n	8001f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e242      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x74>
 8001ea6:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a75      	ldr	r2, [pc, #468]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x98>
 8001ebe:	4b70      	ldr	r3, [pc, #448]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6f      	ldr	r2, [pc, #444]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b6d      	ldr	r3, [pc, #436]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6c      	ldr	r2, [pc, #432]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb0>
 8001ed8:	4b69      	ldr	r3, [pc, #420]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a68      	ldr	r2, [pc, #416]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b66      	ldr	r3, [pc, #408]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a65      	ldr	r2, [pc, #404]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f862 	bl	8000fc0 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff f85e 	bl	8000fc0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e207      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xc0>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff f84e 	bl	8000fc0 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f84a 	bl	8000fc0 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1f3      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	4b51      	ldr	r3, [pc, #324]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0xe8>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d063      	beq.n	800201e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f56:	4b4a      	ldr	r3, [pc, #296]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	4b44      	ldr	r3, [pc, #272]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x152>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1c7      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4937      	ldr	r1, [pc, #220]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	e03a      	b.n	800201e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb0:	4b34      	ldr	r3, [pc, #208]	; (8002084 <HAL_RCC_OscConfig+0x244>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f803 	bl	8000fc0 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7fe ffff 	bl	8000fc0 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1a8      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4925      	ldr	r1, [pc, #148]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
 8001ff0:	e015      	b.n	800201e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCC_OscConfig+0x244>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ffe2 	bl	8000fc0 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002000:	f7fe ffde 	bl	8000fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e187      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d036      	beq.n	8002098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_RCC_OscConfig+0x248>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7fe ffc2 	bl	8000fc0 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002040:	f7fe ffbe 	bl	8000fc0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e167      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_OscConfig+0x240>)
 8002054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x200>
 800205e:	e01b      	b.n	8002098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_RCC_OscConfig+0x248>)
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7fe ffab 	bl	8000fc0 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	e00e      	b.n	800208c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800206e:	f7fe ffa7 	bl	8000fc0 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d907      	bls.n	800208c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e150      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
 8002080:	40023800 	.word	0x40023800
 8002084:	42470000 	.word	0x42470000
 8002088:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800208e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ea      	bne.n	800206e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8097 	beq.w	80021d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b81      	ldr	r3, [pc, #516]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10f      	bne.n	80020d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b7d      	ldr	r3, [pc, #500]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a7c      	ldr	r2, [pc, #496]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b7a      	ldr	r3, [pc, #488]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b77      	ldr	r3, [pc, #476]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b74      	ldr	r3, [pc, #464]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a73      	ldr	r2, [pc, #460]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7fe ff67 	bl	8000fc0 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f6:	f7fe ff63 	bl	8000fc0 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e10c      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b6a      	ldr	r3, [pc, #424]	; (80022b4 <HAL_RCC_OscConfig+0x474>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x2ea>
 800211c:	4b64      	ldr	r3, [pc, #400]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a63      	ldr	r2, [pc, #396]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	e01c      	b.n	8002164 <HAL_RCC_OscConfig+0x324>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b05      	cmp	r3, #5
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x30c>
 8002132:	4b5f      	ldr	r3, [pc, #380]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	4a5e      	ldr	r2, [pc, #376]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6713      	str	r3, [r2, #112]	; 0x70
 800213e:	4b5c      	ldr	r3, [pc, #368]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a5b      	ldr	r2, [pc, #364]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0x324>
 800214c:	4b58      	ldr	r3, [pc, #352]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	4a57      	ldr	r2, [pc, #348]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	; 0x70
 8002158:	4b55      	ldr	r3, [pc, #340]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	4a54      	ldr	r2, [pc, #336]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800215e:	f023 0304 	bic.w	r3, r3, #4
 8002162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7fe ff28 	bl	8000fc0 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7fe ff24 	bl	8000fc0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0cb      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0ee      	beq.n	8002174 <HAL_RCC_OscConfig+0x334>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7fe ff12 	bl	8000fc0 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7fe ff0e 	bl	8000fc0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e0b5      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b6:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1ee      	bne.n	80021a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c8:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80a1 	beq.w	8002320 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d05c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d141      	bne.n	8002276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_RCC_OscConfig+0x478>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe fee2 	bl	8000fc0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe fede 	bl	8000fc0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e087      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	019b      	lsls	r3, r3, #6
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	3b01      	subs	r3, #1
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	491b      	ldr	r1, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x478>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe feb7 	bl	8000fc0 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe feb3 	bl	8000fc0 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e05c      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x416>
 8002274:	e054      	b.n	8002320 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_RCC_OscConfig+0x478>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fea0 	bl	8000fc0 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fe9c 	bl	8000fc0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e045      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCC_OscConfig+0x470>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x444>
 80022a2:	e03d      	b.n	8002320 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e038      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000
 80022b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_RCC_OscConfig+0x4ec>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d028      	beq.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d121      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d11a      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d111      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	3b01      	subs	r3, #1
 8002306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0cc      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b68      	ldr	r3, [pc, #416]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d90c      	bls.n	800236c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0b8      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002384:	4b59      	ldr	r3, [pc, #356]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a58      	ldr	r2, [pc, #352]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800238e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a52      	ldr	r2, [pc, #328]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b50      	ldr	r3, [pc, #320]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	494d      	ldr	r1, [pc, #308]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d044      	beq.n	8002450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d119      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e07f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e06f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e067      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4934      	ldr	r1, [pc, #208]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002420:	f7fe fdce 	bl	8000fc0 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7fe fdca 	bl	8000fc0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e04f      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d20c      	bcs.n	8002478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e032      	b.n	80024de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4916      	ldr	r1, [pc, #88]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	490e      	ldr	r1, [pc, #56]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024b6:	f000 f821 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	490a      	ldr	r1, [pc, #40]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	5ccb      	ldrb	r3, [r1, r3]
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fc5c 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023c00 	.word	0x40023c00
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08005128 	.word	0x08005128
 80024f4:	20000024 	.word	0x20000024
 80024f8:	20000028 	.word	0x20000028

080024fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002500:	b094      	sub	sp, #80	; 0x50
 8002502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	647b      	str	r3, [r7, #68]	; 0x44
 8002508:	2300      	movs	r3, #0
 800250a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800250c:	2300      	movs	r3, #0
 800250e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002514:	4b79      	ldr	r3, [pc, #484]	; (80026fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d00d      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x40>
 8002520:	2b08      	cmp	r3, #8
 8002522:	f200 80e1 	bhi.w	80026e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x34>
 800252a:	2b04      	cmp	r3, #4
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x3a>
 800252e:	e0db      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b73      	ldr	r3, [pc, #460]	; (8002700 <HAL_RCC_GetSysClockFreq+0x204>)
 8002532:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002534:	e0db      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002536:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_RCC_GetSysClockFreq+0x208>)
 8002538:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800253a:	e0d8      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800253c:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCC_GetSysClockFreq+0x200>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002544:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002546:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d063      	beq.n	800261a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002552:	4b6a      	ldr	r3, [pc, #424]	; (80026fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	2200      	movs	r2, #0
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38
 800255c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800255e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
 8002566:	2300      	movs	r3, #0
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
 800256a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800256e:	4622      	mov	r2, r4
 8002570:	462b      	mov	r3, r5
 8002572:	f04f 0000 	mov.w	r0, #0
 8002576:	f04f 0100 	mov.w	r1, #0
 800257a:	0159      	lsls	r1, r3, #5
 800257c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002580:	0150      	lsls	r0, r2, #5
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4621      	mov	r1, r4
 8002588:	1a51      	subs	r1, r2, r1
 800258a:	6139      	str	r1, [r7, #16]
 800258c:	4629      	mov	r1, r5
 800258e:	eb63 0301 	sbc.w	r3, r3, r1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025a0:	4659      	mov	r1, fp
 80025a2:	018b      	lsls	r3, r1, #6
 80025a4:	4651      	mov	r1, sl
 80025a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025aa:	4651      	mov	r1, sl
 80025ac:	018a      	lsls	r2, r1, #6
 80025ae:	4651      	mov	r1, sl
 80025b0:	ebb2 0801 	subs.w	r8, r2, r1
 80025b4:	4659      	mov	r1, fp
 80025b6:	eb63 0901 	sbc.w	r9, r3, r1
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ce:	4690      	mov	r8, r2
 80025d0:	4699      	mov	r9, r3
 80025d2:	4623      	mov	r3, r4
 80025d4:	eb18 0303 	adds.w	r3, r8, r3
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	462b      	mov	r3, r5
 80025dc:	eb49 0303 	adc.w	r3, r9, r3
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ee:	4629      	mov	r1, r5
 80025f0:	024b      	lsls	r3, r1, #9
 80025f2:	4621      	mov	r1, r4
 80025f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025f8:	4621      	mov	r1, r4
 80025fa:	024a      	lsls	r2, r1, #9
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	2200      	movs	r2, #0
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
 8002606:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002608:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800260c:	f7fd fdf0 	bl	80001f0 <__aeabi_uldivmod>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4613      	mov	r3, r2
 8002616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002618:	e058      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_RCC_GetSysClockFreq+0x200>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	099b      	lsrs	r3, r3, #6
 8002620:	2200      	movs	r2, #0
 8002622:	4618      	mov	r0, r3
 8002624:	4611      	mov	r1, r2
 8002626:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800262a:	623b      	str	r3, [r7, #32]
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
 8002630:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002634:	4642      	mov	r2, r8
 8002636:	464b      	mov	r3, r9
 8002638:	f04f 0000 	mov.w	r0, #0
 800263c:	f04f 0100 	mov.w	r1, #0
 8002640:	0159      	lsls	r1, r3, #5
 8002642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002646:	0150      	lsls	r0, r2, #5
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4641      	mov	r1, r8
 800264e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002652:	4649      	mov	r1, r9
 8002654:	eb63 0b01 	sbc.w	fp, r3, r1
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002664:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002668:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800266c:	ebb2 040a 	subs.w	r4, r2, sl
 8002670:	eb63 050b 	sbc.w	r5, r3, fp
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	00eb      	lsls	r3, r5, #3
 800267e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002682:	00e2      	lsls	r2, r4, #3
 8002684:	4614      	mov	r4, r2
 8002686:	461d      	mov	r5, r3
 8002688:	4643      	mov	r3, r8
 800268a:	18e3      	adds	r3, r4, r3
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	464b      	mov	r3, r9
 8002690:	eb45 0303 	adc.w	r3, r5, r3
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026a2:	4629      	mov	r1, r5
 80026a4:	028b      	lsls	r3, r1, #10
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ac:	4621      	mov	r1, r4
 80026ae:	028a      	lsls	r2, r1, #10
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b6:	2200      	movs	r2, #0
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	61fa      	str	r2, [r7, #28]
 80026bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c0:	f7fd fd96 	bl	80001f0 <__aeabi_uldivmod>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4613      	mov	r3, r2
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_GetSysClockFreq+0x200>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	3301      	adds	r3, #1
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026e6:	e002      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3750      	adds	r7, #80	; 0x50
 80026f4:	46bd      	mov	sp, r7
 80026f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	00f42400 	.word	0x00f42400
 8002704:	007a1200 	.word	0x007a1200

08002708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_GetHCLKFreq+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000024 	.word	0x20000024

08002720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002724:	f7ff fff0 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0a9b      	lsrs	r3, r3, #10
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4903      	ldr	r1, [pc, #12]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	08005138 	.word	0x08005138

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800274c:	f7ff ffdc 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0b5b      	lsrs	r3, r3, #13
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4903      	ldr	r1, [pc, #12]	; (800276c <HAL_RCC_GetPCLK2Freq+0x24>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	08005138 	.word	0x08005138

08002770 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	220f      	movs	r2, #15
 800277e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0203 	and.w	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	08db      	lsrs	r3, r3, #3
 80027aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_RCC_GetClockConfig+0x60>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	601a      	str	r2, [r3, #0]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40023c00 	.word	0x40023c00

080027d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e041      	b.n	800286a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f839 	bl	8002872 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f000 f9d8 	bl	8002bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d001      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e04e      	b.n	800293e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a23      	ldr	r2, [pc, #140]	; (800294c <HAL_TIM_Base_Start_IT+0xc4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d022      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d01d      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_TIM_Base_Start_IT+0xc8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d018      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1e      	ldr	r2, [pc, #120]	; (8002954 <HAL_TIM_Base_Start_IT+0xcc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d013      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_TIM_Base_Start_IT+0xd0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00e      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_TIM_Base_Start_IT+0xd4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d009      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a19      	ldr	r2, [pc, #100]	; (8002960 <HAL_TIM_Base_Start_IT+0xd8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x80>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a18      	ldr	r2, [pc, #96]	; (8002964 <HAL_TIM_Base_Start_IT+0xdc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d111      	bne.n	800292c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b06      	cmp	r3, #6
 8002918:	d010      	beq.n	800293c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292a:	e007      	b.n	800293c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40010000 	.word	0x40010000
 8002950:	40000400 	.word	0x40000400
 8002954:	40000800 	.word	0x40000800
 8002958:	40000c00 	.word	0x40000c00
 800295c:	40010400 	.word	0x40010400
 8002960:	40014000 	.word	0x40014000
 8002964:	40001800 	.word	0x40001800

08002968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0202 	mvn.w	r2, #2
 8002994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8ee 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8e0 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f8f1 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0204 	mvn.w	r2, #4
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8c4 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8b6 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8c7 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0208 	mvn.w	r2, #8
 8002a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2204      	movs	r2, #4
 8002a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f89a 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f88c 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f89d 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0210 	mvn.w	r2, #16
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2208      	movs	r2, #8
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f870 	bl	8002b8c <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f862 	bl	8002b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f873 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0201 	mvn.w	r2, #1
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fd ffa8 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b80      	cmp	r3, #128	; 0x80
 8002af8:	d10e      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d107      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f902 	bl	8002d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d107      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f838 	bl	8002bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0220 	mvn.w	r2, #32
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f8cc 	bl	8002d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a40      	ldr	r2, [pc, #256]	; (8002cdc <TIM_Base_SetConfig+0x114>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be6:	d00f      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a3d      	ldr	r2, [pc, #244]	; (8002ce0 <TIM_Base_SetConfig+0x118>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3c      	ldr	r2, [pc, #240]	; (8002ce4 <TIM_Base_SetConfig+0x11c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ce8 <TIM_Base_SetConfig+0x120>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <TIM_Base_SetConfig+0x40>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <TIM_Base_SetConfig+0x124>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d108      	bne.n	8002c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a2f      	ldr	r2, [pc, #188]	; (8002cdc <TIM_Base_SetConfig+0x114>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d02b      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d027      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ce0 <TIM_Base_SetConfig+0x118>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d023      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <TIM_Base_SetConfig+0x11c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <TIM_Base_SetConfig+0x120>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01b      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a29      	ldr	r2, [pc, #164]	; (8002cec <TIM_Base_SetConfig+0x124>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d017      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a28      	ldr	r2, [pc, #160]	; (8002cf0 <TIM_Base_SetConfig+0x128>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a27      	ldr	r2, [pc, #156]	; (8002cf4 <TIM_Base_SetConfig+0x12c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <TIM_Base_SetConfig+0x130>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <TIM_Base_SetConfig+0x134>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <TIM_Base_SetConfig+0x138>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0xb2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <TIM_Base_SetConfig+0x13c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <TIM_Base_SetConfig+0x114>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_Base_SetConfig+0xf8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <TIM_Base_SetConfig+0x124>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d103      	bne.n	8002cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	615a      	str	r2, [r3, #20]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40000c00 	.word	0x40000c00
 8002cec:	40010400 	.word	0x40010400
 8002cf0:	40014000 	.word	0x40014000
 8002cf4:	40014400 	.word	0x40014400
 8002cf8:	40014800 	.word	0x40014800
 8002cfc:	40001800 	.word	0x40001800
 8002d00:	40001c00 	.word	0x40001c00
 8002d04:	40002000 	.word	0x40002000

08002d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e03f      	b.n	8002dc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fd ff7a 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f829 	bl	8002dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd0:	b0c0      	sub	sp, #256	; 0x100
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	68d9      	ldr	r1, [r3, #12]
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	ea40 0301 	orr.w	r3, r0, r1
 8002df4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e24:	f021 010c 	bic.w	r1, r1, #12
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e32:	430b      	orrs	r3, r1
 8002e34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e46:	6999      	ldr	r1, [r3, #24]
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	ea40 0301 	orr.w	r3, r0, r1
 8002e52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4b8f      	ldr	r3, [pc, #572]	; (8003098 <UART_SetConfig+0x2cc>)
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d005      	beq.n	8002e6c <UART_SetConfig+0xa0>
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b8d      	ldr	r3, [pc, #564]	; (800309c <UART_SetConfig+0x2d0>)
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d104      	bne.n	8002e76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e6c:	f7ff fc6c 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8002e70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e74:	e003      	b.n	8002e7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e76:	f7ff fc53 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8002e7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e88:	f040 810c 	bne.w	80030a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e90:	2200      	movs	r2, #0
 8002e92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	1891      	adds	r1, r2, r2
 8002ea4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ea6:	415b      	adcs	r3, r3
 8002ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002eae:	4621      	mov	r1, r4
 8002eb0:	eb12 0801 	adds.w	r8, r2, r1
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	eb43 0901 	adc.w	r9, r3, r1
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ece:	4690      	mov	r8, r2
 8002ed0:	4699      	mov	r9, r3
 8002ed2:	4623      	mov	r3, r4
 8002ed4:	eb18 0303 	adds.w	r3, r8, r3
 8002ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002edc:	462b      	mov	r3, r5
 8002ede:	eb49 0303 	adc.w	r3, r9, r3
 8002ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ef2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ef6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002efa:	460b      	mov	r3, r1
 8002efc:	18db      	adds	r3, r3, r3
 8002efe:	653b      	str	r3, [r7, #80]	; 0x50
 8002f00:	4613      	mov	r3, r2
 8002f02:	eb42 0303 	adc.w	r3, r2, r3
 8002f06:	657b      	str	r3, [r7, #84]	; 0x54
 8002f08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f10:	f7fd f96e 	bl	80001f0 <__aeabi_uldivmod>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4b61      	ldr	r3, [pc, #388]	; (80030a0 <UART_SetConfig+0x2d4>)
 8002f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	011c      	lsls	r4, r3, #4
 8002f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f26:	2200      	movs	r2, #0
 8002f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f34:	4642      	mov	r2, r8
 8002f36:	464b      	mov	r3, r9
 8002f38:	1891      	adds	r1, r2, r2
 8002f3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f3c:	415b      	adcs	r3, r3
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f44:	4641      	mov	r1, r8
 8002f46:	eb12 0a01 	adds.w	sl, r2, r1
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f64:	4692      	mov	sl, r2
 8002f66:	469b      	mov	fp, r3
 8002f68:	4643      	mov	r3, r8
 8002f6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f72:	464b      	mov	r3, r9
 8002f74:	eb4b 0303 	adc.w	r3, fp, r3
 8002f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f90:	460b      	mov	r3, r1
 8002f92:	18db      	adds	r3, r3, r3
 8002f94:	643b      	str	r3, [r7, #64]	; 0x40
 8002f96:	4613      	mov	r3, r2
 8002f98:	eb42 0303 	adc.w	r3, r2, r3
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fa6:	f7fd f923 	bl	80001f0 <__aeabi_uldivmod>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4b3b      	ldr	r3, [pc, #236]	; (80030a0 <UART_SetConfig+0x2d4>)
 8002fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2264      	movs	r2, #100	; 0x64
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	1acb      	subs	r3, r1, r3
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fc6:	4b36      	ldr	r3, [pc, #216]	; (80030a0 <UART_SetConfig+0x2d4>)
 8002fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fd4:	441c      	add	r4, r3
 8002fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fe0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fe8:	4642      	mov	r2, r8
 8002fea:	464b      	mov	r3, r9
 8002fec:	1891      	adds	r1, r2, r2
 8002fee:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ff0:	415b      	adcs	r3, r3
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	1851      	adds	r1, r2, r1
 8002ffc:	6339      	str	r1, [r7, #48]	; 0x30
 8002ffe:	4649      	mov	r1, r9
 8003000:	414b      	adcs	r3, r1
 8003002:	637b      	str	r3, [r7, #52]	; 0x34
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003010:	4659      	mov	r1, fp
 8003012:	00cb      	lsls	r3, r1, #3
 8003014:	4651      	mov	r1, sl
 8003016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800301a:	4651      	mov	r1, sl
 800301c:	00ca      	lsls	r2, r1, #3
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	4603      	mov	r3, r0
 8003024:	4642      	mov	r2, r8
 8003026:	189b      	adds	r3, r3, r2
 8003028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800302c:	464b      	mov	r3, r9
 800302e:	460a      	mov	r2, r1
 8003030:	eb42 0303 	adc.w	r3, r2, r3
 8003034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003044:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003048:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800304c:	460b      	mov	r3, r1
 800304e:	18db      	adds	r3, r3, r3
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
 8003052:	4613      	mov	r3, r2
 8003054:	eb42 0303 	adc.w	r3, r2, r3
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800305a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800305e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003062:	f7fd f8c5 	bl	80001f0 <__aeabi_uldivmod>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <UART_SetConfig+0x2d4>)
 800306c:	fba3 1302 	umull	r1, r3, r3, r2
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	2164      	movs	r1, #100	; 0x64
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	3332      	adds	r3, #50	; 0x32
 800307e:	4a08      	ldr	r2, [pc, #32]	; (80030a0 <UART_SetConfig+0x2d4>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	f003 0207 	and.w	r2, r3, #7
 800308a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4422      	add	r2, r4
 8003092:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003094:	e105      	b.n	80032a2 <UART_SetConfig+0x4d6>
 8003096:	bf00      	nop
 8003098:	40011000 	.word	0x40011000
 800309c:	40011400 	.word	0x40011400
 80030a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030a8:	2200      	movs	r2, #0
 80030aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030b6:	4642      	mov	r2, r8
 80030b8:	464b      	mov	r3, r9
 80030ba:	1891      	adds	r1, r2, r2
 80030bc:	6239      	str	r1, [r7, #32]
 80030be:	415b      	adcs	r3, r3
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
 80030c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030c6:	4641      	mov	r1, r8
 80030c8:	1854      	adds	r4, r2, r1
 80030ca:	4649      	mov	r1, r9
 80030cc:	eb43 0501 	adc.w	r5, r3, r1
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	00eb      	lsls	r3, r5, #3
 80030da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030de:	00e2      	lsls	r2, r4, #3
 80030e0:	4614      	mov	r4, r2
 80030e2:	461d      	mov	r5, r3
 80030e4:	4643      	mov	r3, r8
 80030e6:	18e3      	adds	r3, r4, r3
 80030e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030ec:	464b      	mov	r3, r9
 80030ee:	eb45 0303 	adc.w	r3, r5, r3
 80030f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003112:	4629      	mov	r1, r5
 8003114:	008b      	lsls	r3, r1, #2
 8003116:	4621      	mov	r1, r4
 8003118:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800311c:	4621      	mov	r1, r4
 800311e:	008a      	lsls	r2, r1, #2
 8003120:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003124:	f7fd f864 	bl	80001f0 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4b60      	ldr	r3, [pc, #384]	; (80032b0 <UART_SetConfig+0x4e4>)
 800312e:	fba3 2302 	umull	r2, r3, r3, r2
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	011c      	lsls	r4, r3, #4
 8003136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800313a:	2200      	movs	r2, #0
 800313c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003140:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003144:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003148:	4642      	mov	r2, r8
 800314a:	464b      	mov	r3, r9
 800314c:	1891      	adds	r1, r2, r2
 800314e:	61b9      	str	r1, [r7, #24]
 8003150:	415b      	adcs	r3, r3
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003158:	4641      	mov	r1, r8
 800315a:	1851      	adds	r1, r2, r1
 800315c:	6139      	str	r1, [r7, #16]
 800315e:	4649      	mov	r1, r9
 8003160:	414b      	adcs	r3, r1
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003170:	4659      	mov	r1, fp
 8003172:	00cb      	lsls	r3, r1, #3
 8003174:	4651      	mov	r1, sl
 8003176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800317a:	4651      	mov	r1, sl
 800317c:	00ca      	lsls	r2, r1, #3
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	4603      	mov	r3, r0
 8003184:	4642      	mov	r2, r8
 8003186:	189b      	adds	r3, r3, r2
 8003188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800318c:	464b      	mov	r3, r9
 800318e:	460a      	mov	r2, r1
 8003190:	eb42 0303 	adc.w	r3, r2, r3
 8003194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80031a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031b0:	4649      	mov	r1, r9
 80031b2:	008b      	lsls	r3, r1, #2
 80031b4:	4641      	mov	r1, r8
 80031b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ba:	4641      	mov	r1, r8
 80031bc:	008a      	lsls	r2, r1, #2
 80031be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031c2:	f7fd f815 	bl	80001f0 <__aeabi_uldivmod>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <UART_SetConfig+0x4e4>)
 80031cc:	fba3 1302 	umull	r1, r3, r3, r2
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	2164      	movs	r1, #100	; 0x64
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	3332      	adds	r3, #50	; 0x32
 80031de:	4a34      	ldr	r2, [pc, #208]	; (80032b0 <UART_SetConfig+0x4e4>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ea:	441c      	add	r4, r3
 80031ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f0:	2200      	movs	r2, #0
 80031f2:	673b      	str	r3, [r7, #112]	; 0x70
 80031f4:	677a      	str	r2, [r7, #116]	; 0x74
 80031f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031fa:	4642      	mov	r2, r8
 80031fc:	464b      	mov	r3, r9
 80031fe:	1891      	adds	r1, r2, r2
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	415b      	adcs	r3, r3
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800320a:	4641      	mov	r1, r8
 800320c:	1851      	adds	r1, r2, r1
 800320e:	6039      	str	r1, [r7, #0]
 8003210:	4649      	mov	r1, r9
 8003212:	414b      	adcs	r3, r1
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003222:	4659      	mov	r1, fp
 8003224:	00cb      	lsls	r3, r1, #3
 8003226:	4651      	mov	r1, sl
 8003228:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322c:	4651      	mov	r1, sl
 800322e:	00ca      	lsls	r2, r1, #3
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	4603      	mov	r3, r0
 8003236:	4642      	mov	r2, r8
 8003238:	189b      	adds	r3, r3, r2
 800323a:	66bb      	str	r3, [r7, #104]	; 0x68
 800323c:	464b      	mov	r3, r9
 800323e:	460a      	mov	r2, r1
 8003240:	eb42 0303 	adc.w	r3, r2, r3
 8003244:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	663b      	str	r3, [r7, #96]	; 0x60
 8003250:	667a      	str	r2, [r7, #100]	; 0x64
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800325e:	4649      	mov	r1, r9
 8003260:	008b      	lsls	r3, r1, #2
 8003262:	4641      	mov	r1, r8
 8003264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003268:	4641      	mov	r1, r8
 800326a:	008a      	lsls	r2, r1, #2
 800326c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003270:	f7fc ffbe 	bl	80001f0 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <UART_SetConfig+0x4e4>)
 800327a:	fba3 1302 	umull	r1, r3, r3, r2
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2164      	movs	r1, #100	; 0x64
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	3332      	adds	r3, #50	; 0x32
 800328c:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <UART_SetConfig+0x4e4>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4422      	add	r2, r4
 80032a0:	609a      	str	r2, [r3, #8]
}
 80032a2:	bf00      	nop
 80032a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032a8:	46bd      	mov	sp, r7
 80032aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ae:	bf00      	nop
 80032b0:	51eb851f 	.word	0x51eb851f

080032b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032b4:	b084      	sub	sp, #16
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	f107 001c 	add.w	r0, r7, #28
 80032c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d122      	bne.n	8003312 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80032e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80032f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d105      	bne.n	8003306 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 faa2 	bl	8003850 <USB_CoreReset>
 800330c:	4603      	mov	r3, r0
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	e01a      	b.n	8003348 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa96 	bl	8003850 <USB_CoreReset>
 8003324:	4603      	mov	r3, r0
 8003326:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
 800333a:	e005      	b.n	8003348 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	2b01      	cmp	r3, #1
 800334c:	d10b      	bne.n	8003366 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f043 0206 	orr.w	r2, r3, #6
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003372:	b004      	add	sp, #16
 8003374:	4770      	bx	lr

08003376 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f023 0201 	bic.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d115      	bne.n	80033e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80033c6:	2001      	movs	r0, #1
 80033c8:	f7fd fe06 	bl	8000fd8 <HAL_Delay>
      ms++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fa2e 	bl	8003834 <USB_GetMode>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d01e      	beq.n	800341c <USB_SetCurrentMode+0x84>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b31      	cmp	r3, #49	; 0x31
 80033e2:	d9f0      	bls.n	80033c6 <USB_SetCurrentMode+0x2e>
 80033e4:	e01a      	b.n	800341c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d115      	bne.n	8003418 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80033f8:	2001      	movs	r0, #1
 80033fa:	f7fd fded 	bl	8000fd8 <HAL_Delay>
      ms++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3301      	adds	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fa15 	bl	8003834 <USB_GetMode>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <USB_SetCurrentMode+0x84>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b31      	cmp	r3, #49	; 0x31
 8003414:	d9f0      	bls.n	80033f8 <USB_SetCurrentMode+0x60>
 8003416:	e001      	b.n	800341c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e005      	b.n	8003428 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b32      	cmp	r3, #50	; 0x32
 8003420:	d101      	bne.n	8003426 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003430:	b084      	sub	sp, #16
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800343e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	e009      	b.n	8003464 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3340      	adds	r3, #64	; 0x40
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	2200      	movs	r2, #0
 800345c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	3301      	adds	r3, #1
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	2b0e      	cmp	r3, #14
 8003468:	d9f2      	bls.n	8003450 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800346a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d11c      	bne.n	80034aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347e:	f043 0302 	orr.w	r3, r3, #2
 8003482:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
 80034a8:	e00b      	b.n	80034c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034c8:	461a      	mov	r2, r3
 80034ca:	2300      	movs	r3, #0
 80034cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d4:	4619      	mov	r1, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	461a      	mov	r2, r3
 80034de:	680b      	ldr	r3, [r1, #0]
 80034e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d10c      	bne.n	8003502 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80034ee:	2100      	movs	r1, #0
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f965 	bl	80037c0 <USB_SetDevSpeed>
 80034f6:	e008      	b.n	800350a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80034f8:	2101      	movs	r1, #1
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f960 	bl	80037c0 <USB_SetDevSpeed>
 8003500:	e003      	b.n	800350a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003502:	2103      	movs	r1, #3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f95b 	bl	80037c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800350a:	2110      	movs	r1, #16
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8f3 	bl	80036f8 <USB_FlushTxFifo>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f91f 	bl	8003760 <USB_FlushRxFifo>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003532:	461a      	mov	r2, r3
 8003534:	2300      	movs	r3, #0
 8003536:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	461a      	mov	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354a:	461a      	mov	r2, r3
 800354c:	2300      	movs	r3, #0
 800354e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	e043      	b.n	80035de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800356c:	d118      	bne.n	80035a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003580:	461a      	mov	r2, r3
 8003582:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e013      	b.n	80035b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003596:	461a      	mov	r2, r3
 8003598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e008      	b.n	80035b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	2300      	movs	r3, #0
 80035b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035be:	461a      	mov	r2, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d0:	461a      	mov	r2, r3
 80035d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	3301      	adds	r3, #1
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3b7      	bcc.n	8003556 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	e043      	b.n	8003674 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003602:	d118      	bne.n	8003636 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003616:	461a      	mov	r2, r3
 8003618:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e013      	b.n	8003648 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362c:	461a      	mov	r2, r3
 800362e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	e008      	b.n	8003648 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003642:	461a      	mov	r2, r3
 8003644:	2300      	movs	r3, #0
 8003646:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003654:	461a      	mov	r2, r3
 8003656:	2300      	movs	r3, #0
 8003658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	461a      	mov	r2, r3
 8003668:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800366c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3301      	adds	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	429a      	cmp	r2, r3
 800367a:	d3b7      	bcc.n	80035ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800368e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800369c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f043 0210 	orr.w	r2, r3, #16
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <USB_DevInit+0x2c4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f043 0208 	orr.w	r2, r3, #8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d107      	bne.n	80036e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036f0:	b004      	add	sp, #16
 80036f2:	4770      	bx	lr
 80036f4:	803c3800 	.word	0x803c3800

080036f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3301      	adds	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <USB_FlushTxFifo+0x64>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e01b      	b.n	8003750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	daf2      	bge.n	8003706 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	019b      	lsls	r3, r3, #6
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a08      	ldr	r2, [pc, #32]	; (800375c <USB_FlushTxFifo+0x64>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e006      	b.n	8003750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b20      	cmp	r3, #32
 800374c:	d0f0      	beq.n	8003730 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	00030d40 	.word	0x00030d40

08003760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3301      	adds	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a11      	ldr	r2, [pc, #68]	; (80037bc <USB_FlushRxFifo+0x5c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e018      	b.n	80037b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	daf2      	bge.n	800376c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2210      	movs	r2, #16
 800378e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a08      	ldr	r2, [pc, #32]	; (80037bc <USB_FlushRxFifo+0x5c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e006      	b.n	80037b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d0f0      	beq.n	8003790 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	00030d40 	.word	0x00030d40

080037c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800380c:	f023 0303 	bic.w	r3, r3, #3
 8003810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f003 0301 	and.w	r3, r3, #1
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <USB_CoreReset+0x64>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e01b      	b.n	80038a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	daf2      	bge.n	800385c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f043 0201 	orr.w	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <USB_CoreReset+0x64>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e006      	b.n	80038a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d0f0      	beq.n	8003886 <USB_CoreReset+0x36>

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	00030d40 	.word	0x00030d40

080038b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ca:	2b84      	cmp	r3, #132	; 0x84
 80038cc:	d005      	beq.n	80038da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80038ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	3303      	adds	r3, #3
 80038d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038da:	68fb      	ldr	r3, [r7, #12]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80038ec:	f000 fb74 	bl	8003fd8 <vTaskStartScheduler>
  
  return osOK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80038f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038f8:	b089      	sub	sp, #36	; 0x24
 80038fa:	af04      	add	r7, sp, #16
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <osThreadCreate+0x54>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01c      	beq.n	800394a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685c      	ldr	r4, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681d      	ldr	r5, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691e      	ldr	r6, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff ffc8 	bl	80038b8 <makeFreeRtosPriority>
 8003928:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003932:	9202      	str	r2, [sp, #8]
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	9100      	str	r1, [sp, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4632      	mov	r2, r6
 800393c:	4629      	mov	r1, r5
 800393e:	4620      	mov	r0, r4
 8003940:	f000 f8ed 	bl	8003b1e <xTaskCreateStatic>
 8003944:	4603      	mov	r3, r0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e01c      	b.n	8003984 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685c      	ldr	r4, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003956:	b29e      	uxth	r6, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ffaa 	bl	80038b8 <makeFreeRtosPriority>
 8003964:	4602      	mov	r2, r0
 8003966:	f107 030c 	add.w	r3, r7, #12
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	9200      	str	r2, [sp, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	4632      	mov	r2, r6
 8003972:	4629      	mov	r1, r5
 8003974:	4620      	mov	r0, r4
 8003976:	f000 f92f 	bl	8003bd8 <xTaskCreate>
 800397a:	4603      	mov	r3, r0
 800397c:	2b01      	cmp	r3, #1
 800397e:	d001      	beq.n	8003984 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003984:	68fb      	ldr	r3, [r7, #12]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800398e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <osDelay+0x16>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	e000      	b.n	80039a6 <osDelay+0x18>
 80039a4:	2301      	movs	r3, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fae2 	bl	8003f70 <vTaskDelay>
  
  return osOK;
 80039ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f103 0208 	add.w	r2, r3, #8
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f103 0208 	add.w	r2, r3, #8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f103 0208 	add.w	r2, r3, #8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	601a      	str	r2, [r3, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6e:	d103      	bne.n	8003a78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e00c      	b.n	8003a92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	e002      	b.n	8003a86 <vListInsert+0x2e>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d2f6      	bcs.n	8003a80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6892      	ldr	r2, [r2, #8]
 8003ae0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6852      	ldr	r2, [r2, #4]
 8003aea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d103      	bne.n	8003afe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	1e5a      	subs	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b08e      	sub	sp, #56	; 0x38
 8003b22:	af04      	add	r7, sp, #16
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	623b      	str	r3, [r7, #32]
}
 8003b44:	bf00      	nop
 8003b46:	e7fe      	b.n	8003b46 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <xTaskCreateStatic+0x46>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	61fb      	str	r3, [r7, #28]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b64:	23b4      	movs	r3, #180	; 0xb4
 8003b66:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2bb4      	cmp	r3, #180	; 0xb4
 8003b6c:	d00a      	beq.n	8003b84 <xTaskCreateStatic+0x66>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	61bb      	str	r3, [r7, #24]
}
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01e      	beq.n	8003bca <xTaskCreateStatic+0xac>
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01b      	beq.n	8003bca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9303      	str	r3, [sp, #12]
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	9302      	str	r3, [sp, #8]
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f851 	bl	8003c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bc4:	f000 f8ec 	bl	8003da0 <prvAddNewTaskToReadyList>
 8003bc8:	e001      	b.n	8003bce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bce:	697b      	ldr	r3, [r7, #20]
	}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08c      	sub	sp, #48	; 0x30
 8003bdc:	af04      	add	r7, sp, #16
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 ff83 	bl	8004af8 <pvPortMalloc>
 8003bf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00e      	beq.n	8003c18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bfa:	20b4      	movs	r0, #180	; 0xb4
 8003bfc:	f000 ff7c 	bl	8004af8 <pvPortMalloc>
 8003c00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c0e:	e005      	b.n	8003c1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c10:	6978      	ldr	r0, [r7, #20]
 8003c12:	f001 f83d 	bl	8004c90 <vPortFree>
 8003c16:	e001      	b.n	8003c1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d017      	beq.n	8003c52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9303      	str	r3, [sp, #12]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	9302      	str	r3, [sp, #8]
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f80f 	bl	8003c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c46:	69f8      	ldr	r0, [r7, #28]
 8003c48:	f000 f8aa 	bl	8003da0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e002      	b.n	8003c58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c58:	69bb      	ldr	r3, [r7, #24]
	}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f023 0307 	bic.w	r3, r3, #7
 8003c8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <prvInitialiseNewTask+0x48>
	__asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	617b      	str	r3, [r7, #20]
}
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01f      	beq.n	8003cf2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e012      	b.n	8003cde <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	7819      	ldrb	r1, [r3, #0]
 8003cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3334      	adds	r3, #52	; 0x34
 8003cc8:	460a      	mov	r2, r1
 8003cca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d006      	beq.n	8003ce6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2b0f      	cmp	r3, #15
 8003ce2:	d9e9      	bls.n	8003cb8 <prvInitialiseNewTask+0x54>
 8003ce4:	e000      	b.n	8003ce8 <prvInitialiseNewTask+0x84>
			{
				break;
 8003ce6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf0:	e003      	b.n	8003cfa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d901      	bls.n	8003d04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d00:	2306      	movs	r3, #6
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	2200      	movs	r2, #0
 8003d14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	3304      	adds	r3, #4
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fe6b 	bl	80039f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	3318      	adds	r3, #24
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fe66 	bl	80039f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	f1c3 0207 	rsb	r2, r3, #7
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	2200      	movs	r2, #0
 8003d44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	334c      	adds	r3, #76	; 0x4c
 8003d54:	2260      	movs	r2, #96	; 0x60
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f001 f8dd 	bl	8004f18 <memset>
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	4a0c      	ldr	r2, [pc, #48]	; (8003d94 <prvInitialiseNewTask+0x130>)
 8003d62:	651a      	str	r2, [r3, #80]	; 0x50
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	4a0c      	ldr	r2, [pc, #48]	; (8003d98 <prvInitialiseNewTask+0x134>)
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <prvInitialiseNewTask+0x138>)
 8003d6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	68f9      	ldr	r1, [r7, #12]
 8003d74:	69b8      	ldr	r0, [r7, #24]
 8003d76:	f000 fcad 	bl	80046d4 <pxPortInitialiseStack>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d8c:	bf00      	nop
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	08005160 	.word	0x08005160
 8003d98:	08005180 	.word	0x08005180
 8003d9c:	08005140 	.word	0x08005140

08003da0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003da8:	f000 fdc4 	bl	8004934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003dac:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <prvAddNewTaskToReadyList+0xb8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	4a29      	ldr	r2, [pc, #164]	; (8003e58 <prvAddNewTaskToReadyList+0xb8>)
 8003db4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <prvAddNewTaskToReadyList+0xbc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003dbe:	4a27      	ldr	r2, [pc, #156]	; (8003e5c <prvAddNewTaskToReadyList+0xbc>)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dc4:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <prvAddNewTaskToReadyList+0xb8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d110      	bne.n	8003dee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003dcc:	f000 fb5a 	bl	8004484 <prvInitialiseTaskLists>
 8003dd0:	e00d      	b.n	8003dee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dd2:	4b23      	ldr	r3, [pc, #140]	; (8003e60 <prvAddNewTaskToReadyList+0xc0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dda:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <prvAddNewTaskToReadyList+0xbc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d802      	bhi.n	8003dee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003de8:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <prvAddNewTaskToReadyList+0xbc>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dee:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <prvAddNewTaskToReadyList+0xc4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <prvAddNewTaskToReadyList+0xc4>)
 8003df6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <prvAddNewTaskToReadyList+0xc8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <prvAddNewTaskToReadyList+0xc8>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <prvAddNewTaskToReadyList+0xcc>)
 8003e18:	441a      	add	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4610      	mov	r0, r2
 8003e22:	f7ff fdf5 	bl	8003a10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e26:	f000 fdb5 	bl	8004994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <prvAddNewTaskToReadyList+0xc0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00e      	beq.n	8003e50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <prvAddNewTaskToReadyList+0xbc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d207      	bcs.n	8003e50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <prvAddNewTaskToReadyList+0xd0>)
 8003e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000c3c 	.word	0x20000c3c
 8003e5c:	20000b3c 	.word	0x20000b3c
 8003e60:	20000c48 	.word	0x20000c48
 8003e64:	20000c58 	.word	0x20000c58
 8003e68:	20000c44 	.word	0x20000c44
 8003e6c:	20000b40 	.word	0x20000b40
 8003e70:	e000ed04 	.word	0xe000ed04

08003e74 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <vTaskDelayUntil+0x2a>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	617b      	str	r3, [r7, #20]
}
 8003e9a:	bf00      	nop
 8003e9c:	e7fe      	b.n	8003e9c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <vTaskDelayUntil+0x46>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	613b      	str	r3, [r7, #16]
}
 8003eb6:	bf00      	nop
 8003eb8:	e7fe      	b.n	8003eb8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003eba:	4b2a      	ldr	r3, [pc, #168]	; (8003f64 <vTaskDelayUntil+0xf0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <vTaskDelayUntil+0x64>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	60fb      	str	r3, [r7, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003ed8:	f000 f8e8 	bl	80040ac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003edc:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <vTaskDelayUntil+0xf4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4413      	add	r3, r2
 8003eea:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a3a      	ldr	r2, [r7, #32]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d20b      	bcs.n	8003f0e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d211      	bcs.n	8003f24 <vTaskDelayUntil+0xb0>
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d90d      	bls.n	8003f24 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0c:	e00a      	b.n	8003f24 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d303      	bcc.n	8003f20 <vTaskDelayUntil+0xac>
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d901      	bls.n	8003f24 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d006      	beq.n	8003f3e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fb65 	bl	8004608 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003f3e:	f000 f8c3 	bl	80040c8 <xTaskResumeAll>
 8003f42:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d107      	bne.n	8003f5a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8003f4a:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <vTaskDelayUntil+0xf8>)
 8003f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f5a:	bf00      	nop
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000c64 	.word	0x20000c64
 8003f68:	20000c40 	.word	0x20000c40
 8003f6c:	e000ed04 	.word	0xe000ed04

08003f70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d017      	beq.n	8003fb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f82:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <vTaskDelay+0x60>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <vTaskDelay+0x30>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60bb      	str	r3, [r7, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fa0:	f000 f884 	bl	80040ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fb2e 	bl	8004608 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fac:	f000 f88c 	bl	80040c8 <xTaskResumeAll>
 8003fb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <vTaskDelay+0x64>)
 8003fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000c64 	.word	0x20000c64
 8003fd4:	e000ed04 	.word	0xe000ed04

08003fd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fe6:	463a      	mov	r2, r7
 8003fe8:	1d39      	adds	r1, r7, #4
 8003fea:	f107 0308 	add.w	r3, r7, #8
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc fb12 	bl	8000618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	9202      	str	r2, [sp, #8]
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	2300      	movs	r3, #0
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	2300      	movs	r3, #0
 8004004:	460a      	mov	r2, r1
 8004006:	4921      	ldr	r1, [pc, #132]	; (800408c <vTaskStartScheduler+0xb4>)
 8004008:	4821      	ldr	r0, [pc, #132]	; (8004090 <vTaskStartScheduler+0xb8>)
 800400a:	f7ff fd88 	bl	8003b1e <xTaskCreateStatic>
 800400e:	4603      	mov	r3, r0
 8004010:	4a20      	ldr	r2, [pc, #128]	; (8004094 <vTaskStartScheduler+0xbc>)
 8004012:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004014:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <vTaskStartScheduler+0xbc>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800401c:	2301      	movs	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	e001      	b.n	8004026 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d11b      	bne.n	8004064 <vTaskStartScheduler+0x8c>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	613b      	str	r3, [r7, #16]
}
 800403e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004040:	4b15      	ldr	r3, [pc, #84]	; (8004098 <vTaskStartScheduler+0xc0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	334c      	adds	r3, #76	; 0x4c
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <vTaskStartScheduler+0xc4>)
 8004048:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <vTaskStartScheduler+0xc8>)
 800404c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004050:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004052:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <vTaskStartScheduler+0xcc>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <vTaskStartScheduler+0xd0>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800405e:	f000 fbc7 	bl	80047f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004062:	e00e      	b.n	8004082 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800406a:	d10a      	bne.n	8004082 <vTaskStartScheduler+0xaa>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60fb      	str	r3, [r7, #12]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <vTaskStartScheduler+0xa8>
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	08005120 	.word	0x08005120
 8004090:	08004455 	.word	0x08004455
 8004094:	20000c60 	.word	0x20000c60
 8004098:	20000b3c 	.word	0x20000b3c
 800409c:	20000034 	.word	0x20000034
 80040a0:	20000c5c 	.word	0x20000c5c
 80040a4:	20000c48 	.word	0x20000c48
 80040a8:	20000c40 	.word	0x20000c40

080040ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040b0:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <vTaskSuspendAll+0x18>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3301      	adds	r3, #1
 80040b6:	4a03      	ldr	r2, [pc, #12]	; (80040c4 <vTaskSuspendAll+0x18>)
 80040b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040ba:	bf00      	nop
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	20000c64 	.word	0x20000c64

080040c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040d6:	4b41      	ldr	r3, [pc, #260]	; (80041dc <xTaskResumeAll+0x114>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	603b      	str	r3, [r7, #0]
}
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040f4:	f000 fc1e 	bl	8004934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040f8:	4b38      	ldr	r3, [pc, #224]	; (80041dc <xTaskResumeAll+0x114>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	4a37      	ldr	r2, [pc, #220]	; (80041dc <xTaskResumeAll+0x114>)
 8004100:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <xTaskResumeAll+0x114>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d161      	bne.n	80041ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800410a:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <xTaskResumeAll+0x118>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d05d      	beq.n	80041ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004112:	e02e      	b.n	8004172 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004114:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <xTaskResumeAll+0x11c>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3318      	adds	r3, #24
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fcd2 	bl	8003aca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3304      	adds	r3, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fccd 	bl	8003aca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	2201      	movs	r2, #1
 8004136:	409a      	lsls	r2, r3
 8004138:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <xTaskResumeAll+0x120>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4313      	orrs	r3, r2
 800413e:	4a2a      	ldr	r2, [pc, #168]	; (80041e8 <xTaskResumeAll+0x120>)
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	4613      	mov	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4a27      	ldr	r2, [pc, #156]	; (80041ec <xTaskResumeAll+0x124>)
 8004150:	441a      	add	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3304      	adds	r3, #4
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f7ff fc59 	bl	8003a10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <xTaskResumeAll+0x128>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	429a      	cmp	r2, r3
 800416a:	d302      	bcc.n	8004172 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <xTaskResumeAll+0x12c>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <xTaskResumeAll+0x11c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1cc      	bne.n	8004114 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004180:	f000 fa22 	bl	80045c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004184:	4b1c      	ldr	r3, [pc, #112]	; (80041f8 <xTaskResumeAll+0x130>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d010      	beq.n	80041b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004190:	f000 f846 	bl	8004220 <xTaskIncrementTick>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800419a:	4b16      	ldr	r3, [pc, #88]	; (80041f4 <xTaskResumeAll+0x12c>)
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f1      	bne.n	8004190 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80041ac:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <xTaskResumeAll+0x130>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <xTaskResumeAll+0x12c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041ba:	2301      	movs	r3, #1
 80041bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041be:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <xTaskResumeAll+0x134>)
 80041c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041ce:	f000 fbe1 	bl	8004994 <vPortExitCritical>

	return xAlreadyYielded;
 80041d2:	68bb      	ldr	r3, [r7, #8]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000c64 	.word	0x20000c64
 80041e0:	20000c3c 	.word	0x20000c3c
 80041e4:	20000bfc 	.word	0x20000bfc
 80041e8:	20000c44 	.word	0x20000c44
 80041ec:	20000b40 	.word	0x20000b40
 80041f0:	20000b3c 	.word	0x20000b3c
 80041f4:	20000c50 	.word	0x20000c50
 80041f8:	20000c4c 	.word	0x20000c4c
 80041fc:	e000ed04 	.word	0xe000ed04

08004200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <xTaskGetTickCount+0x1c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800420c:	687b      	ldr	r3, [r7, #4]
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000c40 	.word	0x20000c40

08004220 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800422a:	4b4e      	ldr	r3, [pc, #312]	; (8004364 <xTaskIncrementTick+0x144>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f040 808e 	bne.w	8004350 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004234:	4b4c      	ldr	r3, [pc, #304]	; (8004368 <xTaskIncrementTick+0x148>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800423c:	4a4a      	ldr	r2, [pc, #296]	; (8004368 <xTaskIncrementTick+0x148>)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d120      	bne.n	800428a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004248:	4b48      	ldr	r3, [pc, #288]	; (800436c <xTaskIncrementTick+0x14c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <xTaskIncrementTick+0x48>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	603b      	str	r3, [r7, #0]
}
 8004264:	bf00      	nop
 8004266:	e7fe      	b.n	8004266 <xTaskIncrementTick+0x46>
 8004268:	4b40      	ldr	r3, [pc, #256]	; (800436c <xTaskIncrementTick+0x14c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	4b40      	ldr	r3, [pc, #256]	; (8004370 <xTaskIncrementTick+0x150>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a3e      	ldr	r2, [pc, #248]	; (800436c <xTaskIncrementTick+0x14c>)
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4a3e      	ldr	r2, [pc, #248]	; (8004370 <xTaskIncrementTick+0x150>)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b3d      	ldr	r3, [pc, #244]	; (8004374 <xTaskIncrementTick+0x154>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	4a3c      	ldr	r2, [pc, #240]	; (8004374 <xTaskIncrementTick+0x154>)
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	f000 f99f 	bl	80045c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800428a:	4b3b      	ldr	r3, [pc, #236]	; (8004378 <xTaskIncrementTick+0x158>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	429a      	cmp	r2, r3
 8004292:	d348      	bcc.n	8004326 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004294:	4b35      	ldr	r3, [pc, #212]	; (800436c <xTaskIncrementTick+0x14c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800429e:	4b36      	ldr	r3, [pc, #216]	; (8004378 <xTaskIncrementTick+0x158>)
 80042a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042a4:	601a      	str	r2, [r3, #0]
					break;
 80042a6:	e03e      	b.n	8004326 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a8:	4b30      	ldr	r3, [pc, #192]	; (800436c <xTaskIncrementTick+0x14c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d203      	bcs.n	80042c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042c0:	4a2d      	ldr	r2, [pc, #180]	; (8004378 <xTaskIncrementTick+0x158>)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042c6:	e02e      	b.n	8004326 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fbfc 	bl	8003aca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3318      	adds	r3, #24
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fbf3 	bl	8003aca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	2201      	movs	r2, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	4b23      	ldr	r3, [pc, #140]	; (800437c <xTaskIncrementTick+0x15c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	4a22      	ldr	r2, [pc, #136]	; (800437c <xTaskIncrementTick+0x15c>)
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <xTaskIncrementTick+0x160>)
 8004304:	441a      	add	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	3304      	adds	r3, #4
 800430a:	4619      	mov	r1, r3
 800430c:	4610      	mov	r0, r2
 800430e:	f7ff fb7f 	bl	8003a10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004316:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <xTaskIncrementTick+0x164>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	429a      	cmp	r2, r3
 800431e:	d3b9      	bcc.n	8004294 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004324:	e7b6      	b.n	8004294 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004326:	4b17      	ldr	r3, [pc, #92]	; (8004384 <xTaskIncrementTick+0x164>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432c:	4914      	ldr	r1, [pc, #80]	; (8004380 <xTaskIncrementTick+0x160>)
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d901      	bls.n	8004342 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800433e:	2301      	movs	r3, #1
 8004340:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004342:	4b11      	ldr	r3, [pc, #68]	; (8004388 <xTaskIncrementTick+0x168>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800434a:	2301      	movs	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e004      	b.n	800435a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004350:	4b0e      	ldr	r3, [pc, #56]	; (800438c <xTaskIncrementTick+0x16c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3301      	adds	r3, #1
 8004356:	4a0d      	ldr	r2, [pc, #52]	; (800438c <xTaskIncrementTick+0x16c>)
 8004358:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800435a:	697b      	ldr	r3, [r7, #20]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000c64 	.word	0x20000c64
 8004368:	20000c40 	.word	0x20000c40
 800436c:	20000bf4 	.word	0x20000bf4
 8004370:	20000bf8 	.word	0x20000bf8
 8004374:	20000c54 	.word	0x20000c54
 8004378:	20000c5c 	.word	0x20000c5c
 800437c:	20000c44 	.word	0x20000c44
 8004380:	20000b40 	.word	0x20000b40
 8004384:	20000b3c 	.word	0x20000b3c
 8004388:	20000c50 	.word	0x20000c50
 800438c:	20000c4c 	.word	0x20000c4c

08004390 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004396:	4b29      	ldr	r3, [pc, #164]	; (800443c <vTaskSwitchContext+0xac>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800439e:	4b28      	ldr	r3, [pc, #160]	; (8004440 <vTaskSwitchContext+0xb0>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043a4:	e044      	b.n	8004430 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80043a6:	4b26      	ldr	r3, [pc, #152]	; (8004440 <vTaskSwitchContext+0xb0>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <vTaskSwitchContext+0xb4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	fab3 f383 	clz	r3, r3
 80043b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80043ba:	7afb      	ldrb	r3, [r7, #11]
 80043bc:	f1c3 031f 	rsb	r3, r3, #31
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	4921      	ldr	r1, [pc, #132]	; (8004448 <vTaskSwitchContext+0xb8>)
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	607b      	str	r3, [r7, #4]
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <vTaskSwitchContext+0x5a>
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4a14      	ldr	r2, [pc, #80]	; (8004448 <vTaskSwitchContext+0xb8>)
 80043f8:	4413      	add	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	3308      	adds	r3, #8
 800440e:	429a      	cmp	r2, r3
 8004410:	d104      	bne.n	800441c <vTaskSwitchContext+0x8c>
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <vTaskSwitchContext+0xbc>)
 8004424:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <vTaskSwitchContext+0xbc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	334c      	adds	r3, #76	; 0x4c
 800442c:	4a08      	ldr	r2, [pc, #32]	; (8004450 <vTaskSwitchContext+0xc0>)
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	20000c64 	.word	0x20000c64
 8004440:	20000c50 	.word	0x20000c50
 8004444:	20000c44 	.word	0x20000c44
 8004448:	20000b40 	.word	0x20000b40
 800444c:	20000b3c 	.word	0x20000b3c
 8004450:	20000034 	.word	0x20000034

08004454 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800445c:	f000 f852 	bl	8004504 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <prvIdleTask+0x28>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d9f9      	bls.n	800445c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <prvIdleTask+0x2c>)
 800446a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004478:	e7f0      	b.n	800445c <prvIdleTask+0x8>
 800447a:	bf00      	nop
 800447c:	20000b40 	.word	0x20000b40
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	e00c      	b.n	80044aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <prvInitialiseTaskLists+0x60>)
 800449c:	4413      	add	r3, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff fa89 	bl	80039b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3301      	adds	r3, #1
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d9ef      	bls.n	8004490 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044b0:	480d      	ldr	r0, [pc, #52]	; (80044e8 <prvInitialiseTaskLists+0x64>)
 80044b2:	f7ff fa80 	bl	80039b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044b6:	480d      	ldr	r0, [pc, #52]	; (80044ec <prvInitialiseTaskLists+0x68>)
 80044b8:	f7ff fa7d 	bl	80039b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044bc:	480c      	ldr	r0, [pc, #48]	; (80044f0 <prvInitialiseTaskLists+0x6c>)
 80044be:	f7ff fa7a 	bl	80039b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044c2:	480c      	ldr	r0, [pc, #48]	; (80044f4 <prvInitialiseTaskLists+0x70>)
 80044c4:	f7ff fa77 	bl	80039b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044c8:	480b      	ldr	r0, [pc, #44]	; (80044f8 <prvInitialiseTaskLists+0x74>)
 80044ca:	f7ff fa74 	bl	80039b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <prvInitialiseTaskLists+0x78>)
 80044d0:	4a05      	ldr	r2, [pc, #20]	; (80044e8 <prvInitialiseTaskLists+0x64>)
 80044d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <prvInitialiseTaskLists+0x7c>)
 80044d6:	4a05      	ldr	r2, [pc, #20]	; (80044ec <prvInitialiseTaskLists+0x68>)
 80044d8:	601a      	str	r2, [r3, #0]
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000b40 	.word	0x20000b40
 80044e8:	20000bcc 	.word	0x20000bcc
 80044ec:	20000be0 	.word	0x20000be0
 80044f0:	20000bfc 	.word	0x20000bfc
 80044f4:	20000c10 	.word	0x20000c10
 80044f8:	20000c28 	.word	0x20000c28
 80044fc:	20000bf4 	.word	0x20000bf4
 8004500:	20000bf8 	.word	0x20000bf8

08004504 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800450a:	e019      	b.n	8004540 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800450c:	f000 fa12 	bl	8004934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004510:	4b10      	ldr	r3, [pc, #64]	; (8004554 <prvCheckTasksWaitingTermination+0x50>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fad4 	bl	8003aca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004522:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <prvCheckTasksWaitingTermination+0x54>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3b01      	subs	r3, #1
 8004528:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <prvCheckTasksWaitingTermination+0x54>)
 800452a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <prvCheckTasksWaitingTermination+0x58>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3b01      	subs	r3, #1
 8004532:	4a0a      	ldr	r2, [pc, #40]	; (800455c <prvCheckTasksWaitingTermination+0x58>)
 8004534:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004536:	f000 fa2d 	bl	8004994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f810 	bl	8004560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <prvCheckTasksWaitingTermination+0x58>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e1      	bne.n	800450c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004548:	bf00      	nop
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000c10 	.word	0x20000c10
 8004558:	20000c3c 	.word	0x20000c3c
 800455c:	20000c24 	.word	0x20000c24

08004560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	334c      	adds	r3, #76	; 0x4c
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fce9 	bl	8004f44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d108      	bne.n	800458e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fb85 	bl	8004c90 <vPortFree>
				vPortFree( pxTCB );
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fb82 	bl	8004c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800458c:	e018      	b.n	80045c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d103      	bne.n	80045a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fb79 	bl	8004c90 <vPortFree>
	}
 800459e:	e00f      	b.n	80045c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d00a      	beq.n	80045c0 <prvDeleteTCB+0x60>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	60fb      	str	r3, [r7, #12]
}
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <prvDeleteTCB+0x5e>
	}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <prvResetNextTaskUnblockTime+0x38>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <prvResetNextTaskUnblockTime+0x3c>)
 80045da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045e0:	e008      	b.n	80045f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <prvResetNextTaskUnblockTime+0x38>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	4a04      	ldr	r2, [pc, #16]	; (8004604 <prvResetNextTaskUnblockTime+0x3c>)
 80045f2:	6013      	str	r3, [r2, #0]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	20000bf4 	.word	0x20000bf4
 8004604:	20000c5c 	.word	0x20000c5c

08004608 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004612:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004618:	4b28      	ldr	r3, [pc, #160]	; (80046bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3304      	adds	r3, #4
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff fa53 	bl	8003aca <uxListRemove>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800462a:	4b24      	ldr	r3, [pc, #144]	; (80046bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	2201      	movs	r2, #1
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43da      	mvns	r2, r3
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4013      	ands	r3, r2
 800463e:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004640:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004648:	d10a      	bne.n	8004660 <prvAddCurrentTaskToDelayedList+0x58>
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004650:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	481a      	ldr	r0, [pc, #104]	; (80046c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800465a:	f7ff f9d9 	bl	8003a10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800465e:	e026      	b.n	80046ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004668:	4b14      	ldr	r3, [pc, #80]	; (80046bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	429a      	cmp	r2, r3
 8004676:	d209      	bcs.n	800468c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3304      	adds	r3, #4
 8004682:	4619      	mov	r1, r3
 8004684:	4610      	mov	r0, r2
 8004686:	f7ff f9e7 	bl	8003a58 <vListInsert>
}
 800468a:	e010      	b.n	80046ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3304      	adds	r3, #4
 8004696:	4619      	mov	r1, r3
 8004698:	4610      	mov	r0, r2
 800469a:	f7ff f9dd 	bl	8003a58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800469e:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d202      	bcs.n	80046ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80046a8:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	6013      	str	r3, [r2, #0]
}
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000c40 	.word	0x20000c40
 80046bc:	20000b3c 	.word	0x20000b3c
 80046c0:	20000c44 	.word	0x20000c44
 80046c4:	20000c28 	.word	0x20000c28
 80046c8:	20000bf8 	.word	0x20000bf8
 80046cc:	20000bf4 	.word	0x20000bf4
 80046d0:	20000c5c 	.word	0x20000c5c

080046d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3b04      	subs	r3, #4
 80046e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3b04      	subs	r3, #4
 80046f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 0201 	bic.w	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3b04      	subs	r3, #4
 8004702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004704:	4a0c      	ldr	r2, [pc, #48]	; (8004738 <pxPortInitialiseStack+0x64>)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3b14      	subs	r3, #20
 800470e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b04      	subs	r3, #4
 800471a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f06f 0202 	mvn.w	r2, #2
 8004722:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3b20      	subs	r3, #32
 8004728:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800472a:	68fb      	ldr	r3, [r7, #12]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	0800473d 	.word	0x0800473d

0800473c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004746:	4b12      	ldr	r3, [pc, #72]	; (8004790 <prvTaskExitError+0x54>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800474e:	d00a      	beq.n	8004766 <prvTaskExitError+0x2a>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	60fb      	str	r3, [r7, #12]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <prvTaskExitError+0x28>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	60bb      	str	r3, [r7, #8]
}
 8004778:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800477a:	bf00      	nop
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0fc      	beq.n	800477c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20000030 	.word	0x20000030
	...

080047a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <pxCurrentTCBConst2>)
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	6808      	ldr	r0, [r1, #0]
 80047a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047aa:	f380 8809 	msr	PSP, r0
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f380 8811 	msr	BASEPRI, r0
 80047ba:	4770      	bx	lr
 80047bc:	f3af 8000 	nop.w

080047c0 <pxCurrentTCBConst2>:
 80047c0:	20000b3c 	.word	0x20000b3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop

080047c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80047c8:	4808      	ldr	r0, [pc, #32]	; (80047ec <prvPortStartFirstTask+0x24>)
 80047ca:	6800      	ldr	r0, [r0, #0]
 80047cc:	6800      	ldr	r0, [r0, #0]
 80047ce:	f380 8808 	msr	MSP, r0
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f380 8814 	msr	CONTROL, r0
 80047da:	b662      	cpsie	i
 80047dc:	b661      	cpsie	f
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	df00      	svc	0
 80047e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047ea:	bf00      	nop
 80047ec:	e000ed08 	.word	0xe000ed08

080047f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047f6:	4b46      	ldr	r3, [pc, #280]	; (8004910 <xPortStartScheduler+0x120>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a46      	ldr	r2, [pc, #280]	; (8004914 <xPortStartScheduler+0x124>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d10a      	bne.n	8004816 <xPortStartScheduler+0x26>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	613b      	str	r3, [r7, #16]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004816:	4b3e      	ldr	r3, [pc, #248]	; (8004910 <xPortStartScheduler+0x120>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3f      	ldr	r2, [pc, #252]	; (8004918 <xPortStartScheduler+0x128>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10a      	bne.n	8004836 <xPortStartScheduler+0x46>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	60fb      	str	r3, [r7, #12]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004836:	4b39      	ldr	r3, [pc, #228]	; (800491c <xPortStartScheduler+0x12c>)
 8004838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	22ff      	movs	r2, #255	; 0xff
 8004846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004858:	b2da      	uxtb	r2, r3
 800485a:	4b31      	ldr	r3, [pc, #196]	; (8004920 <xPortStartScheduler+0x130>)
 800485c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800485e:	4b31      	ldr	r3, [pc, #196]	; (8004924 <xPortStartScheduler+0x134>)
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004864:	e009      	b.n	800487a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004866:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <xPortStartScheduler+0x134>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3b01      	subs	r3, #1
 800486c:	4a2d      	ldr	r2, [pc, #180]	; (8004924 <xPortStartScheduler+0x134>)
 800486e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b80      	cmp	r3, #128	; 0x80
 8004884:	d0ef      	beq.n	8004866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004886:	4b27      	ldr	r3, [pc, #156]	; (8004924 <xPortStartScheduler+0x134>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1c3 0307 	rsb	r3, r3, #7
 800488e:	2b04      	cmp	r3, #4
 8004890:	d00a      	beq.n	80048a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60bb      	str	r3, [r7, #8]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048a8:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <xPortStartScheduler+0x134>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <xPortStartScheduler+0x134>)
 80048b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <xPortStartScheduler+0x134>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048ba:	4a1a      	ldr	r2, [pc, #104]	; (8004924 <xPortStartScheduler+0x134>)
 80048bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80048c6:	4b18      	ldr	r3, [pc, #96]	; (8004928 <xPortStartScheduler+0x138>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <xPortStartScheduler+0x138>)
 80048cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <xPortStartScheduler+0x138>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a14      	ldr	r2, [pc, #80]	; (8004928 <xPortStartScheduler+0x138>)
 80048d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80048dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80048de:	f000 f8dd 	bl	8004a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <xPortStartScheduler+0x13c>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80048e8:	f000 f8fc 	bl	8004ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <xPortStartScheduler+0x140>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a0f      	ldr	r2, [pc, #60]	; (8004930 <xPortStartScheduler+0x140>)
 80048f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048f8:	f7ff ff66 	bl	80047c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048fc:	f7ff fd48 	bl	8004390 <vTaskSwitchContext>
	prvTaskExitError();
 8004900:	f7ff ff1c 	bl	800473c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	e000ed00 	.word	0xe000ed00
 8004914:	410fc271 	.word	0x410fc271
 8004918:	410fc270 	.word	0x410fc270
 800491c:	e000e400 	.word	0xe000e400
 8004920:	20000c68 	.word	0x20000c68
 8004924:	20000c6c 	.word	0x20000c6c
 8004928:	e000ed20 	.word	0xe000ed20
 800492c:	20000030 	.word	0x20000030
 8004930:	e000ef34 	.word	0xe000ef34

08004934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	607b      	str	r3, [r7, #4]
}
 800494c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800494e:	4b0f      	ldr	r3, [pc, #60]	; (800498c <vPortEnterCritical+0x58>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a0d      	ldr	r2, [pc, #52]	; (800498c <vPortEnterCritical+0x58>)
 8004956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <vPortEnterCritical+0x58>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d10f      	bne.n	8004980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <vPortEnterCritical+0x5c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <vPortEnterCritical+0x4c>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	603b      	str	r3, [r7, #0]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <vPortEnterCritical+0x4a>
	}
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	20000030 	.word	0x20000030
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <vPortExitCritical+0x50>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <vPortExitCritical+0x24>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	607b      	str	r3, [r7, #4]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <vPortExitCritical+0x50>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3b01      	subs	r3, #1
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <vPortExitCritical+0x50>)
 80049c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80049c2:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <vPortExitCritical+0x50>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <vPortExitCritical+0x42>
 80049ca:	2300      	movs	r3, #0
 80049cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000030 	.word	0x20000030
	...

080049f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80049f0:	f3ef 8009 	mrs	r0, PSP
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <pxCurrentTCBConst>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	f01e 0f10 	tst.w	lr, #16
 8004a00:	bf08      	it	eq
 8004a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0a:	6010      	str	r0, [r2, #0]
 8004a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a14:	f380 8811 	msr	BASEPRI, r0
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f7ff fcb6 	bl	8004390 <vTaskSwitchContext>
 8004a24:	f04f 0000 	mov.w	r0, #0
 8004a28:	f380 8811 	msr	BASEPRI, r0
 8004a2c:	bc09      	pop	{r0, r3}
 8004a2e:	6819      	ldr	r1, [r3, #0]
 8004a30:	6808      	ldr	r0, [r1, #0]
 8004a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a36:	f01e 0f10 	tst.w	lr, #16
 8004a3a:	bf08      	it	eq
 8004a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a40:	f380 8809 	msr	PSP, r0
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	f3af 8000 	nop.w

08004a50 <pxCurrentTCBConst>:
 8004a50:	20000b3c 	.word	0x20000b3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop

08004a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	607b      	str	r3, [r7, #4]
}
 8004a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a72:	f7ff fbd5 	bl	8004220 <xTaskIncrementTick>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <SysTick_Handler+0x40>)
 8004a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f383 8811 	msr	BASEPRI, r3
}
 8004a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <vPortSetupTimerInterrupt+0x34>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <vPortSetupTimerInterrupt+0x38>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <vPortSetupTimerInterrupt+0x3c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <vPortSetupTimerInterrupt+0x40>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	099b      	lsrs	r3, r3, #6
 8004ab8:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <vPortSetupTimerInterrupt+0x44>)
 8004aba:	3b01      	subs	r3, #1
 8004abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004abe:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <vPortSetupTimerInterrupt+0x34>)
 8004ac0:	2207      	movs	r2, #7
 8004ac2:	601a      	str	r2, [r3, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	e000e010 	.word	0xe000e010
 8004ad4:	e000e018 	.word	0xe000e018
 8004ad8:	20000024 	.word	0x20000024
 8004adc:	10624dd3 	.word	0x10624dd3
 8004ae0:	e000e014 	.word	0xe000e014

08004ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004af4 <vPortEnableVFP+0x10>
 8004ae8:	6801      	ldr	r1, [r0, #0]
 8004aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004aee:	6001      	str	r1, [r0, #0]
 8004af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004af2:	bf00      	nop
 8004af4:	e000ed88 	.word	0xe000ed88

08004af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b04:	f7ff fad2 	bl	80040ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b08:	4b5b      	ldr	r3, [pc, #364]	; (8004c78 <pvPortMalloc+0x180>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b10:	f000 f920 	bl	8004d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b14:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <pvPortMalloc+0x184>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 8093 	bne.w	8004c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01d      	beq.n	8004b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b28:	2208      	movs	r2, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d014      	beq.n	8004b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f023 0307 	bic.w	r3, r3, #7
 8004b40:	3308      	adds	r3, #8
 8004b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <pvPortMalloc+0x6c>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	617b      	str	r3, [r7, #20]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d06e      	beq.n	8004c48 <pvPortMalloc+0x150>
 8004b6a:	4b45      	ldr	r3, [pc, #276]	; (8004c80 <pvPortMalloc+0x188>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d869      	bhi.n	8004c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b74:	4b43      	ldr	r3, [pc, #268]	; (8004c84 <pvPortMalloc+0x18c>)
 8004b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b78:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <pvPortMalloc+0x18c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b7e:	e004      	b.n	8004b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d903      	bls.n	8004b9c <pvPortMalloc+0xa4>
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f1      	bne.n	8004b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b9c:	4b36      	ldr	r3, [pc, #216]	; (8004c78 <pvPortMalloc+0x180>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d050      	beq.n	8004c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2208      	movs	r2, #8
 8004bac:	4413      	add	r3, r2
 8004bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d91f      	bls.n	8004c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	613b      	str	r3, [r7, #16]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1ad2      	subs	r2, r2, r3
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c02:	69b8      	ldr	r0, [r7, #24]
 8004c04:	f000 f908 	bl	8004e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c08:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <pvPortMalloc+0x188>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <pvPortMalloc+0x188>)
 8004c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <pvPortMalloc+0x188>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <pvPortMalloc+0x190>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d203      	bcs.n	8004c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c22:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <pvPortMalloc+0x188>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <pvPortMalloc+0x190>)
 8004c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <pvPortMalloc+0x184>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <pvPortMalloc+0x194>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <pvPortMalloc+0x194>)
 8004c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c48:	f7ff fa3e 	bl	80040c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <pvPortMalloc+0x174>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60fb      	str	r3, [r7, #12]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <pvPortMalloc+0x172>
	return pvReturn;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3728      	adds	r7, #40	; 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20004878 	.word	0x20004878
 8004c7c:	2000488c 	.word	0x2000488c
 8004c80:	2000487c 	.word	0x2000487c
 8004c84:	20004870 	.word	0x20004870
 8004c88:	20004880 	.word	0x20004880
 8004c8c:	20004884 	.word	0x20004884

08004c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d04d      	beq.n	8004d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	425b      	negs	r3, r3
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4413      	add	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <vPortFree+0xb8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <vPortFree+0x44>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	60fb      	str	r3, [r7, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <vPortFree+0x62>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60bb      	str	r3, [r7, #8]
}
 8004cee:	bf00      	nop
 8004cf0:	e7fe      	b.n	8004cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <vPortFree+0xb8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01e      	beq.n	8004d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d11a      	bne.n	8004d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <vPortFree+0xb8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	401a      	ands	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d18:	f7ff f9c8 	bl	80040ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <vPortFree+0xbc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4413      	add	r3, r2
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <vPortFree+0xbc>)
 8004d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f000 f874 	bl	8004e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <vPortFree+0xc0>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	4a06      	ldr	r2, [pc, #24]	; (8004d50 <vPortFree+0xc0>)
 8004d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d3a:	f7ff f9c5 	bl	80040c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	2000488c 	.word	0x2000488c
 8004d4c:	2000487c 	.word	0x2000487c
 8004d50:	20004888 	.word	0x20004888

08004d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <prvHeapInit+0xac>)
 8004d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3307      	adds	r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0307 	bic.w	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <prvHeapInit+0xac>)
 8004d84:	4413      	add	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d8c:	4a1d      	ldr	r2, [pc, #116]	; (8004e04 <prvHeapInit+0xb0>)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d92:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <prvHeapInit+0xb0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004da0:	2208      	movs	r2, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <prvHeapInit+0xb4>)
 8004db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <prvHeapInit+0xb4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <prvHeapInit+0xb4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <prvHeapInit+0xb4>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <prvHeapInit+0xb8>)
 8004de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <prvHeapInit+0xbc>)
 8004dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <prvHeapInit+0xc0>)
 8004dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	20000c70 	.word	0x20000c70
 8004e04:	20004870 	.word	0x20004870
 8004e08:	20004878 	.word	0x20004878
 8004e0c:	20004880 	.word	0x20004880
 8004e10:	2000487c 	.word	0x2000487c
 8004e14:	2000488c 	.word	0x2000488c

08004e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e20:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <prvInsertBlockIntoFreeList+0xac>)
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e002      	b.n	8004e2c <prvInsertBlockIntoFreeList+0x14>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d8f7      	bhi.n	8004e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	4413      	add	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d108      	bne.n	8004e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	441a      	add	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	441a      	add	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d118      	bne.n	8004ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d00d      	beq.n	8004e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	441a      	add	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	e008      	b.n	8004ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e003      	b.n	8004ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d002      	beq.n	8004eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	20004870 	.word	0x20004870
 8004ec8:	20004878 	.word	0x20004878

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4d0d      	ldr	r5, [pc, #52]	; (8004f04 <__libc_init_array+0x38>)
 8004ed0:	4c0d      	ldr	r4, [pc, #52]	; (8004f08 <__libc_init_array+0x3c>)
 8004ed2:	1b64      	subs	r4, r4, r5
 8004ed4:	10a4      	asrs	r4, r4, #2
 8004ed6:	2600      	movs	r6, #0
 8004ed8:	42a6      	cmp	r6, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	4d0b      	ldr	r5, [pc, #44]	; (8004f0c <__libc_init_array+0x40>)
 8004ede:	4c0c      	ldr	r4, [pc, #48]	; (8004f10 <__libc_init_array+0x44>)
 8004ee0:	f000 f8e4 	bl	80050ac <_init>
 8004ee4:	1b64      	subs	r4, r4, r5
 8004ee6:	10a4      	asrs	r4, r4, #2
 8004ee8:	2600      	movs	r6, #0
 8004eea:	42a6      	cmp	r6, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef4:	4798      	blx	r3
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efe:	4798      	blx	r3
 8004f00:	3601      	adds	r6, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	080051a8 	.word	0x080051a8
 8004f08:	080051a8 	.word	0x080051a8
 8004f0c:	080051a8 	.word	0x080051a8
 8004f10:	080051ac 	.word	0x080051ac

08004f14 <__retarget_lock_acquire_recursive>:
 8004f14:	4770      	bx	lr

08004f16 <__retarget_lock_release_recursive>:
 8004f16:	4770      	bx	lr

08004f18 <memset>:
 8004f18:	4402      	add	r2, r0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d100      	bne.n	8004f22 <memset+0xa>
 8004f20:	4770      	bx	lr
 8004f22:	f803 1b01 	strb.w	r1, [r3], #1
 8004f26:	e7f9      	b.n	8004f1c <memset+0x4>

08004f28 <cleanup_glue>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	6809      	ldr	r1, [r1, #0]
 8004f2e:	4605      	mov	r5, r0
 8004f30:	b109      	cbz	r1, 8004f36 <cleanup_glue+0xe>
 8004f32:	f7ff fff9 	bl	8004f28 <cleanup_glue>
 8004f36:	4621      	mov	r1, r4
 8004f38:	4628      	mov	r0, r5
 8004f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f3e:	f000 b869 	b.w	8005014 <_free_r>
	...

08004f44 <_reclaim_reent>:
 8004f44:	4b2c      	ldr	r3, [pc, #176]	; (8004ff8 <_reclaim_reent+0xb4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4283      	cmp	r3, r0
 8004f4a:	b570      	push	{r4, r5, r6, lr}
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	d051      	beq.n	8004ff4 <_reclaim_reent+0xb0>
 8004f50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f52:	b143      	cbz	r3, 8004f66 <_reclaim_reent+0x22>
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d14a      	bne.n	8004ff0 <_reclaim_reent+0xac>
 8004f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f5c:	6819      	ldr	r1, [r3, #0]
 8004f5e:	b111      	cbz	r1, 8004f66 <_reclaim_reent+0x22>
 8004f60:	4620      	mov	r0, r4
 8004f62:	f000 f857 	bl	8005014 <_free_r>
 8004f66:	6961      	ldr	r1, [r4, #20]
 8004f68:	b111      	cbz	r1, 8004f70 <_reclaim_reent+0x2c>
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f000 f852 	bl	8005014 <_free_r>
 8004f70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f72:	b111      	cbz	r1, 8004f7a <_reclaim_reent+0x36>
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 f84d 	bl	8005014 <_free_r>
 8004f7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f7c:	b111      	cbz	r1, 8004f84 <_reclaim_reent+0x40>
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f000 f848 	bl	8005014 <_free_r>
 8004f84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004f86:	b111      	cbz	r1, 8004f8e <_reclaim_reent+0x4a>
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f000 f843 	bl	8005014 <_free_r>
 8004f8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004f90:	b111      	cbz	r1, 8004f98 <_reclaim_reent+0x54>
 8004f92:	4620      	mov	r0, r4
 8004f94:	f000 f83e 	bl	8005014 <_free_r>
 8004f98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f9a:	b111      	cbz	r1, 8004fa2 <_reclaim_reent+0x5e>
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f000 f839 	bl	8005014 <_free_r>
 8004fa2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004fa4:	b111      	cbz	r1, 8004fac <_reclaim_reent+0x68>
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f000 f834 	bl	8005014 <_free_r>
 8004fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fae:	b111      	cbz	r1, 8004fb6 <_reclaim_reent+0x72>
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f000 f82f 	bl	8005014 <_free_r>
 8004fb6:	69a3      	ldr	r3, [r4, #24]
 8004fb8:	b1e3      	cbz	r3, 8004ff4 <_reclaim_reent+0xb0>
 8004fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	4798      	blx	r3
 8004fc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004fc2:	b1b9      	cbz	r1, 8004ff4 <_reclaim_reent+0xb0>
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fca:	f7ff bfad 	b.w	8004f28 <cleanup_glue>
 8004fce:	5949      	ldr	r1, [r1, r5]
 8004fd0:	b941      	cbnz	r1, 8004fe4 <_reclaim_reent+0xa0>
 8004fd2:	3504      	adds	r5, #4
 8004fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd6:	2d80      	cmp	r5, #128	; 0x80
 8004fd8:	68d9      	ldr	r1, [r3, #12]
 8004fda:	d1f8      	bne.n	8004fce <_reclaim_reent+0x8a>
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f000 f819 	bl	8005014 <_free_r>
 8004fe2:	e7ba      	b.n	8004f5a <_reclaim_reent+0x16>
 8004fe4:	680e      	ldr	r6, [r1, #0]
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 f814 	bl	8005014 <_free_r>
 8004fec:	4631      	mov	r1, r6
 8004fee:	e7ef      	b.n	8004fd0 <_reclaim_reent+0x8c>
 8004ff0:	2500      	movs	r5, #0
 8004ff2:	e7ef      	b.n	8004fd4 <_reclaim_reent+0x90>
 8004ff4:	bd70      	pop	{r4, r5, r6, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000034 	.word	0x20000034

08004ffc <__malloc_lock>:
 8004ffc:	4801      	ldr	r0, [pc, #4]	; (8005004 <__malloc_lock+0x8>)
 8004ffe:	f7ff bf89 	b.w	8004f14 <__retarget_lock_acquire_recursive>
 8005002:	bf00      	nop
 8005004:	20004890 	.word	0x20004890

08005008 <__malloc_unlock>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__malloc_unlock+0x8>)
 800500a:	f7ff bf84 	b.w	8004f16 <__retarget_lock_release_recursive>
 800500e:	bf00      	nop
 8005010:	20004890 	.word	0x20004890

08005014 <_free_r>:
 8005014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005016:	2900      	cmp	r1, #0
 8005018:	d044      	beq.n	80050a4 <_free_r+0x90>
 800501a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800501e:	9001      	str	r0, [sp, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f1a1 0404 	sub.w	r4, r1, #4
 8005026:	bfb8      	it	lt
 8005028:	18e4      	addlt	r4, r4, r3
 800502a:	f7ff ffe7 	bl	8004ffc <__malloc_lock>
 800502e:	4a1e      	ldr	r2, [pc, #120]	; (80050a8 <_free_r+0x94>)
 8005030:	9801      	ldr	r0, [sp, #4]
 8005032:	6813      	ldr	r3, [r2, #0]
 8005034:	b933      	cbnz	r3, 8005044 <_free_r+0x30>
 8005036:	6063      	str	r3, [r4, #4]
 8005038:	6014      	str	r4, [r2, #0]
 800503a:	b003      	add	sp, #12
 800503c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005040:	f7ff bfe2 	b.w	8005008 <__malloc_unlock>
 8005044:	42a3      	cmp	r3, r4
 8005046:	d908      	bls.n	800505a <_free_r+0x46>
 8005048:	6825      	ldr	r5, [r4, #0]
 800504a:	1961      	adds	r1, r4, r5
 800504c:	428b      	cmp	r3, r1
 800504e:	bf01      	itttt	eq
 8005050:	6819      	ldreq	r1, [r3, #0]
 8005052:	685b      	ldreq	r3, [r3, #4]
 8005054:	1949      	addeq	r1, r1, r5
 8005056:	6021      	streq	r1, [r4, #0]
 8005058:	e7ed      	b.n	8005036 <_free_r+0x22>
 800505a:	461a      	mov	r2, r3
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	b10b      	cbz	r3, 8005064 <_free_r+0x50>
 8005060:	42a3      	cmp	r3, r4
 8005062:	d9fa      	bls.n	800505a <_free_r+0x46>
 8005064:	6811      	ldr	r1, [r2, #0]
 8005066:	1855      	adds	r5, r2, r1
 8005068:	42a5      	cmp	r5, r4
 800506a:	d10b      	bne.n	8005084 <_free_r+0x70>
 800506c:	6824      	ldr	r4, [r4, #0]
 800506e:	4421      	add	r1, r4
 8005070:	1854      	adds	r4, r2, r1
 8005072:	42a3      	cmp	r3, r4
 8005074:	6011      	str	r1, [r2, #0]
 8005076:	d1e0      	bne.n	800503a <_free_r+0x26>
 8005078:	681c      	ldr	r4, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	6053      	str	r3, [r2, #4]
 800507e:	4421      	add	r1, r4
 8005080:	6011      	str	r1, [r2, #0]
 8005082:	e7da      	b.n	800503a <_free_r+0x26>
 8005084:	d902      	bls.n	800508c <_free_r+0x78>
 8005086:	230c      	movs	r3, #12
 8005088:	6003      	str	r3, [r0, #0]
 800508a:	e7d6      	b.n	800503a <_free_r+0x26>
 800508c:	6825      	ldr	r5, [r4, #0]
 800508e:	1961      	adds	r1, r4, r5
 8005090:	428b      	cmp	r3, r1
 8005092:	bf04      	itt	eq
 8005094:	6819      	ldreq	r1, [r3, #0]
 8005096:	685b      	ldreq	r3, [r3, #4]
 8005098:	6063      	str	r3, [r4, #4]
 800509a:	bf04      	itt	eq
 800509c:	1949      	addeq	r1, r1, r5
 800509e:	6021      	streq	r1, [r4, #0]
 80050a0:	6054      	str	r4, [r2, #4]
 80050a2:	e7ca      	b.n	800503a <_free_r+0x26>
 80050a4:	b003      	add	sp, #12
 80050a6:	bd30      	pop	{r4, r5, pc}
 80050a8:	20004894 	.word	0x20004894

080050ac <_init>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	bf00      	nop
 80050b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b2:	bc08      	pop	{r3}
 80050b4:	469e      	mov	lr, r3
 80050b6:	4770      	bx	lr

080050b8 <_fini>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	bf00      	nop
 80050bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050be:	bc08      	pop	{r3}
 80050c0:	469e      	mov	lr, r3
 80050c2:	4770      	bx	lr
